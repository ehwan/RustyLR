// This file was generated by rustylr 1.9.0
// This generated code is targeting rusty_lr version 3.17.0.
// There might be a build error if the version is not matched.
//
// Input file: ../rusty_lr_parser/src/parser/parser.rs
// Output file: out.tab.rs
// ================================User Codes Begin================================
use crate::parser::args::GrammarArgs;
use crate::parser::args::IdentOrLiteral;
use crate::parser::args::PatternArgs;
use crate::parser::args::PrecDPrecArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::lexer::Lexed;
use crate::terminalset::TerminalSet;
use crate::terminalset::TerminalSetItem;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use rusty_lr_core::ReduceType;
use std::boxed::Box;
// =================================User Codes End=================================
/*
====================================Grammar=====================================

# of terminal classes: 40
# of states: 172

Rule -> ident RuleType colon RuleLines semicolon
RuleType -> parengroup
RuleType ->
RuleLines -> RuleLines pipe RuleLine
RuleLines -> RuleLine
RuleLine -> TokenMapped* PrecDef* Action
PrecDef -> prec IdentOrLiteral
PrecDef -> dprec literal
TokenMapped -> Pattern
TokenMapped -> ident equal Pattern
TerminalSetItem -> ident
TerminalSetItem -> ident minus ident
TerminalSetItem -> literal
TerminalSetItem -> literal minus literal
TerminalSet -> lbracket caret? TerminalSetItem* rbracket
TerminalSet -> dot
Pattern -> ident
Pattern -> Pattern plus
Pattern -> Pattern star
Pattern -> Pattern question
Pattern -> Pattern exclamation
Pattern -> TerminalSet
Pattern -> Pattern slash Pattern
Pattern -> lparen Pattern+ rparen
Pattern -> literal
Pattern -> Pattern minus Pattern
Action -> bracegroup
Action ->
TokenDef -> token ident RustCode semicolon
RustCode -> [^semicolon]+
StartDef -> start ident semicolon
EofDef -> eofdef RustCode semicolon
TokenTypeDef -> tokentype RustCode semicolon
UserDataDef -> userdata RustCode semicolon
IdentOrLiteral -> ident
IdentOrLiteral -> literal
ReduceType -> left
ReduceType -> right
ReduceDef -> ReduceType IdentOrLiteral+ semicolon
ErrorDef -> errortype RustCode semicolon
ModulePrefixDef -> moduleprefix RustCode semicolon
Glr -> glr semicolon
Lalr -> lalr semicolon
Precedence -> precedence IdentOrLiteral+ semicolon
NoOptim -> nooptim semicolon
Dense -> dense semicolon
Trace -> trace ident* semicolon
Filter -> filter RustCode semicolon
GrammarLine -> Rule
GrammarLine -> TokenDef
GrammarLine -> StartDef
GrammarLine -> EofDef
GrammarLine -> TokenTypeDef
GrammarLine -> UserDataDef
GrammarLine -> ReduceDef
GrammarLine -> ErrorDef
GrammarLine -> ModulePrefixDef
GrammarLine -> Lalr
GrammarLine -> Glr
GrammarLine -> Precedence
GrammarLine -> NoOptim
GrammarLine -> Dense
GrammarLine -> Trace
GrammarLine -> Filter
Grammar -> GrammarLine+
TokenMapped+ -> TokenMapped
TokenMapped+ -> TokenMapped+ TokenMapped
TokenMapped* -> TokenMapped+
TokenMapped* ->
PrecDef+ -> PrecDef
PrecDef+ -> PrecDef+ PrecDef
PrecDef* -> PrecDef+
PrecDef* ->
caret? -> caret
caret? ->
TerminalSetItem+ -> TerminalSetItem
TerminalSetItem+ -> TerminalSetItem+ TerminalSetItem
TerminalSetItem* -> TerminalSetItem+
TerminalSetItem* ->
Pattern+ -> Pattern
Pattern+ -> Pattern+ Pattern
[^semicolon] -> ident
[^semicolon] -> colon
[^semicolon] -> pipe
[^semicolon] -> [percent, <Others>] (2 terms)
[^semicolon] -> equal
[^semicolon] -> plus
[^semicolon] -> star
[^semicolon] -> question
[^semicolon] -> caret
[^semicolon] -> minus
[^semicolon] -> exclamation
[^semicolon] -> slash
[^semicolon] -> dot
[^semicolon] -> literal
[^semicolon] -> parengroup
[^semicolon] -> bracegroup
[^semicolon] -> lparen
[^semicolon] -> rparen
[^semicolon] -> lbracket
[^semicolon] -> rbracket
[^semicolon] -> left
[^semicolon] -> right
[^semicolon] -> token
[^semicolon] -> start
[^semicolon] -> eofdef
[^semicolon] -> tokentype
[^semicolon] -> userdata
[^semicolon] -> errortype
[^semicolon] -> moduleprefix
[^semicolon] -> lalr
[^semicolon] -> glr
[^semicolon] -> prec
[^semicolon] -> precedence
[^semicolon] -> nooptim
[^semicolon] -> dense
[^semicolon] -> trace
[^semicolon] -> dprec
[^semicolon] -> filter
[^semicolon]+ -> [^semicolon]
[^semicolon]+ -> [^semicolon]+ [^semicolon]
IdentOrLiteral+ -> IdentOrLiteral
IdentOrLiteral+ -> IdentOrLiteral+ IdentOrLiteral
ident+ -> ident
ident+ -> ident+ ident
ident* -> ident+
ident* ->
GrammarLine+ -> GrammarLine
GrammarLine+ -> GrammarLine GrammarLine+
Augmented -> Grammar eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for `Context`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarContext = ::rusty_lr_core::lr::Context<GrammarStack>;
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarRule = ::rusty_lr_core::ProductionRule<&'static str, GrammarNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarState = ::rusty_lr_core::lr::SparseState<GrammarNonTerminals>;
#[doc = r" type alias for `ParseError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarParseError = ::rusty_lr_core::lr::ParseError<
    Lexed,
    GrammarNonTerminals,
    ::rusty_lr_core::DefaultReduceActionError,
>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarInvalidTerminalError =
    ::rusty_lr_core::lr::InvalidTerminalError<Lexed, GrammarNonTerminals>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum GrammarNonTerminals {
    Rule,
    RuleType,
    RuleLines,
    RuleLine,
    PrecDef,
    TokenMapped,
    TerminalSetItem,
    TerminalSet,
    Pattern,
    Action,
    TokenDef,
    RustCode,
    StartDef,
    EofDef,
    TokenTypeDef,
    UserDataDef,
    IdentOrLiteral,
    ReduceType,
    ReduceDef,
    ErrorDef,
    ModulePrefixDef,
    Glr,
    Lalr,
    Precedence,
    NoOptim,
    Dense,
    Trace,
    Filter,
    GrammarLine,
    Grammar,
    error,
    _TokenMappedPlus31,
    _TokenMappedStar32,
    _PrecDefPlus33,
    _PrecDefStar34,
    _caretQuestion35,
    _TerminalSetItemPlus36,
    _TerminalSetItemStar37,
    _PatternPlus38,
    _TermSet39,
    __TermSet39Plus40,
    _IdentOrLiteralPlus41,
    _identPlus42,
    _identStar43,
    _GrammarLinePlus44,
    Augmented,
}
impl GrammarNonTerminals {
    #[doc = r" convert to string"]
    pub fn as_str(&self) -> &'static str {
        match self {
            GrammarNonTerminals::Rule => "Rule",
            GrammarNonTerminals::RuleType => "RuleType",
            GrammarNonTerminals::RuleLines => "RuleLines",
            GrammarNonTerminals::RuleLine => "RuleLine",
            GrammarNonTerminals::PrecDef => "PrecDef",
            GrammarNonTerminals::TokenMapped => "TokenMapped",
            GrammarNonTerminals::TerminalSetItem => "TerminalSetItem",
            GrammarNonTerminals::TerminalSet => "TerminalSet",
            GrammarNonTerminals::Pattern => "Pattern",
            GrammarNonTerminals::Action => "Action",
            GrammarNonTerminals::TokenDef => "TokenDef",
            GrammarNonTerminals::RustCode => "RustCode",
            GrammarNonTerminals::StartDef => "StartDef",
            GrammarNonTerminals::EofDef => "EofDef",
            GrammarNonTerminals::TokenTypeDef => "TokenTypeDef",
            GrammarNonTerminals::UserDataDef => "UserDataDef",
            GrammarNonTerminals::IdentOrLiteral => "IdentOrLiteral",
            GrammarNonTerminals::ReduceType => "ReduceType",
            GrammarNonTerminals::ReduceDef => "ReduceDef",
            GrammarNonTerminals::ErrorDef => "ErrorDef",
            GrammarNonTerminals::ModulePrefixDef => "ModulePrefixDef",
            GrammarNonTerminals::Glr => "Glr",
            GrammarNonTerminals::Lalr => "Lalr",
            GrammarNonTerminals::Precedence => "Precedence",
            GrammarNonTerminals::NoOptim => "NoOptim",
            GrammarNonTerminals::Dense => "Dense",
            GrammarNonTerminals::Trace => "Trace",
            GrammarNonTerminals::Filter => "Filter",
            GrammarNonTerminals::GrammarLine => "GrammarLine",
            GrammarNonTerminals::Grammar => "Grammar",
            GrammarNonTerminals::error => "'error'",
            GrammarNonTerminals::_TokenMappedPlus31 => "TokenMapped+",
            GrammarNonTerminals::_TokenMappedStar32 => "TokenMapped*",
            GrammarNonTerminals::_PrecDefPlus33 => "PrecDef+",
            GrammarNonTerminals::_PrecDefStar34 => "PrecDef*",
            GrammarNonTerminals::_caretQuestion35 => "caret?",
            GrammarNonTerminals::_TerminalSetItemPlus36 => "TerminalSetItem+",
            GrammarNonTerminals::_TerminalSetItemStar37 => "TerminalSetItem*",
            GrammarNonTerminals::_PatternPlus38 => "Pattern+",
            GrammarNonTerminals::_TermSet39 => "[^semicolon]",
            GrammarNonTerminals::__TermSet39Plus40 => "[^semicolon]+",
            GrammarNonTerminals::_IdentOrLiteralPlus41 => "IdentOrLiteral+",
            GrammarNonTerminals::_identPlus42 => "ident+",
            GrammarNonTerminals::_identStar43 => "ident*",
            GrammarNonTerminals::_GrammarLinePlus44 => "GrammarLine+",
            GrammarNonTerminals::Augmented => "Augmented",
        }
    }
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
impl std::fmt::Debug for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
impl ::rusty_lr_core::NonTerminal<Lexed> for GrammarNonTerminals {
    fn is_auto_generated(&self) -> bool {
        match self {
            GrammarNonTerminals::Rule => false,
            GrammarNonTerminals::RuleType => false,
            GrammarNonTerminals::RuleLines => false,
            GrammarNonTerminals::RuleLine => false,
            GrammarNonTerminals::PrecDef => false,
            GrammarNonTerminals::TokenMapped => false,
            GrammarNonTerminals::TerminalSetItem => false,
            GrammarNonTerminals::TerminalSet => false,
            GrammarNonTerminals::Pattern => false,
            GrammarNonTerminals::Action => false,
            GrammarNonTerminals::TokenDef => false,
            GrammarNonTerminals::RustCode => false,
            GrammarNonTerminals::StartDef => false,
            GrammarNonTerminals::EofDef => false,
            GrammarNonTerminals::TokenTypeDef => false,
            GrammarNonTerminals::UserDataDef => false,
            GrammarNonTerminals::IdentOrLiteral => false,
            GrammarNonTerminals::ReduceType => false,
            GrammarNonTerminals::ReduceDef => false,
            GrammarNonTerminals::ErrorDef => false,
            GrammarNonTerminals::ModulePrefixDef => false,
            GrammarNonTerminals::Glr => false,
            GrammarNonTerminals::Lalr => false,
            GrammarNonTerminals::Precedence => false,
            GrammarNonTerminals::NoOptim => false,
            GrammarNonTerminals::Dense => false,
            GrammarNonTerminals::Trace => false,
            GrammarNonTerminals::Filter => false,
            GrammarNonTerminals::GrammarLine => false,
            GrammarNonTerminals::Grammar => false,
            GrammarNonTerminals::error => false,
            GrammarNonTerminals::_TokenMappedPlus31 => true,
            GrammarNonTerminals::_TokenMappedStar32 => true,
            GrammarNonTerminals::_PrecDefPlus33 => true,
            GrammarNonTerminals::_PrecDefStar34 => true,
            GrammarNonTerminals::_caretQuestion35 => true,
            GrammarNonTerminals::_TerminalSetItemPlus36 => true,
            GrammarNonTerminals::_TerminalSetItemStar37 => true,
            GrammarNonTerminals::_PatternPlus38 => true,
            GrammarNonTerminals::_TermSet39 => true,
            GrammarNonTerminals::__TermSet39Plus40 => true,
            GrammarNonTerminals::_IdentOrLiteralPlus41 => true,
            GrammarNonTerminals::_identPlus42 => true,
            GrammarNonTerminals::_identStar43 => true,
            GrammarNonTerminals::_GrammarLinePlus44 => true,
            GrammarNonTerminals::Augmented => true,
        }
    }
    fn is_augmented(&self) -> bool {
        match self {
            GrammarNonTerminals::Rule => false,
            GrammarNonTerminals::RuleType => false,
            GrammarNonTerminals::RuleLines => false,
            GrammarNonTerminals::RuleLine => false,
            GrammarNonTerminals::PrecDef => false,
            GrammarNonTerminals::TokenMapped => false,
            GrammarNonTerminals::TerminalSetItem => false,
            GrammarNonTerminals::TerminalSet => false,
            GrammarNonTerminals::Pattern => false,
            GrammarNonTerminals::Action => false,
            GrammarNonTerminals::TokenDef => false,
            GrammarNonTerminals::RustCode => false,
            GrammarNonTerminals::StartDef => false,
            GrammarNonTerminals::EofDef => false,
            GrammarNonTerminals::TokenTypeDef => false,
            GrammarNonTerminals::UserDataDef => false,
            GrammarNonTerminals::IdentOrLiteral => false,
            GrammarNonTerminals::ReduceType => false,
            GrammarNonTerminals::ReduceDef => false,
            GrammarNonTerminals::ErrorDef => false,
            GrammarNonTerminals::ModulePrefixDef => false,
            GrammarNonTerminals::Glr => false,
            GrammarNonTerminals::Lalr => false,
            GrammarNonTerminals::Precedence => false,
            GrammarNonTerminals::NoOptim => false,
            GrammarNonTerminals::Dense => false,
            GrammarNonTerminals::Trace => false,
            GrammarNonTerminals::Filter => false,
            GrammarNonTerminals::GrammarLine => false,
            GrammarNonTerminals::Grammar => false,
            GrammarNonTerminals::error => false,
            GrammarNonTerminals::_TokenMappedPlus31 => false,
            GrammarNonTerminals::_TokenMappedStar32 => false,
            GrammarNonTerminals::_PrecDefPlus33 => false,
            GrammarNonTerminals::_PrecDefStar34 => false,
            GrammarNonTerminals::_caretQuestion35 => false,
            GrammarNonTerminals::_TerminalSetItemPlus36 => false,
            GrammarNonTerminals::_TerminalSetItemStar37 => false,
            GrammarNonTerminals::_PatternPlus38 => false,
            GrammarNonTerminals::_TermSet39 => false,
            GrammarNonTerminals::__TermSet39Plus40 => false,
            GrammarNonTerminals::_IdentOrLiteralPlus41 => false,
            GrammarNonTerminals::_identPlus42 => false,
            GrammarNonTerminals::_identStar43 => false,
            GrammarNonTerminals::_GrammarLinePlus44 => false,
            GrammarNonTerminals::Augmented => true,
        }
    }
    fn is_trace(&self) -> bool {
        match self {
            GrammarNonTerminals::Rule => false,
            GrammarNonTerminals::RuleType => false,
            GrammarNonTerminals::RuleLines => false,
            GrammarNonTerminals::RuleLine => false,
            GrammarNonTerminals::PrecDef => false,
            GrammarNonTerminals::TokenMapped => false,
            GrammarNonTerminals::TerminalSetItem => false,
            GrammarNonTerminals::TerminalSet => false,
            GrammarNonTerminals::Pattern => false,
            GrammarNonTerminals::Action => false,
            GrammarNonTerminals::TokenDef => false,
            GrammarNonTerminals::RustCode => false,
            GrammarNonTerminals::StartDef => false,
            GrammarNonTerminals::EofDef => false,
            GrammarNonTerminals::TokenTypeDef => false,
            GrammarNonTerminals::UserDataDef => false,
            GrammarNonTerminals::IdentOrLiteral => false,
            GrammarNonTerminals::ReduceType => false,
            GrammarNonTerminals::ReduceDef => false,
            GrammarNonTerminals::ErrorDef => false,
            GrammarNonTerminals::ModulePrefixDef => false,
            GrammarNonTerminals::Glr => false,
            GrammarNonTerminals::Lalr => false,
            GrammarNonTerminals::Precedence => false,
            GrammarNonTerminals::NoOptim => false,
            GrammarNonTerminals::Dense => false,
            GrammarNonTerminals::Trace => false,
            GrammarNonTerminals::Filter => false,
            GrammarNonTerminals::GrammarLine => false,
            GrammarNonTerminals::Grammar => false,
            GrammarNonTerminals::error => false,
            GrammarNonTerminals::_TokenMappedPlus31 => false,
            GrammarNonTerminals::_TokenMappedStar32 => false,
            GrammarNonTerminals::_PrecDefPlus33 => false,
            GrammarNonTerminals::_PrecDefStar34 => false,
            GrammarNonTerminals::_caretQuestion35 => false,
            GrammarNonTerminals::_TerminalSetItemPlus36 => false,
            GrammarNonTerminals::_TerminalSetItemStar37 => false,
            GrammarNonTerminals::_PatternPlus38 => false,
            GrammarNonTerminals::_TermSet39 => false,
            GrammarNonTerminals::__TermSet39Plus40 => false,
            GrammarNonTerminals::_IdentOrLiteralPlus41 => false,
            GrammarNonTerminals::_identPlus42 => false,
            GrammarNonTerminals::_identStar43 => false,
            GrammarNonTerminals::_GrammarLinePlus44 => false,
            GrammarNonTerminals::Augmented => false,
        }
    }
}
#[doc = r" struct that holds internal parser data,"]
#[doc = r" including data stack for each non-terminal,"]
#[doc = r" and state stack for DFA"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types
)]
pub struct GrammarStack {
    __rustylr_generated_terminal_stack: Vec<Lexed>,
    __rustylr_generated_stack_1: Vec<RuleDefArgs>,
    __rustylr_generated_stack_2: Vec<Option<Group>>,
    __rustylr_generated_stack_3: Vec<Vec<RuleLineArgs>>,
    __rustylr_generated_stack_4: Vec<RuleLineArgs>,
    __rustylr_generated_stack_5: Vec<PrecDPrecArgs>,
    __rustylr_generated_stack_6: Vec<(Option<Ident>, PatternArgs)>,
    __rustylr_generated_stack_7: Vec<TerminalSetItem>,
    __rustylr_generated_stack_8: Vec<TerminalSet>,
    __rustylr_generated_stack_9: Vec<PatternArgs>,
    __rustylr_generated_stack_10: Vec<(Ident, TokenStream)>,
    __rustylr_generated_stack_11: Vec<TokenStream>,
    __rustylr_generated_stack_12: Vec<Ident>,
    __rustylr_generated_stack_13: Vec<(Span, TokenStream)>,
    __rustylr_generated_stack_14: Vec<IdentOrLiteral>,
    __rustylr_generated_stack_15: Vec<ReduceType>,
    __rustylr_generated_stack_16: Vec<(ReduceType, Vec<IdentOrLiteral>)>,
    __rustylr_generated_stack_17: Vec<Vec<IdentOrLiteral>>,
    __rustylr_generated_stack_18: Vec<Vec<Ident>>,
    __rustylr_generated_stack_19: Vec<Vec<(Option<Ident>, PatternArgs)>>,
    __rustylr_generated_stack_20: Vec<Vec<PrecDPrecArgs>>,
    __rustylr_generated_stack_21: Vec<Option<Lexed>>,
    __rustylr_generated_stack_22: Vec<Vec<TerminalSetItem>>,
    __rustylr_generated_stack_23: Vec<Vec<PatternArgs>>,
    __rustylr_generated_stack_24: Vec<Vec<Lexed>>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types,
    dead_code
)]
impl GrammarStack {
    fn reduce_Rule_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        let mut colon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleType = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_1.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("Rule-Ident");
            };
            if let Lexed::Colon(colon) = colon {
                let span = colon.span();
                if let Some(fisrt) = RuleLines.first_mut() {
                    fisrt.separator_span = span;
                }
            } else {
                unreachable!("Rule-Colon2");
            }
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.stream()),
                rule_lines: RuleLines,
            }
        });
        Ok(())
    }
    fn reduce_RuleType_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut parengroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::ParenGroup(group) = parengroup {
                Some(group)
            } else {
                unreachable!("RuleType - Group");
            }
        });
        Ok(())
    }
    fn reduce_RuleType_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_RuleLines_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        let mut pipe = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        self.__rustylr_generated_stack_3.push({
            if let Lexed::Pipe(punct) = pipe {
                RuleLine.separator_span = punct.span();
                RuleLines.push(RuleLine);
            }
            RuleLines
        });
        Ok(())
    }
    fn reduce_RuleLines_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        self.__rustylr_generated_stack_3.push({ vec![RuleLine] });
        Ok(())
    }
    fn reduce_RuleLine_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Action = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut PrecDef = self.__rustylr_generated_stack_20.pop().unwrap();
        let mut TokenMapped = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_4.push({
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
                separator_span: Span::call_site(),
                precs: PrecDef,
                prec: None,
                dprec: None,
            }
        });
        Ok(())
    }
    fn reduce_PrecDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut IdentOrLiteral = self.__rustylr_generated_stack_14.pop().unwrap();
        self.__rustylr_generated_terminal_stack.pop();
        self.__rustylr_generated_stack_5
            .push({ PrecDPrecArgs::Prec(IdentOrLiteral) });
        Ok(())
    }
    fn reduce_PrecDef_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.pop();
        self.__rustylr_generated_stack_5.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("PrecDPrecArgs-DPrec");
            };
            PrecDPrecArgs::DPrec(literal)
        });
        Ok(())
    }
    fn reduce_TokenMapped_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_6.push({ (None, Pattern) });
        Ok(())
    }
    fn reduce_TokenMapped_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut equal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            if let Lexed::Ident(ident) = ident {
                (Some(ident), Pattern)
            } else {
                unreachable!("Token-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            TerminalSetItem::Terminal(ident)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let first = if let Lexed::Ident(first) = first {
                first
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            let last = if let Lexed::Ident(last) = last {
                last
            } else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::Range(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("TerminalSetItem-Literal");
            };
            TerminalSetItem::Literal(literal)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let Lexed::Literal(first) = first else {
                unreachable!("TerminalSetItem-Range1");
            };
            let Lexed::Literal(last) = last else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::LiteralRange(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSet_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSetItem = self.__rustylr_generated_stack_22.pop().unwrap();
        let mut caret = self.__rustylr_generated_stack_21.pop().unwrap();
        let mut lbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            let open_span = if let Lexed::LBracket(lbracket) = lbracket {
                lbracket
            } else {
                unreachable!("TerminalSet-Open");
            };
            let close_span = if let Lexed::RBracket(rbracket) = rbracket {
                rbracket
            } else {
                unreachable!("TerminalSet-Close");
            };
            TerminalSet {
                negate: caret.is_some(),
                items: TerminalSetItem,
                open_span,
                close_span,
            }
        });
        Ok(())
    }
    fn reduce_TerminalSet_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut dot = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            let span = dot.span();
            TerminalSet {
                negate: true,
                items: vec![],
                open_span: span,
                close_span: span,
            }
        });
        Ok(())
    }
    fn reduce_Pattern_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Ident(ident) = ident {
                PatternArgs::Ident(ident)
            } else {
                unreachable!("Pattern-Ident");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut plus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Plus(plus) = plus {
                PatternArgs::Plus(Box::new(Pattern), plus.span())
            } else {
                unreachable!("Pattern-Plus");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut star = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Star(star) = star {
                PatternArgs::Star(Box::new(Pattern), star.span())
            } else {
                unreachable!("Pattern-Star");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut question = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Question(question) = question {
                PatternArgs::Question(Box::new(Pattern), question.span())
            } else {
                unreachable!("Pattern-Question");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut exclamation = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Exclamation(exclamation) = exclamation {
                PatternArgs::Exclamation(Box::new(Pattern), exclamation.span())
            } else {
                unreachable!("Pattern-Exclamation");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_9
            .push({ PatternArgs::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_Pattern_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut lh = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut slash = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut p1 = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9
            .push({ PatternArgs::Lookaheads(Box::new(p1), Box::new(lh)) });
        Ok(())
    }
    fn reduce_Pattern_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rparen = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_23.pop().unwrap();
        let mut lparen = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            let open = if let Lexed::LParen(lparen) = lparen {
                lparen
            } else {
                unreachable!("Pattern-Group-Open");
            };
            let close = if let Lexed::RParen(rparen) = rparen {
                rparen
            } else {
                unreachable!("Pattern-Group-Close");
            };
            PatternArgs::Group(Pattern, open, close)
        });
        Ok(())
    }
    fn reduce_Pattern_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("Pattern-Literal");
            };
            PatternArgs::Literal(literal)
        });
        Ok(())
    }
    fn reduce_Pattern_9(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut p2 = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut p1 = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9
            .push({ PatternArgs::Minus(Box::new(p1), Box::new(p2)) });
        Ok(())
    }
    fn reduce_Action_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut bracegroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::BraceGroup(group) = bracegroup {
                Some(group)
            } else {
                unreachable!("Action0");
            }
        });
        Ok(())
    }
    fn reduce_Action_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_TokenDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut token = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_10.push({
            if let Lexed::Ident(ident) = ident {
                (ident, RustCode)
            } else {
                unreachable!("TokenDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_RustCode_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut t = self.__rustylr_generated_stack_24.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                token.append_to_stream(&mut tokens);
            }
            tokens
        });
        Ok(())
    }
    fn reduce_StartDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut start = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12.push({
            if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("StartDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_EofDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut eofdef = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (eofdef.span(), RustCode) });
        Ok(())
    }
    fn reduce_TokenTypeDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut tokentype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (tokentype.span(), RustCode) });
        Ok(())
    }
    fn reduce_UserDataDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut userdata = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (userdata.span(), RustCode) });
        Ok(())
    }
    fn reduce_IdentOrLiteral_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14.push({
            let Lexed::Ident(ident) = ident else {
                unreachable!("IdentOrLiteral-Ident");
            };
            IdentOrLiteral::Ident(ident)
        });
        Ok(())
    }
    fn reduce_IdentOrLiteral_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("IdentOrLiteral-Literal");
            };
            IdentOrLiteral::Literal(literal)
        });
        Ok(())
    }
    fn reduce_ReduceType_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut left = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_15.push({ ReduceType::Left });
        Ok(())
    }
    fn reduce_ReduceType_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut right = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_15
            .push({ ReduceType::Right });
        Ok(())
    }
    fn reduce_ReduceDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut IdentOrLiteral = self.__rustylr_generated_stack_17.pop().unwrap();
        let mut reducetype = self.__rustylr_generated_stack_15.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (reducetype, IdentOrLiteral) });
        Ok(())
    }
    fn reduce_ErrorDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut errortype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (errortype.span(), RustCode) });
        Ok(())
    }
    fn reduce_ModulePrefixDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut moduleprefix = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (moduleprefix.span(), RustCode) });
        Ok(())
    }
    fn reduce_Glr_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut glr = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_Lalr_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut lalr = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_Precedence_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut IdentOrLiteral = self.__rustylr_generated_stack_17.pop().unwrap();
        let mut precedence = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17.push({ IdentOrLiteral });
        Ok(())
    }
    fn reduce_NoOptim_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut nooptim = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_Dense_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut dense = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_Trace_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_stack_24.pop().unwrap();
        let mut trace = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_18.push({
            ident
                .into_iter()
                .map(|t| {
                    let Lexed::Ident(ident) = t else {
                        unreachable!("Trace-Ident");
                    };
                    ident
                })
                .collect()
        });
        Ok(())
    }
    fn reduce_Filter_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_terminal_stack.pop();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_terminal_stack.pop();
        self.__rustylr_generated_stack_11.push(RustCode);
        Ok(())
    }
    fn reduce_GrammarLine_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Rule = self.__rustylr_generated_stack_1.pop().unwrap();
        {
            data.rules.push(Rule);
        }
        Ok(())
    }
    fn reduce_GrammarLine_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenDef = self.__rustylr_generated_stack_10.pop().unwrap();
        {
            data.terminals.push(TokenDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut StartDef = self.__rustylr_generated_stack_12.pop().unwrap();
        {
            data.start_rule_name.push(StartDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut EofDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.eof.push(EofDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenTypeDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.token_typename.push(TokenTypeDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut UserDataDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.userdata_typename.push(UserDataDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ReduceDef = self.__rustylr_generated_stack_16.pop().unwrap();
        {
            data.precedences.push(ReduceDef.1.clone());
            data.reduce_types.push(ReduceDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ErrorDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.error_typename.push(ErrorDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ModulePrefixDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.module_prefix.push(ModulePrefixDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_9(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.lalr = true;
        }
        Ok(())
    }
    fn reduce_GrammarLine_10(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.glr = true;
        }
        Ok(())
    }
    fn reduce_GrammarLine_11(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Precedence = self.__rustylr_generated_stack_17.pop().unwrap();
        {
            data.precedences.push(Precedence);
        }
        Ok(())
    }
    fn reduce_GrammarLine_12(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.no_optim = true;
        }
        Ok(())
    }
    fn reduce_GrammarLine_13(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.dense = true;
        }
        Ok(())
    }
    fn reduce_GrammarLine_14(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Trace = self.__rustylr_generated_stack_18.pop().unwrap();
        {
            data.traces.extend(Trace);
        }
        Ok(())
    }
    fn reduce_GrammarLine_15(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Filter = self.__rustylr_generated_stack_11.pop().unwrap();
        {
            data.filter = Some(Filter);
        }
        Ok(())
    }
    fn reduce_Grammar_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__TokenMappedPlus31_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        self.__rustylr_generated_stack_19.push({ vec![A] });
        Ok(())
    }
    fn reduce__TokenMappedPlus31_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TokenMappedStar32_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({ Ap });
        Ok(())
    }
    fn reduce__TokenMappedStar32_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_19.push({ vec![] });
        Ok(())
    }
    fn reduce__PrecDefPlus33_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_20.push({ vec![A] });
        Ok(())
    }
    fn reduce__PrecDefPlus33_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_5.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_20.pop().unwrap();
        self.__rustylr_generated_stack_20.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__PrecDefStar34_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_20.pop().unwrap();
        self.__rustylr_generated_stack_20.push({ Ap });
        Ok(())
    }
    fn reduce__PrecDefStar34_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_20.push({ vec![] });
        Ok(())
    }
    fn reduce__caretQuestion35_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_21.push({ Some(A) });
        Ok(())
    }
    fn reduce__caretQuestion35_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_21.push({ None });
        Ok(())
    }
    fn reduce__TerminalSetItemPlus36_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        self.__rustylr_generated_stack_22.push({ vec![A] });
        Ok(())
    }
    fn reduce__TerminalSetItemPlus36_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_22.pop().unwrap();
        self.__rustylr_generated_stack_22.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TerminalSetItemStar37_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_22.pop().unwrap();
        self.__rustylr_generated_stack_22.push({ Ap });
        Ok(())
    }
    fn reduce__TerminalSetItemStar37_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_22.push({ vec![] });
        Ok(())
    }
    fn reduce__PatternPlus38_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_23.push({ vec![A] });
        Ok(())
    }
    fn reduce__PatternPlus38_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_23.pop().unwrap();
        self.__rustylr_generated_stack_23.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TermSet39_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_9(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_10(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_11(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_12(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_13(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_14(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_15(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_16(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_17(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_18(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_19(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_20(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_21(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_22(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_23(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_24(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_25(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_26(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_27(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_28(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_29(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_30(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_31(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_32(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_33(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_34(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_35(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_36(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet39_37(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce___TermSet39Plus40_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_24.push({ vec![A] });
        Ok(())
    }
    fn reduce___TermSet39Plus40_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_24.pop().unwrap();
        self.__rustylr_generated_stack_24.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__IdentOrLiteralPlus41_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_14.pop().unwrap();
        self.__rustylr_generated_stack_17.push({ vec![A] });
        Ok(())
    }
    fn reduce__IdentOrLiteralPlus41_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_14.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_17.pop().unwrap();
        self.__rustylr_generated_stack_17.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__identPlus42_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_24.push({ vec![A] });
        Ok(())
    }
    fn reduce__identPlus42_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_24.pop().unwrap();
        self.__rustylr_generated_stack_24.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__identStar43_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_24.pop().unwrap();
        self.__rustylr_generated_stack_24.push({ Ap });
        Ok(())
    }
    fn reduce__identStar43_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_24.push({ vec![] });
        Ok(())
    }
    fn reduce__GrammarLinePlus44_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__GrammarLinePlus44_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce_Augmented_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_terminal_stack.pop();
        Ok(())
    }
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types,
    dead_code
)]
impl ::rusty_lr_core::lr::Stack for GrammarStack {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type ReduceActionError = ::rusty_lr_core::DefaultReduceActionError;
    type UserData = GrammarArgs;
    type StartType = ();
    fn new() -> Self {
        Self {
            __rustylr_generated_terminal_stack: Vec::new(),
            __rustylr_generated_stack_1: Vec::new(),
            __rustylr_generated_stack_2: Vec::new(),
            __rustylr_generated_stack_3: Vec::new(),
            __rustylr_generated_stack_4: Vec::new(),
            __rustylr_generated_stack_5: Vec::new(),
            __rustylr_generated_stack_6: Vec::new(),
            __rustylr_generated_stack_7: Vec::new(),
            __rustylr_generated_stack_8: Vec::new(),
            __rustylr_generated_stack_9: Vec::new(),
            __rustylr_generated_stack_10: Vec::new(),
            __rustylr_generated_stack_11: Vec::new(),
            __rustylr_generated_stack_12: Vec::new(),
            __rustylr_generated_stack_13: Vec::new(),
            __rustylr_generated_stack_14: Vec::new(),
            __rustylr_generated_stack_15: Vec::new(),
            __rustylr_generated_stack_16: Vec::new(),
            __rustylr_generated_stack_17: Vec::new(),
            __rustylr_generated_stack_18: Vec::new(),
            __rustylr_generated_stack_19: Vec::new(),
            __rustylr_generated_stack_20: Vec::new(),
            __rustylr_generated_stack_21: Vec::new(),
            __rustylr_generated_stack_22: Vec::new(),
            __rustylr_generated_stack_23: Vec::new(),
            __rustylr_generated_stack_24: Vec::new(),
        }
    }
    fn push(&mut self, term: Self::Term) {
        self.__rustylr_generated_terminal_stack.push(term);
    }
    fn reduce(
        &mut self,
        rustylr_macro_generated_ruleid__: usize,
        user_data: &mut Self::UserData,
        lookahead: &Self::Term,
    ) -> Result<(), Self::ReduceActionError> {
        match rustylr_macro_generated_ruleid__ {
            0usize => self.reduce_Rule_0(lookahead, user_data),
            1usize => self.reduce_RuleType_0(lookahead, user_data),
            2usize => self.reduce_RuleType_1(lookahead, user_data),
            3usize => self.reduce_RuleLines_0(lookahead, user_data),
            4usize => self.reduce_RuleLines_1(lookahead, user_data),
            5usize => self.reduce_RuleLine_0(lookahead, user_data),
            6usize => self.reduce_PrecDef_0(lookahead, user_data),
            7usize => self.reduce_PrecDef_1(lookahead, user_data),
            8usize => self.reduce_TokenMapped_0(lookahead, user_data),
            9usize => self.reduce_TokenMapped_1(lookahead, user_data),
            10usize => self.reduce_TerminalSetItem_0(lookahead, user_data),
            11usize => self.reduce_TerminalSetItem_1(lookahead, user_data),
            12usize => self.reduce_TerminalSetItem_2(lookahead, user_data),
            13usize => self.reduce_TerminalSetItem_3(lookahead, user_data),
            14usize => self.reduce_TerminalSet_0(lookahead, user_data),
            15usize => self.reduce_TerminalSet_1(lookahead, user_data),
            16usize => self.reduce_Pattern_0(lookahead, user_data),
            17usize => self.reduce_Pattern_1(lookahead, user_data),
            18usize => self.reduce_Pattern_2(lookahead, user_data),
            19usize => self.reduce_Pattern_3(lookahead, user_data),
            20usize => self.reduce_Pattern_4(lookahead, user_data),
            21usize => self.reduce_Pattern_5(lookahead, user_data),
            22usize => self.reduce_Pattern_6(lookahead, user_data),
            23usize => self.reduce_Pattern_7(lookahead, user_data),
            24usize => self.reduce_Pattern_8(lookahead, user_data),
            25usize => self.reduce_Pattern_9(lookahead, user_data),
            26usize => self.reduce_Action_0(lookahead, user_data),
            27usize => self.reduce_Action_1(lookahead, user_data),
            28usize => self.reduce_TokenDef_0(lookahead, user_data),
            29usize => self.reduce_RustCode_0(lookahead, user_data),
            30usize => self.reduce_StartDef_0(lookahead, user_data),
            31usize => self.reduce_EofDef_0(lookahead, user_data),
            32usize => self.reduce_TokenTypeDef_0(lookahead, user_data),
            33usize => self.reduce_UserDataDef_0(lookahead, user_data),
            34usize => self.reduce_IdentOrLiteral_0(lookahead, user_data),
            35usize => self.reduce_IdentOrLiteral_1(lookahead, user_data),
            36usize => self.reduce_ReduceType_0(lookahead, user_data),
            37usize => self.reduce_ReduceType_1(lookahead, user_data),
            38usize => self.reduce_ReduceDef_0(lookahead, user_data),
            39usize => self.reduce_ErrorDef_0(lookahead, user_data),
            40usize => self.reduce_ModulePrefixDef_0(lookahead, user_data),
            41usize => self.reduce_Glr_0(lookahead, user_data),
            42usize => self.reduce_Lalr_0(lookahead, user_data),
            43usize => self.reduce_Precedence_0(lookahead, user_data),
            44usize => self.reduce_NoOptim_0(lookahead, user_data),
            45usize => self.reduce_Dense_0(lookahead, user_data),
            46usize => self.reduce_Trace_0(lookahead, user_data),
            47usize => self.reduce_Filter_0(lookahead, user_data),
            48usize => self.reduce_GrammarLine_0(lookahead, user_data),
            49usize => self.reduce_GrammarLine_1(lookahead, user_data),
            50usize => self.reduce_GrammarLine_2(lookahead, user_data),
            51usize => self.reduce_GrammarLine_3(lookahead, user_data),
            52usize => self.reduce_GrammarLine_4(lookahead, user_data),
            53usize => self.reduce_GrammarLine_5(lookahead, user_data),
            54usize => self.reduce_GrammarLine_6(lookahead, user_data),
            55usize => self.reduce_GrammarLine_7(lookahead, user_data),
            56usize => self.reduce_GrammarLine_8(lookahead, user_data),
            57usize => self.reduce_GrammarLine_9(lookahead, user_data),
            58usize => self.reduce_GrammarLine_10(lookahead, user_data),
            59usize => self.reduce_GrammarLine_11(lookahead, user_data),
            60usize => self.reduce_GrammarLine_12(lookahead, user_data),
            61usize => self.reduce_GrammarLine_13(lookahead, user_data),
            62usize => self.reduce_GrammarLine_14(lookahead, user_data),
            63usize => self.reduce_GrammarLine_15(lookahead, user_data),
            64usize => self.reduce_Grammar_0(lookahead, user_data),
            65usize => self.reduce__TokenMappedPlus31_0(lookahead, user_data),
            66usize => self.reduce__TokenMappedPlus31_1(lookahead, user_data),
            67usize => self.reduce__TokenMappedStar32_0(lookahead, user_data),
            68usize => self.reduce__TokenMappedStar32_1(lookahead, user_data),
            69usize => self.reduce__PrecDefPlus33_0(lookahead, user_data),
            70usize => self.reduce__PrecDefPlus33_1(lookahead, user_data),
            71usize => self.reduce__PrecDefStar34_0(lookahead, user_data),
            72usize => self.reduce__PrecDefStar34_1(lookahead, user_data),
            73usize => self.reduce__caretQuestion35_0(lookahead, user_data),
            74usize => self.reduce__caretQuestion35_1(lookahead, user_data),
            75usize => self.reduce__TerminalSetItemPlus36_0(lookahead, user_data),
            76usize => self.reduce__TerminalSetItemPlus36_1(lookahead, user_data),
            77usize => self.reduce__TerminalSetItemStar37_0(lookahead, user_data),
            78usize => self.reduce__TerminalSetItemStar37_1(lookahead, user_data),
            79usize => self.reduce__PatternPlus38_0(lookahead, user_data),
            80usize => self.reduce__PatternPlus38_1(lookahead, user_data),
            81usize => self.reduce__TermSet39_0(lookahead, user_data),
            82usize => self.reduce__TermSet39_1(lookahead, user_data),
            83usize => self.reduce__TermSet39_2(lookahead, user_data),
            84usize => self.reduce__TermSet39_3(lookahead, user_data),
            85usize => self.reduce__TermSet39_4(lookahead, user_data),
            86usize => self.reduce__TermSet39_5(lookahead, user_data),
            87usize => self.reduce__TermSet39_6(lookahead, user_data),
            88usize => self.reduce__TermSet39_7(lookahead, user_data),
            89usize => self.reduce__TermSet39_8(lookahead, user_data),
            90usize => self.reduce__TermSet39_9(lookahead, user_data),
            91usize => self.reduce__TermSet39_10(lookahead, user_data),
            92usize => self.reduce__TermSet39_11(lookahead, user_data),
            93usize => self.reduce__TermSet39_12(lookahead, user_data),
            94usize => self.reduce__TermSet39_13(lookahead, user_data),
            95usize => self.reduce__TermSet39_14(lookahead, user_data),
            96usize => self.reduce__TermSet39_15(lookahead, user_data),
            97usize => self.reduce__TermSet39_16(lookahead, user_data),
            98usize => self.reduce__TermSet39_17(lookahead, user_data),
            99usize => self.reduce__TermSet39_18(lookahead, user_data),
            100usize => self.reduce__TermSet39_19(lookahead, user_data),
            101usize => self.reduce__TermSet39_20(lookahead, user_data),
            102usize => self.reduce__TermSet39_21(lookahead, user_data),
            103usize => self.reduce__TermSet39_22(lookahead, user_data),
            104usize => self.reduce__TermSet39_23(lookahead, user_data),
            105usize => self.reduce__TermSet39_24(lookahead, user_data),
            106usize => self.reduce__TermSet39_25(lookahead, user_data),
            107usize => self.reduce__TermSet39_26(lookahead, user_data),
            108usize => self.reduce__TermSet39_27(lookahead, user_data),
            109usize => self.reduce__TermSet39_28(lookahead, user_data),
            110usize => self.reduce__TermSet39_29(lookahead, user_data),
            111usize => self.reduce__TermSet39_30(lookahead, user_data),
            112usize => self.reduce__TermSet39_31(lookahead, user_data),
            113usize => self.reduce__TermSet39_32(lookahead, user_data),
            114usize => self.reduce__TermSet39_33(lookahead, user_data),
            115usize => self.reduce__TermSet39_34(lookahead, user_data),
            116usize => self.reduce__TermSet39_35(lookahead, user_data),
            117usize => self.reduce__TermSet39_36(lookahead, user_data),
            118usize => self.reduce__TermSet39_37(lookahead, user_data),
            119usize => self.reduce___TermSet39Plus40_0(lookahead, user_data),
            120usize => self.reduce___TermSet39Plus40_1(lookahead, user_data),
            121usize => self.reduce__IdentOrLiteralPlus41_0(lookahead, user_data),
            122usize => self.reduce__IdentOrLiteralPlus41_1(lookahead, user_data),
            123usize => self.reduce__identPlus42_0(lookahead, user_data),
            124usize => self.reduce__identPlus42_1(lookahead, user_data),
            125usize => self.reduce__identStar43_0(lookahead, user_data),
            126usize => self.reduce__identStar43_1(lookahead, user_data),
            127usize => self.reduce__GrammarLinePlus44_0(lookahead, user_data),
            128usize => self.reduce__GrammarLinePlus44_1(lookahead, user_data),
            129usize => self.reduce_Augmented_0(lookahead, user_data),
            _ => {
                unreachable!("Invalid Rule: {}", rustylr_macro_generated_ruleid__);
            }
        }
    }
    #[allow(clippy::unused_unit)]
    fn pop_start(&mut self) -> Self::StartType {
        ()
    }
    fn pop(&mut self, nonterm: Self::NonTerm) {
        match nonterm {
            GrammarNonTerminals::Rule => {
                self.__rustylr_generated_stack_1.pop();
            }
            GrammarNonTerminals::RuleType => {
                self.__rustylr_generated_stack_2.pop();
            }
            GrammarNonTerminals::RuleLines => {
                self.__rustylr_generated_stack_3.pop();
            }
            GrammarNonTerminals::RuleLine => {
                self.__rustylr_generated_stack_4.pop();
            }
            GrammarNonTerminals::PrecDef => {
                self.__rustylr_generated_stack_5.pop();
            }
            GrammarNonTerminals::TokenMapped => {
                self.__rustylr_generated_stack_6.pop();
            }
            GrammarNonTerminals::TerminalSetItem => {
                self.__rustylr_generated_stack_7.pop();
            }
            GrammarNonTerminals::TerminalSet => {
                self.__rustylr_generated_stack_8.pop();
            }
            GrammarNonTerminals::Pattern => {
                self.__rustylr_generated_stack_9.pop();
            }
            GrammarNonTerminals::Action => {
                self.__rustylr_generated_stack_2.pop();
            }
            GrammarNonTerminals::TokenDef => {
                self.__rustylr_generated_stack_10.pop();
            }
            GrammarNonTerminals::RustCode => {
                self.__rustylr_generated_stack_11.pop();
            }
            GrammarNonTerminals::StartDef => {
                self.__rustylr_generated_stack_12.pop();
            }
            GrammarNonTerminals::EofDef => {
                self.__rustylr_generated_stack_13.pop();
            }
            GrammarNonTerminals::TokenTypeDef => {
                self.__rustylr_generated_stack_13.pop();
            }
            GrammarNonTerminals::UserDataDef => {
                self.__rustylr_generated_stack_13.pop();
            }
            GrammarNonTerminals::IdentOrLiteral => {
                self.__rustylr_generated_stack_14.pop();
            }
            GrammarNonTerminals::ReduceType => {
                self.__rustylr_generated_stack_15.pop();
            }
            GrammarNonTerminals::ReduceDef => {
                self.__rustylr_generated_stack_16.pop();
            }
            GrammarNonTerminals::ErrorDef => {
                self.__rustylr_generated_stack_13.pop();
            }
            GrammarNonTerminals::ModulePrefixDef => {
                self.__rustylr_generated_stack_13.pop();
            }
            GrammarNonTerminals::Precedence => {
                self.__rustylr_generated_stack_17.pop();
            }
            GrammarNonTerminals::Trace => {
                self.__rustylr_generated_stack_18.pop();
            }
            GrammarNonTerminals::Filter => {
                self.__rustylr_generated_stack_11.pop();
            }
            GrammarNonTerminals::_TokenMappedPlus31 => {
                self.__rustylr_generated_stack_19.pop();
            }
            GrammarNonTerminals::_TokenMappedStar32 => {
                self.__rustylr_generated_stack_19.pop();
            }
            GrammarNonTerminals::_PrecDefPlus33 => {
                self.__rustylr_generated_stack_20.pop();
            }
            GrammarNonTerminals::_PrecDefStar34 => {
                self.__rustylr_generated_stack_20.pop();
            }
            GrammarNonTerminals::_caretQuestion35 => {
                self.__rustylr_generated_stack_21.pop();
            }
            GrammarNonTerminals::_TerminalSetItemPlus36 => {
                self.__rustylr_generated_stack_22.pop();
            }
            GrammarNonTerminals::_TerminalSetItemStar37 => {
                self.__rustylr_generated_stack_22.pop();
            }
            GrammarNonTerminals::_PatternPlus38 => {
                self.__rustylr_generated_stack_23.pop();
            }
            GrammarNonTerminals::_TermSet39 => {
                self.__rustylr_generated_terminal_stack.pop();
            }
            GrammarNonTerminals::__TermSet39Plus40 => {
                self.__rustylr_generated_stack_24.pop();
            }
            GrammarNonTerminals::_IdentOrLiteralPlus41 => {
                self.__rustylr_generated_stack_17.pop();
            }
            GrammarNonTerminals::_identPlus42 => {
                self.__rustylr_generated_stack_24.pop();
            }
            GrammarNonTerminals::_identStar43 => {
                self.__rustylr_generated_stack_24.pop();
            }
            _ => {}
        }
    }
    fn pop_term(&mut self) {
        self.__rustylr_generated_terminal_stack.pop();
    }
}
#[doc = r" A struct that holds the entire parser table and production rules."]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarParser {
    #[doc = r" production rules"]
    pub rules: Vec<GrammarRule>,
    #[doc = r" states"]
    pub states: Vec<GrammarState>,
    #[doc = r" terminal classes"]
    pub classes: Vec<Vec<&'static str>>,
}
impl ::rusty_lr_core::lr::Parser for GrammarParser {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type State = GrammarState;
    type TerminalClassElement = &'static str;
    fn get_rules(&self) -> &[GrammarRule] {
        &self.rules
    }
    fn get_states(&self) -> &[GrammarState] {
        &self.states
    }
    fn get_terminals(
        &self,
        i: usize,
    ) -> Option<impl IntoIterator<Item = Self::TerminalClassElement> + '_> {
        self.classes.get(i).map(|class| class.iter().copied())
    }
    fn to_terminal_class(&self, terminal: &Self::Term) -> usize {
        #[allow(unreachable_patterns)]
        match terminal {
            Lexed::Ident(_) => 0usize,
            Lexed::Colon(_) => 2usize,
            Lexed::Semicolon(_) => 38usize,
            Lexed::Pipe(_) => 3usize,
            Lexed::Equal(_) => 4usize,
            Lexed::Plus(_) => 5usize,
            Lexed::Star(_) => 6usize,
            Lexed::Question(_) => 7usize,
            Lexed::Caret(_) => 9usize,
            Lexed::Minus(_) => 10usize,
            Lexed::Exclamation(_) => 8usize,
            Lexed::Slash(_) => 11usize,
            Lexed::Dot(_) => 12usize,
            Lexed::Literal(_) => 13usize,
            Lexed::ParenGroup(_) => 14usize,
            Lexed::BraceGroup(_) => 15usize,
            Lexed::LParen(_) => 16usize,
            Lexed::RParen(_) => 17usize,
            Lexed::LBracket(_) => 18usize,
            Lexed::RBracket(_) => 19usize,
            Lexed::Left(_, _) => 20usize,
            Lexed::Right(_, _) => 21usize,
            Lexed::Token(_, _) => 22usize,
            Lexed::Start(_, _) => 23usize,
            Lexed::EofDef(_, _) => 24usize,
            Lexed::TokenType(_, _) => 25usize,
            Lexed::UserData(_, _) => 26usize,
            Lexed::ErrorType(_, _) => 27usize,
            Lexed::ModulePrefix(_, _) => 28usize,
            Lexed::Lalr(_, _) => 29usize,
            Lexed::Glr(_, _) => 30usize,
            Lexed::Prec(_, _) => 31usize,
            Lexed::Precedence(_, _) => 32usize,
            Lexed::NoOptim(_, _) => 33usize,
            Lexed::Dense(_, _) => 34usize,
            Lexed::Trace(_, _) => 35usize,
            Lexed::DPrec(_, _) => 36usize,
            Lexed::Filter(_, _) => 37usize,
            Lexed::Eof => 39usize,
            _ => 1usize,
        }
    }
    fn get_error_nonterm(&self) -> Option<Self::NonTerm> {
        None
    }
}
#[doc = r" A struct that holds the whole parser table."]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarParser {
    #[doc = r" Calculates the states and parser tables from the grammar."]
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let mut builder = ::rusty_lr_core::builder::Grammar::new();
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(11usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(7usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(5usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(10usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(6usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(8usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(11usize), 1usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(7usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(5usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(10usize), 0usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(8usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(6usize), 2usize);
        builder.add_rule(
            GrammarNonTerminals::Rule,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
                ::rusty_lr_core::Token::Term(2usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::RuleType,
            vec![::rusty_lr_core::Token::Term(14usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(GrammarNonTerminals::RuleType, vec![], None, None, 0usize);
        builder.add_rule(
            GrammarNonTerminals::RuleLines,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(3usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::RuleLines,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::RuleLine,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::RuleLine,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedStar32),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PrecDefStar34),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::PrecDef,
            vec![
                ::rusty_lr_core::Token::Term(31usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::PrecDef,
            vec![
                ::rusty_lr_core::Token::Term(36usize),
                ::rusty_lr_core::Token::Term(13usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TokenMapped,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TokenMapped,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(4usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(10usize),
                ::rusty_lr_core::Token::Term(0usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![
                ::rusty_lr_core::Token::Term(13usize),
                ::rusty_lr_core::Token::Term(10usize),
                ::rusty_lr_core::Token::Term(13usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSet,
            vec![
                ::rusty_lr_core::Token::Term(18usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_caretQuestion35),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemStar37),
                ::rusty_lr_core::Token::Term(19usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSet,
            vec![::rusty_lr_core::Token::Term(12usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(5usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(5usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(6usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(6usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(7usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(7usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(8usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(8usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(11usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(11usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::Term(16usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternPlus38),
                ::rusty_lr_core::Token::Term(17usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(10usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Action,
            vec![::rusty_lr_core::Token::Term(15usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(GrammarNonTerminals::Action, vec![], None, None, 0usize);
        builder.add_rule(
            GrammarNonTerminals::TokenDef,
            vec![
                ::rusty_lr_core::Token::Term(22usize),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::RustCode,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::__TermSet39Plus40,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::StartDef,
            vec![
                ::rusty_lr_core::Token::Term(23usize),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::EofDef,
            vec![
                ::rusty_lr_core::Token::Term(24usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TokenTypeDef,
            vec![
                ::rusty_lr_core::Token::Term(25usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::UserDataDef,
            vec![
                ::rusty_lr_core::Token::Term(26usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::IdentOrLiteral,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::IdentOrLiteral,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceType,
            vec![::rusty_lr_core::Token::Term(20usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceType,
            vec![::rusty_lr_core::Token::Term(21usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceDef,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus41),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ErrorDef,
            vec![
                ::rusty_lr_core::Token::Term(27usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ModulePrefixDef,
            vec![
                ::rusty_lr_core::Token::Term(28usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Glr,
            vec![
                ::rusty_lr_core::Token::Term(30usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Lalr,
            vec![
                ::rusty_lr_core::Token::Term(29usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Precedence,
            vec![
                ::rusty_lr_core::Token::Term(32usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus41),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::NoOptim,
            vec![
                ::rusty_lr_core::Token::Term(33usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Dense,
            vec![
                ::rusty_lr_core::Token::Term(34usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Trace,
            vec![
                ::rusty_lr_core::Token::Term(35usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_identStar43),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Filter,
            vec![
                ::rusty_lr_core::Token::Term(37usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::StartDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenTypeDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::UserDataDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ReduceDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ErrorDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ModulePrefixDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Lalr)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Glr)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Precedence,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::NoOptim,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Dense)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Trace)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Filter)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Grammar,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_GrammarLinePlus44,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedPlus31,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenMapped,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedPlus31,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedPlus31),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedStar32,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TokenMappedPlus31,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedStar32,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PrecDefPlus33,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::PrecDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PrecDefPlus33,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PrecDefPlus33),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::PrecDef),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PrecDefStar34,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_PrecDefPlus33,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PrecDefStar34,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_caretQuestion35,
            vec![::rusty_lr_core::Token::Term(9usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_caretQuestion35,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemPlus36,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSetItem,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemPlus36,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemPlus36),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemStar37,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TerminalSetItemPlus36,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemStar37,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PatternPlus38,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PatternPlus38,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternPlus38),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(2usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(3usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(1usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(4usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(5usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(5usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(6usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(6usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(7usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(7usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(9usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(10usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(8usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(8usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(11usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(11usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(12usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(14usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(15usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(16usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(17usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(18usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(19usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(20usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(21usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(22usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(23usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(24usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(25usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(26usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(27usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(28usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(29usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(30usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(31usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(32usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(33usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(34usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(35usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(36usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(37usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::__TermSet39Plus40,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TermSet39,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::__TermSet39Plus40,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__TermSet39Plus40),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TermSet39),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_IdentOrLiteralPlus41,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::IdentOrLiteral,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_IdentOrLiteralPlus41,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus41),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_identPlus42,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_identPlus42,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_identPlus42),
                ::rusty_lr_core::Token::Term(0usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_identStar43,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_identPlus42,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_identStar43,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_GrammarLinePlus44,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::GrammarLine,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_GrammarLinePlus44,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::GrammarLine),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_GrammarLinePlus44),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Augmented,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                ::rusty_lr_core::Token::Term(39usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_empty_rule(GrammarNonTerminals::error);
        let Ok(states) = builder.build(
            GrammarNonTerminals::Augmented,
            &mut ::rusty_lr_core::builder::DiagnosticCollector::new(false),
        ) else {
            unreachable!("Failed to build LR parser")
        };
        let states = states.states;
        let terminal_class_names = vec![
            "ident",
            "[percent, <Others>] (2 terms)",
            "colon",
            "pipe",
            "equal",
            "plus",
            "star",
            "question",
            "exclamation",
            "caret",
            "minus",
            "slash",
            "dot",
            "literal",
            "parengroup",
            "bracegroup",
            "lparen",
            "rparen",
            "lbracket",
            "rbracket",
            "left",
            "right",
            "token",
            "start",
            "eofdef",
            "tokentype",
            "userdata",
            "errortype",
            "moduleprefix",
            "lalr",
            "glr",
            "prec",
            "precedence",
            "nooptim",
            "dense",
            "trace",
            "dprec",
            "filter",
            "semicolon",
            "eof",
        ];
        let rules = builder
            .rules
            .into_iter()
            .map(move |rule| {
                rule.rule
                    .map(|term| terminal_class_names[term], |nonterm| nonterm)
            })
            .collect();
        let states: Vec<_> = states
            .into_iter()
            .map(|state| state.into_lr_sparse_state(|x| x, |x| x))
            .collect();
        let terminal_classes = vec![
            vec!["ident"],
            vec![],
            vec!["colon"],
            vec!["pipe"],
            vec!["equal"],
            vec!["plus"],
            vec!["star"],
            vec!["question"],
            vec!["exclamation"],
            vec!["caret"],
            vec!["minus"],
            vec!["slash"],
            vec!["dot"],
            vec!["literal"],
            vec!["parengroup"],
            vec!["bracegroup"],
            vec!["lparen"],
            vec!["rparen"],
            vec!["lbracket"],
            vec!["rbracket"],
            vec!["left"],
            vec!["right"],
            vec!["token"],
            vec!["start"],
            vec!["eofdef"],
            vec!["tokentype"],
            vec!["userdata"],
            vec!["errortype"],
            vec!["moduleprefix"],
            vec!["lalr"],
            vec!["glr"],
            vec!["prec"],
            vec!["precedence"],
            vec!["nooptim"],
            vec!["dense"],
            vec!["trace"],
            vec!["dprec"],
            vec!["filter"],
            vec!["semicolon"],
            vec!["eof"],
        ];
        Self {
            rules,
            states,
            classes: terminal_classes,
        }
    }
}
// ==============================Generated Codes End===============================
