// This file was generated by rustylr 0.8.0
//
// Input file: ../rusty_lr_parser/src/parser/parser.rs
// Output file: parser_expanded.rs
// ================================User Codes Begin================================
use crate::parser::args::GrammarArgs;
use crate::parser::args::PatternArgs;
use crate::parser::args::ReduceTypeArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::lexer::Lexed;
use crate::terminalset::TerminalSet;
use crate::terminalset::TerminalSetItem;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Punct;
use proc_macro2::Spacing;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use rusty_lr_core::ReduceType;
use std::boxed::Box;
macro_rules ! punct (($ l : literal) => { Punct :: new ($ l , Spacing :: Alone) } ;) ;
// =================================User Codes End=================================
/*
====================================Grammar=====================================
Rule -> ident RuleType colon RuleLines semicolon
RuleType -> parengroup
RuleType ->
RuleLines -> RuleLines pipe RuleLine
RuleLines -> RuleLine
RuleLine -> _RustyLRGenerated0 Action
_RustyLRGenerated1 -> TokenMapped
_RustyLRGenerated1 -> _RustyLRGenerated1 TokenMapped
_RustyLRGenerated0 -> _RustyLRGenerated1
_RustyLRGenerated0 ->
TokenMapped -> Pattern
TokenMapped -> ident equal Pattern
TerminalSetItem -> ident
TerminalSetItem -> ident minus ident
TerminalSet -> lbracket _RustyLRGenerated2 _RustyLRGenerated3 rbracket
_RustyLRGenerated2 -> caret
_RustyLRGenerated2 ->
_RustyLRGenerated4 -> TerminalSetItem
_RustyLRGenerated4 -> _RustyLRGenerated4 TerminalSetItem
_RustyLRGenerated3 -> _RustyLRGenerated4
_RustyLRGenerated3 ->
Pattern -> ident
Pattern -> Pattern plus
Pattern -> Pattern star
Pattern -> Pattern question
Pattern -> Pattern exclamation
Pattern -> TerminalSet
Action -> bracegroup
Action ->
TokenDef -> token ident RustCode semicolon
RustCode -> _RustyLRGenerated5
_RustyLRGenerated6 -> bracegroup
_RustyLRGenerated6 -> bracketgroup
_RustyLRGenerated6 -> caret
_RustyLRGenerated6 -> colon
_RustyLRGenerated6 -> equal
_RustyLRGenerated6 -> exclamation
_RustyLRGenerated6 -> ident
_RustyLRGenerated6 -> literal
_RustyLRGenerated6 -> minus
_RustyLRGenerated6 -> nonegroup
_RustyLRGenerated6 -> otherpunct
_RustyLRGenerated6 -> parengroup
_RustyLRGenerated6 -> percent
_RustyLRGenerated6 -> pipe
_RustyLRGenerated6 -> plus
_RustyLRGenerated6 -> question
_RustyLRGenerated6 -> star
_RustyLRGenerated5 -> _RustyLRGenerated6
_RustyLRGenerated5 -> _RustyLRGenerated5 _RustyLRGenerated6
StartDef -> start ident semicolon
EofDef -> eofdef RustCode semicolon
TokenTypeDef -> tokentype RustCode semicolon
UserDataDef -> userdata RustCode semicolon
ReduceType -> left
ReduceType -> right
ReduceDef -> ReduceType ident semicolon
ReduceDef -> ReduceType TerminalSet semicolon
ErrorDef -> errortype RustCode semicolon
ModulePrefixDef -> moduleprefix RustCode semicolon
DeriveDef -> derive RustCode semicolon
GrammarLine -> Rule
GrammarLine -> TokenDef
GrammarLine -> StartDef
GrammarLine -> EofDef
GrammarLine -> TokenTypeDef
GrammarLine -> UserDataDef
GrammarLine -> ReduceDef
GrammarLine -> ErrorDef
GrammarLine -> ModulePrefixDef
GrammarLine -> DeriveDef
Grammar -> _RustyLRGenerated7
_RustyLRGenerated7 -> GrammarLine
_RustyLRGenerated7 -> GrammarLine _RustyLRGenerated7
Augmented -> Grammar eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarRule = ::rusty_lr_core::ProductionRule<Lexed, GrammarNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarState = ::rusty_lr_core::State<Lexed, GrammarNonTerminals>;
#[doc = r" type alias for `ParseError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarParseError =
    ::rusty_lr_core::ParseError<Lexed, ::rusty_lr_core::DefaultReduceActionError>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarInvalidTerminalError = ::rusty_lr_core::InvalidTerminalError<Lexed>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types)]
#[derive(
    Debug,
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum GrammarNonTerminals {
    Rule,
    RuleType,
    RuleLines,
    RuleLine,
    _RustyLRGenerated1,
    _RustyLRGenerated0,
    TokenMapped,
    TerminalSetItem,
    TerminalSet,
    _RustyLRGenerated2,
    _RustyLRGenerated4,
    _RustyLRGenerated3,
    Pattern,
    Action,
    TokenDef,
    RustCode,
    _RustyLRGenerated6,
    _RustyLRGenerated5,
    StartDef,
    EofDef,
    TokenTypeDef,
    UserDataDef,
    ReduceType,
    ReduceDef,
    ErrorDef,
    ModulePrefixDef,
    DeriveDef,
    GrammarLine,
    Grammar,
    _RustyLRGenerated7,
    Augmented,
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrammarNonTerminals::Rule => write!(f, "Rule"),
            GrammarNonTerminals::RuleType => write!(f, "RuleType"),
            GrammarNonTerminals::RuleLines => write!(f, "RuleLines"),
            GrammarNonTerminals::RuleLine => write!(f, "RuleLine"),
            GrammarNonTerminals::_RustyLRGenerated1 => write!(f, "_RustyLRGenerated1"),
            GrammarNonTerminals::_RustyLRGenerated0 => write!(f, "_RustyLRGenerated0"),
            GrammarNonTerminals::TokenMapped => write!(f, "TokenMapped"),
            GrammarNonTerminals::TerminalSetItem => write!(f, "TerminalSetItem"),
            GrammarNonTerminals::TerminalSet => write!(f, "TerminalSet"),
            GrammarNonTerminals::_RustyLRGenerated2 => write!(f, "_RustyLRGenerated2"),
            GrammarNonTerminals::_RustyLRGenerated4 => write!(f, "_RustyLRGenerated4"),
            GrammarNonTerminals::_RustyLRGenerated3 => write!(f, "_RustyLRGenerated3"),
            GrammarNonTerminals::Pattern => write!(f, "Pattern"),
            GrammarNonTerminals::Action => write!(f, "Action"),
            GrammarNonTerminals::TokenDef => write!(f, "TokenDef"),
            GrammarNonTerminals::RustCode => write!(f, "RustCode"),
            GrammarNonTerminals::_RustyLRGenerated6 => write!(f, "_RustyLRGenerated6"),
            GrammarNonTerminals::_RustyLRGenerated5 => write!(f, "_RustyLRGenerated5"),
            GrammarNonTerminals::StartDef => write!(f, "StartDef"),
            GrammarNonTerminals::EofDef => write!(f, "EofDef"),
            GrammarNonTerminals::TokenTypeDef => write!(f, "TokenTypeDef"),
            GrammarNonTerminals::UserDataDef => write!(f, "UserDataDef"),
            GrammarNonTerminals::ReduceType => write!(f, "ReduceType"),
            GrammarNonTerminals::ReduceDef => write!(f, "ReduceDef"),
            GrammarNonTerminals::ErrorDef => write!(f, "ErrorDef"),
            GrammarNonTerminals::ModulePrefixDef => write!(f, "ModulePrefixDef"),
            GrammarNonTerminals::DeriveDef => write!(f, "DeriveDef"),
            GrammarNonTerminals::GrammarLine => write!(f, "GrammarLine"),
            GrammarNonTerminals::Grammar => write!(f, "Grammar"),
            GrammarNonTerminals::_RustyLRGenerated7 => write!(f, "_RustyLRGenerated7"),
            GrammarNonTerminals::Augmented => write!(f, "Augmented"),
        }
    }
}
#[doc = r" struct that holds internal parser data,"]
#[doc = r" including data stack for each non-terminal,"]
#[doc = r" and state stack for DFA"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarContext {
    #[doc = r" state stack, user must not modify this"]
    pub state_stack: Vec<usize>,
    __rustylr_generated_terminal_stack: Vec<Lexed>,
    __rustylr_generated_stack_1: Vec<RuleDefArgs>,
    __rustylr_generated_stack_2: Vec<Option<Group>>,
    __rustylr_generated_stack_3: Vec<Vec<RuleLineArgs>>,
    __rustylr_generated_stack_4: Vec<RuleLineArgs>,
    __rustylr_generated_stack_5: Vec<Vec<(Option<Ident>, PatternArgs)>>,
    __rustylr_generated_stack_6: Vec<(Option<Ident>, PatternArgs)>,
    __rustylr_generated_stack_7: Vec<TerminalSetItem>,
    __rustylr_generated_stack_8: Vec<TerminalSet>,
    __rustylr_generated_stack_9: Vec<Option<Lexed>>,
    __rustylr_generated_stack_10: Vec<Vec<TerminalSetItem>>,
    __rustylr_generated_stack_11: Vec<PatternArgs>,
    __rustylr_generated_stack_12: Vec<(Ident, TokenStream)>,
    __rustylr_generated_stack_13: Vec<TokenStream>,
    __rustylr_generated_stack_14: Vec<Vec<Lexed>>,
    __rustylr_generated_stack_15: Vec<Ident>,
    __rustylr_generated_stack_16: Vec<(Span, TokenStream)>,
    __rustylr_generated_stack_17: Vec<ReduceType>,
    __rustylr_generated_stack_18: Vec<(ReduceTypeArgs, ReduceType)>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl GrammarContext {
    pub fn new() -> Self {
        Self {
            state_stack: vec![0],
            __rustylr_generated_terminal_stack: Vec::new(),
            __rustylr_generated_stack_1: Vec::new(),
            __rustylr_generated_stack_2: Vec::new(),
            __rustylr_generated_stack_3: Vec::new(),
            __rustylr_generated_stack_4: Vec::new(),
            __rustylr_generated_stack_5: Vec::new(),
            __rustylr_generated_stack_6: Vec::new(),
            __rustylr_generated_stack_7: Vec::new(),
            __rustylr_generated_stack_8: Vec::new(),
            __rustylr_generated_stack_9: Vec::new(),
            __rustylr_generated_stack_10: Vec::new(),
            __rustylr_generated_stack_11: Vec::new(),
            __rustylr_generated_stack_12: Vec::new(),
            __rustylr_generated_stack_13: Vec::new(),
            __rustylr_generated_stack_14: Vec::new(),
            __rustylr_generated_stack_15: Vec::new(),
            __rustylr_generated_stack_16: Vec::new(),
            __rustylr_generated_stack_17: Vec::new(),
            __rustylr_generated_stack_18: Vec::new(),
        }
    }
    fn reduce_Rule_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        let mut colon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleType = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_1.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("Rule-Ident");
            };
            if let Lexed::Colon(colon) = colon {
                let span = colon.span();
                if let Some(fisrt) = RuleLines.first_mut() {
                    fisrt.separator_span = span;
                }
            } else {
                unreachable!("Rule-Colon2");
            }
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.stream()),
                rule_lines: RuleLines,
            }
        });
        Ok(())
    }
    fn reduce_RuleType_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut parengroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::ParenGroup(group) = parengroup {
                group
            } else {
                unreachable!("RuleType - Group");
            }
        });
        Ok(())
    }
    fn reduce_RuleType_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_RuleLines_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        let mut pipe = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        self.__rustylr_generated_stack_3.push({
            if let Lexed::Pipe(punct) = pipe {
                RuleLine.separator_span = punct.span();
                RuleLines.push(RuleLine);
            }
            RuleLines
        });
        Ok(())
    }
    fn reduce_RuleLines_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        self.__rustylr_generated_stack_3.push({ vec![RuleLine] });
        Ok(())
    }
    fn reduce_RuleLine_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Action = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut TokenMapped = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_4.push({
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
                separator_span: Span::call_site(),
            }
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated1_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        self.__rustylr_generated_stack_5.push({ vec![A] });
        Ok(())
    }
    fn reduce__RustyLRGenerated1_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_5.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated0_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_5.push({ Ap });
        Ok(())
    }
    fn reduce__RustyLRGenerated0_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_5.push({ vec![] });
        Ok(())
    }
    fn reduce_TokenMapped_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_6.push({ (None, Pattern) });
        Ok(())
    }
    fn reduce_TokenMapped_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut equal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            if let Lexed::Ident(ident) = ident {
                (Some(ident), Pattern)
            } else {
                unreachable!("Token-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            TerminalSetItem::Terminal(ident)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let first = if let Lexed::Ident(first) = first {
                first
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            let last = if let Lexed::Ident(last) = last {
                last
            } else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::Range(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSet_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSetItem = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut caret = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut lbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            let open_span = if let Lexed::LBracket(lbracket) = lbracket {
                lbracket
            } else {
                unreachable!("TerminalSet-Open");
            };
            let close_span = if let Lexed::RBracket(rbracket) = rbracket {
                rbracket
            } else {
                unreachable!("TerminalSet-Close");
            };
            TerminalSet {
                negate: caret.is_some(),
                items: TerminalSetItem,
                open_span,
                close_span,
            }
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated2_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({ Some(A) });
        Ok(())
    }
    fn reduce__RustyLRGenerated2_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_9.push({ None });
        Ok(())
    }
    fn reduce__RustyLRGenerated4_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        self.__rustylr_generated_stack_10.push({ vec![A] });
        Ok(())
    }
    fn reduce__RustyLRGenerated4_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_10.pop().unwrap();
        self.__rustylr_generated_stack_10.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated3_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_10.pop().unwrap();
        self.__rustylr_generated_stack_10.push({ Ap });
        Ok(())
    }
    fn reduce__RustyLRGenerated3_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_10.push({ vec![] });
        Ok(())
    }
    fn reduce_Pattern_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Ident(ident) = ident {
                let span = ident.span();
                PatternArgs::Ident(ident, span)
            } else {
                unreachable!("Pattern-Ident");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut plus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Plus(plus) = plus {
                PatternArgs::Plus(Box::new(Pattern), plus.span())
            } else {
                unreachable!("Pattern-Plus");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_2(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut star = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Star(star) = star {
                PatternArgs::Star(Box::new(Pattern), star.span())
            } else {
                unreachable!("Pattern-Star");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_3(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut question = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Question(question) = question {
                PatternArgs::Question(Box::new(Pattern), question.span())
            } else {
                unreachable!("Pattern-Question");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_4(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut exclamation = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Exclamation(exclamation) = exclamation {
                PatternArgs::Exclamation(Box::new(Pattern), exclamation.span())
            } else {
                unreachable!("Pattern-Exclamation");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_5(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_11
            .push({ PatternArgs::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_Action_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut bracegroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::BraceGroup(group) = bracegroup {
                group
            } else {
                unreachable!("Action0");
            }
        });
        Ok(())
    }
    fn reduce_Action_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_TokenDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut token = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12.push({
            if let Lexed::Ident(ident) = ident {
                (ident, RustCode)
            } else {
                unreachable!("TokenDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_RustCode_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut t = self.__rustylr_generated_stack_14.pop().unwrap();
        self.__rustylr_generated_stack_13.push({
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                token.append_to_stream(&mut tokens);
            }
            tokens
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated6_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_2(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_3(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_4(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_5(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_6(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_7(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_8(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_9(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_10(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_11(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_12(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_13(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_14(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_15(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_16(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated5_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14.push({ vec![A] });
        Ok(())
    }
    fn reduce__RustyLRGenerated5_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_14.pop().unwrap();
        self.__rustylr_generated_stack_14.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce_StartDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut start = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_15.push({
            if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("StartDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_EofDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut eofdef = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (eofdef.span(), RustCode) });
        Ok(())
    }
    fn reduce_TokenTypeDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut tokentype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (tokentype.span(), RustCode) });
        Ok(())
    }
    fn reduce_UserDataDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut userdata = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (userdata.span(), RustCode) });
        Ok(())
    }
    fn reduce_ReduceType_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut left = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17.push({ ReduceType::Left });
        Ok(())
    }
    fn reduce_ReduceType_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut right = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17
            .push({ ReduceType::Right });
        Ok(())
    }
    fn reduce_ReduceDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut reducetype = self.__rustylr_generated_stack_17.pop().unwrap();
        self.__rustylr_generated_stack_18.push({
            if let Lexed::Ident(ident) = ident {
                (ReduceTypeArgs::Ident(ident), reducetype)
            } else {
                unreachable!("ReduceDef-Ident (Left)");
            }
        });
        Ok(())
    }
    fn reduce_ReduceDef_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        let mut reducetype = self.__rustylr_generated_stack_17.pop().unwrap();
        self.__rustylr_generated_stack_18
            .push({ (ReduceTypeArgs::TerminalSet(TerminalSet), reducetype) });
        Ok(())
    }
    fn reduce_ErrorDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut errortype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (errortype.span(), RustCode) });
        Ok(())
    }
    fn reduce_ModulePrefixDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut moduleprefix = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (moduleprefix.span(), RustCode) });
        Ok(())
    }
    fn reduce_DeriveDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut derive = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13.push({ RustCode });
        Ok(())
    }
    fn reduce_GrammarLine_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Rule = self.__rustylr_generated_stack_1.pop().unwrap();
        {
            data.rules.push(Rule);
        }
        Ok(())
    }
    fn reduce_GrammarLine_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenDef = self.__rustylr_generated_stack_12.pop().unwrap();
        {
            data.terminals.push(TokenDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_2(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut StartDef = self.__rustylr_generated_stack_15.pop().unwrap();
        {
            data.start_rule_name.push(StartDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_3(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut EofDef = self.__rustylr_generated_stack_16.pop().unwrap();
        {
            data.eof.push(EofDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_4(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenTypeDef = self.__rustylr_generated_stack_16.pop().unwrap();
        {
            data.token_typename.push(TokenTypeDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_5(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut UserDataDef = self.__rustylr_generated_stack_16.pop().unwrap();
        {
            data.userdata_typename.push(UserDataDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_6(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ReduceDef = self.__rustylr_generated_stack_18.pop().unwrap();
        {
            data.reduce_types.push(ReduceDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_7(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ErrorDef = self.__rustylr_generated_stack_16.pop().unwrap();
        {
            data.error_typename.push(ErrorDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_8(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ModulePrefixDef = self.__rustylr_generated_stack_16.pop().unwrap();
        {
            data.module_prefix.push(ModulePrefixDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_9(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut DeriveDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.derives.push(DeriveDef);
        }
        Ok(())
    }
    fn reduce_Grammar_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__RustyLRGenerated7_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__RustyLRGenerated7_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce_Augmented_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut eof = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    #[doc = r" reduce items in stack, this function is called automatically by parser"]
    pub fn reduce(
        &mut self,
        rulelen: usize,
        rustylr_macro_generated_ruleid__: usize,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        match rustylr_macro_generated_ruleid__ {
            0usize => {
                self.reduce_Rule_0(data)?;
            }
            1usize => {
                self.reduce_RuleType_0(data)?;
            }
            2usize => {
                self.reduce_RuleType_1(data)?;
            }
            3usize => {
                self.reduce_RuleLines_0(data)?;
            }
            4usize => {
                self.reduce_RuleLines_1(data)?;
            }
            5usize => {
                self.reduce_RuleLine_0(data)?;
            }
            6usize => {
                self.reduce__RustyLRGenerated1_0(data)?;
            }
            7usize => {
                self.reduce__RustyLRGenerated1_1(data)?;
            }
            8usize => {
                self.reduce__RustyLRGenerated0_0(data)?;
            }
            9usize => {
                self.reduce__RustyLRGenerated0_1(data)?;
            }
            10usize => {
                self.reduce_TokenMapped_0(data)?;
            }
            11usize => {
                self.reduce_TokenMapped_1(data)?;
            }
            12usize => {
                self.reduce_TerminalSetItem_0(data)?;
            }
            13usize => {
                self.reduce_TerminalSetItem_1(data)?;
            }
            14usize => {
                self.reduce_TerminalSet_0(data)?;
            }
            15usize => {
                self.reduce__RustyLRGenerated2_0(data)?;
            }
            16usize => {
                self.reduce__RustyLRGenerated2_1(data)?;
            }
            17usize => {
                self.reduce__RustyLRGenerated4_0(data)?;
            }
            18usize => {
                self.reduce__RustyLRGenerated4_1(data)?;
            }
            19usize => {
                self.reduce__RustyLRGenerated3_0(data)?;
            }
            20usize => {
                self.reduce__RustyLRGenerated3_1(data)?;
            }
            21usize => {
                self.reduce_Pattern_0(data)?;
            }
            22usize => {
                self.reduce_Pattern_1(data)?;
            }
            23usize => {
                self.reduce_Pattern_2(data)?;
            }
            24usize => {
                self.reduce_Pattern_3(data)?;
            }
            25usize => {
                self.reduce_Pattern_4(data)?;
            }
            26usize => {
                self.reduce_Pattern_5(data)?;
            }
            27usize => {
                self.reduce_Action_0(data)?;
            }
            28usize => {
                self.reduce_Action_1(data)?;
            }
            29usize => {
                self.reduce_TokenDef_0(data)?;
            }
            30usize => {
                self.reduce_RustCode_0(data)?;
            }
            31usize => {
                self.reduce__RustyLRGenerated6_0(data)?;
            }
            32usize => {
                self.reduce__RustyLRGenerated6_1(data)?;
            }
            33usize => {
                self.reduce__RustyLRGenerated6_2(data)?;
            }
            34usize => {
                self.reduce__RustyLRGenerated6_3(data)?;
            }
            35usize => {
                self.reduce__RustyLRGenerated6_4(data)?;
            }
            36usize => {
                self.reduce__RustyLRGenerated6_5(data)?;
            }
            37usize => {
                self.reduce__RustyLRGenerated6_6(data)?;
            }
            38usize => {
                self.reduce__RustyLRGenerated6_7(data)?;
            }
            39usize => {
                self.reduce__RustyLRGenerated6_8(data)?;
            }
            40usize => {
                self.reduce__RustyLRGenerated6_9(data)?;
            }
            41usize => {
                self.reduce__RustyLRGenerated6_10(data)?;
            }
            42usize => {
                self.reduce__RustyLRGenerated6_11(data)?;
            }
            43usize => {
                self.reduce__RustyLRGenerated6_12(data)?;
            }
            44usize => {
                self.reduce__RustyLRGenerated6_13(data)?;
            }
            45usize => {
                self.reduce__RustyLRGenerated6_14(data)?;
            }
            46usize => {
                self.reduce__RustyLRGenerated6_15(data)?;
            }
            47usize => {
                self.reduce__RustyLRGenerated6_16(data)?;
            }
            48usize => {
                self.reduce__RustyLRGenerated5_0(data)?;
            }
            49usize => {
                self.reduce__RustyLRGenerated5_1(data)?;
            }
            50usize => {
                self.reduce_StartDef_0(data)?;
            }
            51usize => {
                self.reduce_EofDef_0(data)?;
            }
            52usize => {
                self.reduce_TokenTypeDef_0(data)?;
            }
            53usize => {
                self.reduce_UserDataDef_0(data)?;
            }
            54usize => {
                self.reduce_ReduceType_0(data)?;
            }
            55usize => {
                self.reduce_ReduceType_1(data)?;
            }
            56usize => {
                self.reduce_ReduceDef_0(data)?;
            }
            57usize => {
                self.reduce_ReduceDef_1(data)?;
            }
            58usize => {
                self.reduce_ErrorDef_0(data)?;
            }
            59usize => {
                self.reduce_ModulePrefixDef_0(data)?;
            }
            60usize => {
                self.reduce_DeriveDef_0(data)?;
            }
            61usize => {
                self.reduce_GrammarLine_0(data)?;
            }
            62usize => {
                self.reduce_GrammarLine_1(data)?;
            }
            63usize => {
                self.reduce_GrammarLine_2(data)?;
            }
            64usize => {
                self.reduce_GrammarLine_3(data)?;
            }
            65usize => {
                self.reduce_GrammarLine_4(data)?;
            }
            66usize => {
                self.reduce_GrammarLine_5(data)?;
            }
            67usize => {
                self.reduce_GrammarLine_6(data)?;
            }
            68usize => {
                self.reduce_GrammarLine_7(data)?;
            }
            69usize => {
                self.reduce_GrammarLine_8(data)?;
            }
            70usize => {
                self.reduce_GrammarLine_9(data)?;
            }
            71usize => {
                self.reduce_Grammar_0(data)?;
            }
            72usize => {
                self.reduce__RustyLRGenerated7_0(data)?;
            }
            73usize => {
                self.reduce__RustyLRGenerated7_1(data)?;
            }
            74usize => {
                self.reduce_Augmented_0(data)?;
            }
            _ => {
                unreachable!("Invalid Rule: {}", rustylr_macro_generated_ruleid__);
            }
        }
        Ok(())
    }
    #[doc = r" pop value from start rule"]
    #[inline]
    pub fn accept(&mut self) {}
    #[doc = r" push terminal symbol to stack, this function is called automatically by parser"]
    #[inline]
    pub fn push(&mut self, term: Lexed) {
        self.__rustylr_generated_terminal_stack.push(term);
    }
}
impl ::rusty_lr_core::GetContext<Lexed, GrammarNonTerminals> for GrammarContext {
    fn get_state_stack(&self) -> &[usize] {
        &self.state_stack
    }
}
#[doc = r" struct that holds parser data, DFA tables"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
#[derive(Clone)]
pub struct GrammarParser {
    #[doc = r" production rules"]
    pub rules: Vec<GrammarRule>,
    #[doc = r" states"]
    pub states: Vec<GrammarState>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarParser {
    #[doc = r" feed one terminal to parser, and update state stack"]
    pub fn feed(
        &self,
        context: &mut GrammarContext,
        term: Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), GrammarParseError> {
        self.lookahead(context, &term, data)?;
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(next_state_id) = state.shift_goto_term(&term) {
            context.state_stack.push(next_state_id);
            context.push(term);
            Ok(())
        } else {
            let error = GrammarInvalidTerminalError {
                term,
                expected: state.expected().into_iter().cloned().collect(),
            };
            Err(GrammarParseError::InvalidTerminal(error))
        }
    }
    #[doc = r" Create new context for parsing"]
    #[inline]
    pub fn begin(&self) -> GrammarContext {
        GrammarContext::new()
    }
    #[doc = r" give lookahead token to parser, and check if there is any reduce action"]
    fn lookahead(
        &self,
        context: &mut GrammarContext,
        term: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), GrammarParseError> {
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(reduce_rule) = state.reduce(term) {
            let rule = &self.rules[reduce_rule];
            context
                .state_stack
                .truncate(context.state_stack.len() - rule.rule.len());
            context
                .reduce(self.rules[reduce_rule].rule.len(), reduce_rule, data)
                .map_err(GrammarParseError::ReduceAction)?;
            self.feed_nonterm(context, &rule.name)?;
            self.lookahead(context, term, data)?;
        }
        Ok(())
    }
    #[doc = r" feed one non-terminal to parser, and update state stack"]
    fn feed_nonterm(
        &self,
        context: &mut GrammarContext,
        nonterm: &GrammarNonTerminals,
    ) -> Result<(), GrammarParseError> {
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(next_state_id) = state.shift_goto_nonterm(nonterm) {
            context.state_stack.push(next_state_id);
        } else {
            unreachable!("Invalid NonTerminal: {}", nonterm);
        }
        Ok(())
    }
    #[doc = r" Create new parser instance."]
    #[doc = r" Parser can be reused with different context, for multiple parsing."]
    pub fn new() -> Self {
        let __rustylr_terminals = vec![
            Lexed::Ident(Ident::new("id", Span::call_site())),
            Lexed::Colon(punct!(':')),
            Lexed::Semicolon(punct!(';')),
            Lexed::Pipe(punct!('|')),
            Lexed::Percent(punct!('%')),
            Lexed::Equal(punct!('=')),
            Lexed::Plus(punct!('+')),
            Lexed::Star(punct!('*')),
            Lexed::Question(punct!('?')),
            Lexed::Caret(punct!('^')),
            Lexed::Minus(punct!('-')),
            Lexed::Exclamation(punct!('!')),
            Lexed::OtherPunct(punct!('.')),
            Lexed::Literal(None),
            Lexed::ParenGroup(None),
            Lexed::BraceGroup(None),
            Lexed::BracketGroup(None),
            Lexed::NoneGroup(None),
            Lexed::LParen(Span::call_site()),
            Lexed::RParen(Span::call_site()),
            Lexed::LBrace(Span::call_site()),
            Lexed::RBrace(Span::call_site()),
            Lexed::LBracket(Span::call_site()),
            Lexed::RBracket(Span::call_site()),
            Lexed::Left(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Right(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Token(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Start(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::EofDef(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::TokenType(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::UserData(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::ErrorType(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::ModulePrefix(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Derive(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Eof,
        ];
        let rules: Vec<GrammarRule> = [
            GrammarNonTerminals::Rule,
            GrammarNonTerminals::RuleType,
            GrammarNonTerminals::RuleType,
            GrammarNonTerminals::RuleLines,
            GrammarNonTerminals::RuleLines,
            GrammarNonTerminals::RuleLine,
            GrammarNonTerminals::_RustyLRGenerated1,
            GrammarNonTerminals::_RustyLRGenerated1,
            GrammarNonTerminals::_RustyLRGenerated0,
            GrammarNonTerminals::_RustyLRGenerated0,
            GrammarNonTerminals::TokenMapped,
            GrammarNonTerminals::TokenMapped,
            GrammarNonTerminals::TerminalSetItem,
            GrammarNonTerminals::TerminalSetItem,
            GrammarNonTerminals::TerminalSet,
            GrammarNonTerminals::_RustyLRGenerated2,
            GrammarNonTerminals::_RustyLRGenerated2,
            GrammarNonTerminals::_RustyLRGenerated4,
            GrammarNonTerminals::_RustyLRGenerated4,
            GrammarNonTerminals::_RustyLRGenerated3,
            GrammarNonTerminals::_RustyLRGenerated3,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Action,
            GrammarNonTerminals::Action,
            GrammarNonTerminals::TokenDef,
            GrammarNonTerminals::RustCode,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated6,
            GrammarNonTerminals::_RustyLRGenerated5,
            GrammarNonTerminals::_RustyLRGenerated5,
            GrammarNonTerminals::StartDef,
            GrammarNonTerminals::EofDef,
            GrammarNonTerminals::TokenTypeDef,
            GrammarNonTerminals::UserDataDef,
            GrammarNonTerminals::ReduceType,
            GrammarNonTerminals::ReduceType,
            GrammarNonTerminals::ReduceDef,
            GrammarNonTerminals::ReduceDef,
            GrammarNonTerminals::ErrorDef,
            GrammarNonTerminals::ModulePrefixDef,
            GrammarNonTerminals::DeriveDef,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::Grammar,
            GrammarNonTerminals::_RustyLRGenerated7,
            GrammarNonTerminals::_RustyLRGenerated7,
            GrammarNonTerminals::Augmented,
        ]
        .into_iter()
        .zip([
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
                ::rusty_lr_core::Token::Term(1usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![::rusty_lr_core::Token::Term(14usize)],
            vec![],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(3usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),
            ],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::RuleLine,
            )],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated0),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),
            ],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenMapped,
            )],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated1),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),
            ],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_RustyLRGenerated1,
            )],
            vec![],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(5usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            vec![::rusty_lr_core::Token::Term(0usize)],
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(10usize),
                ::rusty_lr_core::Token::Term(0usize),
            ],
            vec![
                ::rusty_lr_core::Token::Term(22usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated2),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated3),
                ::rusty_lr_core::Token::Term(23usize),
            ],
            vec![::rusty_lr_core::Token::Term(9usize)],
            vec![],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSetItem,
            )],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated4),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),
            ],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_RustyLRGenerated4,
            )],
            vec![],
            vec![::rusty_lr_core::Token::Term(0usize)],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(6usize),
            ],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(7usize),
            ],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(8usize),
            ],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(11usize),
            ],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            vec![::rusty_lr_core::Token::Term(15usize)],
            vec![],
            vec![
                ::rusty_lr_core::Token::Term(26usize),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_RustyLRGenerated5,
            )],
            vec![::rusty_lr_core::Token::Term(15usize)],
            vec![::rusty_lr_core::Token::Term(16usize)],
            vec![::rusty_lr_core::Token::Term(9usize)],
            vec![::rusty_lr_core::Token::Term(1usize)],
            vec![::rusty_lr_core::Token::Term(5usize)],
            vec![::rusty_lr_core::Token::Term(11usize)],
            vec![::rusty_lr_core::Token::Term(0usize)],
            vec![::rusty_lr_core::Token::Term(13usize)],
            vec![::rusty_lr_core::Token::Term(10usize)],
            vec![::rusty_lr_core::Token::Term(17usize)],
            vec![::rusty_lr_core::Token::Term(12usize)],
            vec![::rusty_lr_core::Token::Term(14usize)],
            vec![::rusty_lr_core::Token::Term(4usize)],
            vec![::rusty_lr_core::Token::Term(3usize)],
            vec![::rusty_lr_core::Token::Term(6usize)],
            vec![::rusty_lr_core::Token::Term(8usize)],
            vec![::rusty_lr_core::Token::Term(7usize)],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_RustyLRGenerated6,
            )],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated5),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated6),
            ],
            vec![
                ::rusty_lr_core::Token::Term(27usize),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![
                ::rusty_lr_core::Token::Term(28usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![
                ::rusty_lr_core::Token::Term(29usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![
                ::rusty_lr_core::Token::Term(30usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![::rusty_lr_core::Token::Term(24usize)],
            vec![::rusty_lr_core::Token::Term(25usize)],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSet),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![
                ::rusty_lr_core::Token::Term(31usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![
                ::rusty_lr_core::Token::Term(32usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![
                ::rusty_lr_core::Token::Term(33usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule)],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenDef,
            )],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::StartDef,
            )],
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef)],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenTypeDef,
            )],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::UserDataDef,
            )],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ReduceDef,
            )],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ErrorDef,
            )],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ModulePrefixDef,
            )],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::DeriveDef,
            )],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_RustyLRGenerated7,
            )],
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::GrammarLine,
            )],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::GrammarLine),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated7),
            ],
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                ::rusty_lr_core::Token::Term(34usize),
            ],
        ])
        .map(|(name, tokens)| GrammarRule {
            name,
            rule: tokens
                .into_iter()
                .map(|token| match token {
                    ::rusty_lr_core::Token::Term(term) => {
                        ::rusty_lr_core::Token::Term(__rustylr_terminals[term].clone())
                    }
                    ::rusty_lr_core::Token::NonTerm(nonterm) => {
                        ::rusty_lr_core::Token::NonTerm(nonterm)
                    }
                })
                .collect(),
        })
        .collect();
        let __rustylr_reduce_terminals = vec![
            vec![
                0usize, 1usize, 2usize, 3usize, 4usize, 5usize, 6usize, 7usize, 8usize, 9usize,
                10usize, 11usize, 12usize, 13usize, 14usize, 15usize, 16usize, 17usize,
            ],
            vec![
                0usize, 24usize, 25usize, 26usize, 27usize, 28usize, 29usize, 30usize, 31usize,
                32usize, 33usize, 34usize,
            ],
            vec![2usize],
            vec![1usize],
            vec![2usize, 3usize, 15usize],
            vec![
                0usize, 2usize, 3usize, 6usize, 7usize, 8usize, 11usize, 15usize, 22usize,
            ],
            vec![0usize, 23usize],
            vec![23usize],
            vec![0usize, 2usize, 3usize, 15usize, 22usize],
            vec![2usize, 3usize],
            vec![0usize, 22usize],
            vec![34usize],
        ];
        let states: Vec<GrammarState> = [
            vec![
                (0usize, 30usize),
                (24usize, 66usize),
                (25usize, 70usize),
                (26usize, 74usize),
                (27usize, 71usize),
                (28usize, 24usize),
                (29usize, 78usize),
                (30usize, 81usize),
                (31usize, 27usize),
                (32usize, 67usize),
                (33usize, 1usize),
            ],
            vec![
                (0usize, 8usize),
                (1usize, 5usize),
                (3usize, 15usize),
                (4usize, 14usize),
                (5usize, 6usize),
                (6usize, 16usize),
                (7usize, 18usize),
                (8usize, 17usize),
                (9usize, 4usize),
                (10usize, 10usize),
                (11usize, 7usize),
                (12usize, 12usize),
                (13usize, 9usize),
                (14usize, 13usize),
                (15usize, 2usize),
                (16usize, 3usize),
                (17usize, 11usize),
            ],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![(2usize, 20usize)],
            vec![],
            vec![
                (0usize, 8usize),
                (1usize, 5usize),
                (3usize, 15usize),
                (4usize, 14usize),
                (5usize, 6usize),
                (6usize, 16usize),
                (7usize, 18usize),
                (8usize, 17usize),
                (9usize, 4usize),
                (10usize, 10usize),
                (11usize, 7usize),
                (12usize, 12usize),
                (13usize, 9usize),
                (14usize, 13usize),
                (15usize, 2usize),
                (16usize, 3usize),
                (17usize, 11usize),
            ],
            vec![],
            vec![],
            vec![
                (0usize, 8usize),
                (1usize, 5usize),
                (3usize, 15usize),
                (4usize, 14usize),
                (5usize, 6usize),
                (6usize, 16usize),
                (7usize, 18usize),
                (8usize, 17usize),
                (9usize, 4usize),
                (10usize, 10usize),
                (11usize, 7usize),
                (12usize, 12usize),
                (13usize, 9usize),
                (14usize, 13usize),
                (15usize, 2usize),
                (16usize, 3usize),
                (17usize, 11usize),
            ],
            vec![(2usize, 26usize)],
            vec![],
            vec![
                (0usize, 8usize),
                (1usize, 5usize),
                (3usize, 15usize),
                (4usize, 14usize),
                (5usize, 6usize),
                (6usize, 16usize),
                (7usize, 18usize),
                (8usize, 17usize),
                (9usize, 4usize),
                (10usize, 10usize),
                (11usize, 7usize),
                (12usize, 12usize),
                (13usize, 9usize),
                (14usize, 13usize),
                (15usize, 2usize),
                (16usize, 3usize),
                (17usize, 11usize),
            ],
            vec![(2usize, 29usize)],
            vec![],
            vec![(14usize, 31usize)],
            vec![],
            vec![(1usize, 33usize)],
            vec![(0usize, 34usize), (22usize, 37usize)],
            vec![(5usize, 35usize)],
            vec![(0usize, 36usize), (22usize, 37usize)],
            vec![],
            vec![(9usize, 38usize)],
            vec![],
            vec![(0usize, 40usize)],
            vec![(10usize, 41usize)],
            vec![(0usize, 42usize)],
            vec![],
            vec![],
            vec![(23usize, 45usize)],
            vec![],
            vec![(0usize, 40usize)],
            vec![],
            vec![
                (6usize, 50usize),
                (7usize, 52usize),
                (8usize, 51usize),
                (11usize, 49usize),
            ],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![
                (6usize, 50usize),
                (7usize, 52usize),
                (8usize, 51usize),
                (11usize, 49usize),
            ],
            vec![],
            vec![(2usize, 65usize), (3usize, 57usize)],
            vec![(0usize, 34usize), (22usize, 37usize)],
            vec![],
            vec![],
            vec![(15usize, 61usize)],
            vec![],
            vec![],
            vec![(0usize, 34usize), (22usize, 37usize)],
            vec![],
            vec![],
            vec![],
            vec![
                (0usize, 8usize),
                (1usize, 5usize),
                (3usize, 15usize),
                (4usize, 14usize),
                (5usize, 6usize),
                (6usize, 16usize),
                (7usize, 18usize),
                (8usize, 17usize),
                (9usize, 4usize),
                (10usize, 10usize),
                (11usize, 7usize),
                (12usize, 12usize),
                (13usize, 9usize),
                (14usize, 13usize),
                (15usize, 2usize),
                (16usize, 3usize),
                (17usize, 11usize),
            ],
            vec![(2usize, 69usize)],
            vec![],
            vec![],
            vec![(0usize, 72usize)],
            vec![(2usize, 73usize)],
            vec![],
            vec![(0usize, 75usize)],
            vec![
                (0usize, 8usize),
                (1usize, 5usize),
                (3usize, 15usize),
                (4usize, 14usize),
                (5usize, 6usize),
                (6usize, 16usize),
                (7usize, 18usize),
                (8usize, 17usize),
                (9usize, 4usize),
                (10usize, 10usize),
                (11usize, 7usize),
                (12usize, 12usize),
                (13usize, 9usize),
                (14usize, 13usize),
                (15usize, 2usize),
                (16usize, 3usize),
                (17usize, 11usize),
            ],
            vec![(2usize, 77usize)],
            vec![],
            vec![
                (0usize, 8usize),
                (1usize, 5usize),
                (3usize, 15usize),
                (4usize, 14usize),
                (5usize, 6usize),
                (6usize, 16usize),
                (7usize, 18usize),
                (8usize, 17usize),
                (9usize, 4usize),
                (10usize, 10usize),
                (11usize, 7usize),
                (12usize, 12usize),
                (13usize, 9usize),
                (14usize, 13usize),
                (15usize, 2usize),
                (16usize, 3usize),
                (17usize, 11usize),
            ],
            vec![(2usize, 80usize)],
            vec![],
            vec![
                (0usize, 8usize),
                (1usize, 5usize),
                (3usize, 15usize),
                (4usize, 14usize),
                (5usize, 6usize),
                (6usize, 16usize),
                (7usize, 18usize),
                (8usize, 17usize),
                (9usize, 4usize),
                (10usize, 10usize),
                (11usize, 7usize),
                (12usize, 12usize),
                (13usize, 9usize),
                (14usize, 13usize),
                (15usize, 2usize),
                (16usize, 3usize),
                (17usize, 11usize),
            ],
            vec![(2usize, 83usize)],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![(34usize, 88usize)],
            vec![],
            vec![
                (0usize, 30usize),
                (24usize, 66usize),
                (25usize, 70usize),
                (26usize, 74usize),
                (27usize, 71usize),
                (28usize, 24usize),
                (29usize, 78usize),
                (30usize, 81usize),
                (31usize, 27usize),
                (32usize, 67usize),
                (33usize, 1usize),
            ],
            vec![],
            vec![],
            vec![(0usize, 93usize), (22usize, 95usize)],
            vec![(2usize, 94usize)],
            vec![],
            vec![(9usize, 38usize)],
            vec![(0usize, 40usize)],
            vec![(23usize, 98usize)],
            vec![],
            vec![(2usize, 100usize)],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
            vec![],
        ]
        .into_iter()
        .zip(
            [
                vec![
                    (GrammarNonTerminals::DeriveDef, 84usize),
                    (GrammarNonTerminals::EofDef, 85usize),
                    (GrammarNonTerminals::ErrorDef, 86usize),
                    (GrammarNonTerminals::Grammar, 87usize),
                    (GrammarNonTerminals::GrammarLine, 89usize),
                    (GrammarNonTerminals::ModulePrefixDef, 90usize),
                    (GrammarNonTerminals::ReduceDef, 91usize),
                    (GrammarNonTerminals::ReduceType, 92usize),
                    (GrammarNonTerminals::Rule, 101usize),
                    (GrammarNonTerminals::StartDef, 102usize),
                    (GrammarNonTerminals::TokenDef, 103usize),
                    (GrammarNonTerminals::TokenTypeDef, 104usize),
                    (GrammarNonTerminals::UserDataDef, 105usize),
                    (GrammarNonTerminals::_RustyLRGenerated7, 107usize),
                ],
                vec![
                    (GrammarNonTerminals::RustCode, 19usize),
                    (GrammarNonTerminals::_RustyLRGenerated5, 21usize),
                    (GrammarNonTerminals::_RustyLRGenerated6, 23usize),
                ],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![(GrammarNonTerminals::_RustyLRGenerated6, 22usize)],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::RustCode, 25usize),
                    (GrammarNonTerminals::_RustyLRGenerated5, 21usize),
                    (GrammarNonTerminals::_RustyLRGenerated6, 23usize),
                ],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::RustCode, 28usize),
                    (GrammarNonTerminals::_RustyLRGenerated5, 21usize),
                    (GrammarNonTerminals::_RustyLRGenerated6, 23usize),
                ],
                vec![],
                vec![],
                vec![(GrammarNonTerminals::RuleType, 32usize)],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::Pattern, 54usize),
                    (GrammarNonTerminals::RuleLine, 55usize),
                    (GrammarNonTerminals::RuleLines, 56usize),
                    (GrammarNonTerminals::TerminalSet, 53usize),
                    (GrammarNonTerminals::TokenMapped, 59usize),
                    (GrammarNonTerminals::_RustyLRGenerated0, 60usize),
                    (GrammarNonTerminals::_RustyLRGenerated1, 63usize),
                ],
                vec![],
                vec![
                    (GrammarNonTerminals::Pattern, 48usize),
                    (GrammarNonTerminals::TerminalSet, 53usize),
                ],
                vec![],
                vec![(GrammarNonTerminals::_RustyLRGenerated2, 39usize)],
                vec![],
                vec![
                    (GrammarNonTerminals::TerminalSetItem, 43usize),
                    (GrammarNonTerminals::_RustyLRGenerated3, 44usize),
                    (GrammarNonTerminals::_RustyLRGenerated4, 46usize),
                ],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![(GrammarNonTerminals::TerminalSetItem, 47usize)],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::Pattern, 54usize),
                    (GrammarNonTerminals::RuleLine, 58usize),
                    (GrammarNonTerminals::TerminalSet, 53usize),
                    (GrammarNonTerminals::TokenMapped, 59usize),
                    (GrammarNonTerminals::_RustyLRGenerated0, 60usize),
                    (GrammarNonTerminals::_RustyLRGenerated1, 63usize),
                ],
                vec![],
                vec![],
                vec![(GrammarNonTerminals::Action, 62usize)],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::Pattern, 54usize),
                    (GrammarNonTerminals::TerminalSet, 53usize),
                    (GrammarNonTerminals::TokenMapped, 64usize),
                ],
                vec![],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::RustCode, 68usize),
                    (GrammarNonTerminals::_RustyLRGenerated5, 21usize),
                    (GrammarNonTerminals::_RustyLRGenerated6, 23usize),
                ],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::RustCode, 76usize),
                    (GrammarNonTerminals::_RustyLRGenerated5, 21usize),
                    (GrammarNonTerminals::_RustyLRGenerated6, 23usize),
                ],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::RustCode, 79usize),
                    (GrammarNonTerminals::_RustyLRGenerated5, 21usize),
                    (GrammarNonTerminals::_RustyLRGenerated6, 23usize),
                ],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::RustCode, 82usize),
                    (GrammarNonTerminals::_RustyLRGenerated5, 21usize),
                    (GrammarNonTerminals::_RustyLRGenerated6, 23usize),
                ],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![
                    (GrammarNonTerminals::DeriveDef, 84usize),
                    (GrammarNonTerminals::EofDef, 85usize),
                    (GrammarNonTerminals::ErrorDef, 86usize),
                    (GrammarNonTerminals::GrammarLine, 89usize),
                    (GrammarNonTerminals::ModulePrefixDef, 90usize),
                    (GrammarNonTerminals::ReduceDef, 91usize),
                    (GrammarNonTerminals::ReduceType, 92usize),
                    (GrammarNonTerminals::Rule, 101usize),
                    (GrammarNonTerminals::StartDef, 102usize),
                    (GrammarNonTerminals::TokenDef, 103usize),
                    (GrammarNonTerminals::TokenTypeDef, 104usize),
                    (GrammarNonTerminals::UserDataDef, 105usize),
                    (GrammarNonTerminals::_RustyLRGenerated7, 106usize),
                ],
                vec![],
                vec![],
                vec![(GrammarNonTerminals::TerminalSet, 99usize)],
                vec![],
                vec![],
                vec![(GrammarNonTerminals::_RustyLRGenerated2, 96usize)],
                vec![
                    (GrammarNonTerminals::TerminalSetItem, 43usize),
                    (GrammarNonTerminals::_RustyLRGenerated3, 97usize),
                    (GrammarNonTerminals::_RustyLRGenerated4, 46usize),
                ],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
                vec![],
            ]
            .into_iter()
            .zip(
                [
                    vec![],
                    vec![],
                    vec![(0usize, 31usize)],
                    vec![(0usize, 32usize)],
                    vec![(0usize, 33usize)],
                    vec![(0usize, 34usize)],
                    vec![(0usize, 35usize)],
                    vec![(0usize, 36usize)],
                    vec![(0usize, 37usize)],
                    vec![(0usize, 38usize)],
                    vec![(0usize, 39usize)],
                    vec![(0usize, 40usize)],
                    vec![(0usize, 41usize)],
                    vec![(0usize, 42usize)],
                    vec![(0usize, 43usize)],
                    vec![(0usize, 44usize)],
                    vec![(0usize, 45usize)],
                    vec![(0usize, 46usize)],
                    vec![(0usize, 47usize)],
                    vec![],
                    vec![(1usize, 60usize)],
                    vec![(2usize, 30usize)],
                    vec![(0usize, 49usize)],
                    vec![(0usize, 48usize)],
                    vec![],
                    vec![],
                    vec![(1usize, 51usize)],
                    vec![],
                    vec![],
                    vec![(1usize, 58usize)],
                    vec![(3usize, 2usize)],
                    vec![(3usize, 1usize)],
                    vec![],
                    vec![(4usize, 9usize)],
                    vec![(5usize, 21usize)],
                    vec![],
                    vec![(5usize, 21usize)],
                    vec![(6usize, 16usize)],
                    vec![(6usize, 15usize)],
                    vec![(7usize, 20usize)],
                    vec![(6usize, 12usize)],
                    vec![],
                    vec![(6usize, 13usize)],
                    vec![(6usize, 17usize)],
                    vec![],
                    vec![(5usize, 14usize)],
                    vec![(7usize, 19usize)],
                    vec![(6usize, 18usize)],
                    vec![(8usize, 11usize)],
                    vec![(5usize, 25usize)],
                    vec![(5usize, 22usize)],
                    vec![(5usize, 24usize)],
                    vec![(5usize, 23usize)],
                    vec![(5usize, 26usize)],
                    vec![(8usize, 10usize)],
                    vec![(9usize, 4usize)],
                    vec![],
                    vec![(4usize, 9usize)],
                    vec![(9usize, 3usize)],
                    vec![(8usize, 6usize)],
                    vec![(9usize, 28usize)],
                    vec![(9usize, 27usize)],
                    vec![(9usize, 5usize)],
                    vec![(4usize, 8usize)],
                    vec![(8usize, 7usize)],
                    vec![(1usize, 0usize)],
                    vec![(10usize, 54usize)],
                    vec![],
                    vec![],
                    vec![(1usize, 59usize)],
                    vec![(10usize, 55usize)],
                    vec![],
                    vec![],
                    vec![(1usize, 50usize)],
                    vec![],
                    vec![],
                    vec![],
                    vec![(1usize, 29usize)],
                    vec![],
                    vec![],
                    vec![(1usize, 52usize)],
                    vec![],
                    vec![],
                    vec![(1usize, 53usize)],
                    vec![(1usize, 70usize)],
                    vec![(1usize, 64usize)],
                    vec![(1usize, 68usize)],
                    vec![],
                    vec![],
                    vec![(11usize, 72usize)],
                    vec![(1usize, 69usize)],
                    vec![(1usize, 67usize)],
                    vec![],
                    vec![],
                    vec![(1usize, 56usize)],
                    vec![(6usize, 16usize)],
                    vec![(7usize, 20usize)],
                    vec![],
                    vec![(2usize, 14usize)],
                    vec![],
                    vec![(1usize, 57usize)],
                    vec![(1usize, 61usize)],
                    vec![(1usize, 63usize)],
                    vec![(1usize, 62usize)],
                    vec![(1usize, 65usize)],
                    vec![(1usize, 66usize)],
                    vec![(11usize, 73usize)],
                    vec![(11usize, 71usize)],
                ]
                .into_iter()
                .zip([
                    vec![
                        (0usize, 0usize),
                        (29usize, 0usize),
                        (50usize, 0usize),
                        (51usize, 0usize),
                        (52usize, 0usize),
                        (53usize, 0usize),
                        (54usize, 0usize),
                        (55usize, 0usize),
                        (56usize, 0usize),
                        (57usize, 0usize),
                        (58usize, 0usize),
                        (59usize, 0usize),
                        (60usize, 0usize),
                        (61usize, 0usize),
                        (62usize, 0usize),
                        (63usize, 0usize),
                        (64usize, 0usize),
                        (65usize, 0usize),
                        (66usize, 0usize),
                        (67usize, 0usize),
                        (68usize, 0usize),
                        (69usize, 0usize),
                        (70usize, 0usize),
                        (71usize, 0usize),
                        (72usize, 0usize),
                        (73usize, 0usize),
                        (74usize, 0usize),
                    ],
                    vec![
                        (30usize, 0usize),
                        (31usize, 0usize),
                        (32usize, 0usize),
                        (33usize, 0usize),
                        (34usize, 0usize),
                        (35usize, 0usize),
                        (36usize, 0usize),
                        (37usize, 0usize),
                        (38usize, 0usize),
                        (39usize, 0usize),
                        (40usize, 0usize),
                        (41usize, 0usize),
                        (42usize, 0usize),
                        (43usize, 0usize),
                        (44usize, 0usize),
                        (45usize, 0usize),
                        (46usize, 0usize),
                        (47usize, 0usize),
                        (48usize, 0usize),
                        (49usize, 0usize),
                        (60usize, 1usize),
                    ],
                    vec![(31usize, 1usize)],
                    vec![(32usize, 1usize)],
                    vec![(33usize, 1usize)],
                    vec![(34usize, 1usize)],
                    vec![(35usize, 1usize)],
                    vec![(36usize, 1usize)],
                    vec![(37usize, 1usize)],
                    vec![(38usize, 1usize)],
                    vec![(39usize, 1usize)],
                    vec![(40usize, 1usize)],
                    vec![(41usize, 1usize)],
                    vec![(42usize, 1usize)],
                    vec![(43usize, 1usize)],
                    vec![(44usize, 1usize)],
                    vec![(45usize, 1usize)],
                    vec![(46usize, 1usize)],
                    vec![(47usize, 1usize)],
                    vec![(60usize, 2usize)],
                    vec![(60usize, 3usize)],
                    vec![
                        (30usize, 1usize),
                        (31usize, 0usize),
                        (32usize, 0usize),
                        (33usize, 0usize),
                        (34usize, 0usize),
                        (35usize, 0usize),
                        (36usize, 0usize),
                        (37usize, 0usize),
                        (38usize, 0usize),
                        (39usize, 0usize),
                        (40usize, 0usize),
                        (41usize, 0usize),
                        (42usize, 0usize),
                        (43usize, 0usize),
                        (44usize, 0usize),
                        (45usize, 0usize),
                        (46usize, 0usize),
                        (47usize, 0usize),
                        (49usize, 1usize),
                    ],
                    vec![(49usize, 2usize)],
                    vec![(48usize, 1usize)],
                    vec![
                        (30usize, 0usize),
                        (31usize, 0usize),
                        (32usize, 0usize),
                        (33usize, 0usize),
                        (34usize, 0usize),
                        (35usize, 0usize),
                        (36usize, 0usize),
                        (37usize, 0usize),
                        (38usize, 0usize),
                        (39usize, 0usize),
                        (40usize, 0usize),
                        (41usize, 0usize),
                        (42usize, 0usize),
                        (43usize, 0usize),
                        (44usize, 0usize),
                        (45usize, 0usize),
                        (46usize, 0usize),
                        (47usize, 0usize),
                        (48usize, 0usize),
                        (49usize, 0usize),
                        (51usize, 1usize),
                    ],
                    vec![(51usize, 2usize)],
                    vec![(51usize, 3usize)],
                    vec![
                        (30usize, 0usize),
                        (31usize, 0usize),
                        (32usize, 0usize),
                        (33usize, 0usize),
                        (34usize, 0usize),
                        (35usize, 0usize),
                        (36usize, 0usize),
                        (37usize, 0usize),
                        (38usize, 0usize),
                        (39usize, 0usize),
                        (40usize, 0usize),
                        (41usize, 0usize),
                        (42usize, 0usize),
                        (43usize, 0usize),
                        (44usize, 0usize),
                        (45usize, 0usize),
                        (46usize, 0usize),
                        (47usize, 0usize),
                        (48usize, 0usize),
                        (49usize, 0usize),
                        (58usize, 1usize),
                    ],
                    vec![(58usize, 2usize)],
                    vec![(58usize, 3usize)],
                    vec![(0usize, 1usize), (1usize, 0usize), (2usize, 0usize)],
                    vec![(1usize, 1usize)],
                    vec![(0usize, 2usize)],
                    vec![
                        (0usize, 3usize),
                        (3usize, 0usize),
                        (4usize, 0usize),
                        (5usize, 0usize),
                        (6usize, 0usize),
                        (7usize, 0usize),
                        (8usize, 0usize),
                        (9usize, 0usize),
                        (10usize, 0usize),
                        (11usize, 0usize),
                        (14usize, 0usize),
                        (21usize, 0usize),
                        (22usize, 0usize),
                        (23usize, 0usize),
                        (24usize, 0usize),
                        (25usize, 0usize),
                        (26usize, 0usize),
                    ],
                    vec![(11usize, 1usize), (21usize, 1usize)],
                    vec![
                        (11usize, 2usize),
                        (14usize, 0usize),
                        (21usize, 0usize),
                        (22usize, 0usize),
                        (23usize, 0usize),
                        (24usize, 0usize),
                        (25usize, 0usize),
                        (26usize, 0usize),
                    ],
                    vec![(21usize, 1usize)],
                    vec![(14usize, 1usize), (15usize, 0usize), (16usize, 0usize)],
                    vec![(15usize, 1usize)],
                    vec![
                        (12usize, 0usize),
                        (13usize, 0usize),
                        (14usize, 2usize),
                        (17usize, 0usize),
                        (18usize, 0usize),
                        (19usize, 0usize),
                        (20usize, 0usize),
                    ],
                    vec![(12usize, 1usize), (13usize, 1usize)],
                    vec![(13usize, 2usize)],
                    vec![(13usize, 3usize)],
                    vec![(17usize, 1usize)],
                    vec![(14usize, 3usize)],
                    vec![(14usize, 4usize)],
                    vec![
                        (12usize, 0usize),
                        (13usize, 0usize),
                        (18usize, 1usize),
                        (19usize, 1usize),
                    ],
                    vec![(18usize, 2usize)],
                    vec![
                        (11usize, 3usize),
                        (22usize, 1usize),
                        (23usize, 1usize),
                        (24usize, 1usize),
                        (25usize, 1usize),
                    ],
                    vec![(25usize, 2usize)],
                    vec![(22usize, 2usize)],
                    vec![(24usize, 2usize)],
                    vec![(23usize, 2usize)],
                    vec![(26usize, 1usize)],
                    vec![
                        (10usize, 1usize),
                        (22usize, 1usize),
                        (23usize, 1usize),
                        (24usize, 1usize),
                        (25usize, 1usize),
                    ],
                    vec![(4usize, 1usize)],
                    vec![(0usize, 4usize), (3usize, 1usize)],
                    vec![
                        (3usize, 2usize),
                        (5usize, 0usize),
                        (6usize, 0usize),
                        (7usize, 0usize),
                        (8usize, 0usize),
                        (9usize, 0usize),
                        (10usize, 0usize),
                        (11usize, 0usize),
                        (14usize, 0usize),
                        (21usize, 0usize),
                        (22usize, 0usize),
                        (23usize, 0usize),
                        (24usize, 0usize),
                        (25usize, 0usize),
                        (26usize, 0usize),
                    ],
                    vec![(3usize, 3usize)],
                    vec![(6usize, 1usize)],
                    vec![(5usize, 1usize), (27usize, 0usize), (28usize, 0usize)],
                    vec![(27usize, 1usize)],
                    vec![(5usize, 2usize)],
                    vec![
                        (7usize, 1usize),
                        (8usize, 1usize),
                        (10usize, 0usize),
                        (11usize, 0usize),
                        (14usize, 0usize),
                        (21usize, 0usize),
                        (22usize, 0usize),
                        (23usize, 0usize),
                        (24usize, 0usize),
                        (25usize, 0usize),
                        (26usize, 0usize),
                    ],
                    vec![(7usize, 2usize)],
                    vec![(0usize, 5usize)],
                    vec![(54usize, 1usize)],
                    vec![
                        (30usize, 0usize),
                        (31usize, 0usize),
                        (32usize, 0usize),
                        (33usize, 0usize),
                        (34usize, 0usize),
                        (35usize, 0usize),
                        (36usize, 0usize),
                        (37usize, 0usize),
                        (38usize, 0usize),
                        (39usize, 0usize),
                        (40usize, 0usize),
                        (41usize, 0usize),
                        (42usize, 0usize),
                        (43usize, 0usize),
                        (44usize, 0usize),
                        (45usize, 0usize),
                        (46usize, 0usize),
                        (47usize, 0usize),
                        (48usize, 0usize),
                        (49usize, 0usize),
                        (59usize, 1usize),
                    ],
                    vec![(59usize, 2usize)],
                    vec![(59usize, 3usize)],
                    vec![(55usize, 1usize)],
                    vec![(50usize, 1usize)],
                    vec![(50usize, 2usize)],
                    vec![(50usize, 3usize)],
                    vec![(29usize, 1usize)],
                    vec![
                        (29usize, 2usize),
                        (30usize, 0usize),
                        (31usize, 0usize),
                        (32usize, 0usize),
                        (33usize, 0usize),
                        (34usize, 0usize),
                        (35usize, 0usize),
                        (36usize, 0usize),
                        (37usize, 0usize),
                        (38usize, 0usize),
                        (39usize, 0usize),
                        (40usize, 0usize),
                        (41usize, 0usize),
                        (42usize, 0usize),
                        (43usize, 0usize),
                        (44usize, 0usize),
                        (45usize, 0usize),
                        (46usize, 0usize),
                        (47usize, 0usize),
                        (48usize, 0usize),
                        (49usize, 0usize),
                    ],
                    vec![(29usize, 3usize)],
                    vec![(29usize, 4usize)],
                    vec![
                        (30usize, 0usize),
                        (31usize, 0usize),
                        (32usize, 0usize),
                        (33usize, 0usize),
                        (34usize, 0usize),
                        (35usize, 0usize),
                        (36usize, 0usize),
                        (37usize, 0usize),
                        (38usize, 0usize),
                        (39usize, 0usize),
                        (40usize, 0usize),
                        (41usize, 0usize),
                        (42usize, 0usize),
                        (43usize, 0usize),
                        (44usize, 0usize),
                        (45usize, 0usize),
                        (46usize, 0usize),
                        (47usize, 0usize),
                        (48usize, 0usize),
                        (49usize, 0usize),
                        (52usize, 1usize),
                    ],
                    vec![(52usize, 2usize)],
                    vec![(52usize, 3usize)],
                    vec![
                        (30usize, 0usize),
                        (31usize, 0usize),
                        (32usize, 0usize),
                        (33usize, 0usize),
                        (34usize, 0usize),
                        (35usize, 0usize),
                        (36usize, 0usize),
                        (37usize, 0usize),
                        (38usize, 0usize),
                        (39usize, 0usize),
                        (40usize, 0usize),
                        (41usize, 0usize),
                        (42usize, 0usize),
                        (43usize, 0usize),
                        (44usize, 0usize),
                        (45usize, 0usize),
                        (46usize, 0usize),
                        (47usize, 0usize),
                        (48usize, 0usize),
                        (49usize, 0usize),
                        (53usize, 1usize),
                    ],
                    vec![(53usize, 2usize)],
                    vec![(53usize, 3usize)],
                    vec![(70usize, 1usize)],
                    vec![(64usize, 1usize)],
                    vec![(68usize, 1usize)],
                    vec![(74usize, 1usize)],
                    vec![(74usize, 2usize)],
                    vec![
                        (0usize, 0usize),
                        (29usize, 0usize),
                        (50usize, 0usize),
                        (51usize, 0usize),
                        (52usize, 0usize),
                        (53usize, 0usize),
                        (54usize, 0usize),
                        (55usize, 0usize),
                        (56usize, 0usize),
                        (57usize, 0usize),
                        (58usize, 0usize),
                        (59usize, 0usize),
                        (60usize, 0usize),
                        (61usize, 0usize),
                        (62usize, 0usize),
                        (63usize, 0usize),
                        (64usize, 0usize),
                        (65usize, 0usize),
                        (66usize, 0usize),
                        (67usize, 0usize),
                        (68usize, 0usize),
                        (69usize, 0usize),
                        (70usize, 0usize),
                        (72usize, 0usize),
                        (72usize, 1usize),
                        (73usize, 0usize),
                        (73usize, 1usize),
                    ],
                    vec![(69usize, 1usize)],
                    vec![(67usize, 1usize)],
                    vec![(14usize, 0usize), (56usize, 1usize), (57usize, 1usize)],
                    vec![(56usize, 2usize)],
                    vec![(56usize, 3usize)],
                    vec![(14usize, 1usize), (15usize, 0usize), (16usize, 0usize)],
                    vec![
                        (12usize, 0usize),
                        (13usize, 0usize),
                        (14usize, 2usize),
                        (17usize, 0usize),
                        (18usize, 0usize),
                        (19usize, 0usize),
                        (20usize, 0usize),
                    ],
                    vec![(14usize, 3usize)],
                    vec![(14usize, 4usize)],
                    vec![(57usize, 2usize)],
                    vec![(57usize, 3usize)],
                    vec![(61usize, 1usize)],
                    vec![(63usize, 1usize)],
                    vec![(62usize, 1usize)],
                    vec![(65usize, 1usize)],
                    vec![(66usize, 1usize)],
                    vec![(73usize, 2usize)],
                    vec![(71usize, 1usize)],
                ]),
            ),
        )
        .map(
            |(shift_goto_map_term, (shift_goto_map_nonterm, (reduce_map_init, ruleset)))| {
                let mut reduce_map = ::rusty_lr_core::HashMap::default();
                for (terminal_set_id, ruleid) in reduce_map_init.into_iter() {
                    reduce_map.extend(
                        __rustylr_reduce_terminals[terminal_set_id]
                            .iter()
                            .map(|term_idx| (__rustylr_terminals[*term_idx].clone(), ruleid)),
                    );
                }
                GrammarState {
                    shift_goto_map_term: shift_goto_map_term
                        .into_iter()
                        .map(|(term_idx, goto)| (__rustylr_terminals[term_idx].clone(), goto))
                        .collect(),
                    shift_goto_map_nonterm: shift_goto_map_nonterm.into_iter().collect(),
                    reduce_map,
                    ruleset: ruleset
                        .into_iter()
                        .map(|(ruleid, shifted)| ::rusty_lr_core::ShiftedRuleRef {
                            rule: ruleid,
                            shifted,
                        })
                        .collect(),
                }
            },
        )
        .collect();
        Self { rules, states }
    }
}
impl ::rusty_lr_core::GetParser<Lexed, GrammarNonTerminals> for GrammarParser {
    fn get_rules(&self) -> &[GrammarRule] {
        &self.rules
    }
    fn get_states(&self) -> &[GrammarState] {
        &self.states
    }
}
// ==============================Generated Codes End===============================
