
// This file was generated by rustylr 1.22.0
// This generated code is targeting rusty_lr version 3.29.0.
// There might be a build error if the version is not matched.
//
// ================================User Codes Begin================================
use crate::parser::args::PatternArgs;
use crate::parser::args::GrammarArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::args::IdentOrLiteral;
use crate::parser::args::PrecDPrecArgs;
use crate::parser::args::RecoveredError;
use crate::parser::lexer::Lexed;
use crate::parser::span_pair::SpanPair;
use crate::terminalset::TerminalSet;
use crate::terminalset::TerminalSetItem;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use quote::format_ident;
use std::boxed::Box;
use rusty_lr_core::builder::ReduceType;

// =================================User Codes End=================================
/*
====================================Grammar=====================================

# of terminal classes: 44
# of states: 230

Rule -> ident RuleType colon RuleLines semicolon
RuleType -> parengroup
RuleType -> 
RuleLines -> RuleLines pipe RuleLine
RuleLines -> RuleLine
RuleLine -> TokenMapped* PrecDef* Action
PrecDef -> percent prec IdentOrLiteral
PrecDef -> percent prec error
PrecDef -> percent dprec literal
PrecDef -> percent dprec error
PrecDef -> percent error
TokenMapped -> Pattern
TokenMapped -> ident equal Pattern
TerminalSetItem -> ident
TerminalSetItem -> ident minus ident
TerminalSetItem -> ident minus error
TerminalSetItem -> literal
TerminalSetItem -> literal minus literal
TerminalSetItem -> literal minus error
TerminalSet -> lbracket caret? TerminalSetItem* rbracket
TerminalSet -> dot
Pattern -> ident
Pattern -> Pattern plus
Pattern -> Pattern star
Pattern -> Pattern question
Pattern -> Pattern exclamation
Pattern -> TerminalSet
Pattern -> Pattern slash Pattern
Pattern -> lparen $sep(Pattern*, pipe, +) rparen
Pattern -> lparen error rparen
Pattern -> literal
Pattern -> Pattern minus Pattern
Pattern -> dollar ident lparen Pattern comma Pattern comma? rparen
Pattern -> dollar ident lparen Pattern comma Pattern comma plus rparen
Pattern -> dollar ident lparen Pattern comma Pattern comma star rparen
Pattern -> dollar ident lparen Pattern comma Pattern error rparen
Pattern -> dollar ident lparen Pattern comma Pattern comma error rparen
Action -> bracegroup
Action -> 
IdentOrLiteral -> ident
IdentOrLiteral -> literal
RustCode -> [^semicolon]+
Directive -> percent token ident RustCode semicolon
Directive -> percent token ident semicolon
Directive -> percent token error semicolon
Directive -> percent start ident semicolon
Directive -> percent start error semicolon
Directive -> percent eofdef error semicolon
Directive -> percent tokentype RustCode semicolon
Directive -> percent tokentype semicolon
Directive -> percent userdata RustCode semicolon
Directive -> percent userdata semicolon
Directive -> percent left IdentOrLiteral+ semicolon
Directive -> percent left error semicolon
Directive -> percent right IdentOrLiteral+ semicolon
Directive -> percent right error semicolon
Directive -> percent precedence IdentOrLiteral+ semicolon
Directive -> percent precedence error semicolon
Directive -> percent errortype RustCode semicolon
Directive -> percent errortype semicolon
Directive -> percent moduleprefix RustCode semicolon
Directive -> percent moduleprefix semicolon
Directive -> percent glr semicolon
Directive -> percent glr error semicolon
Directive -> percent lalr semicolon
Directive -> percent lalr error semicolon
Directive -> percent nooptim semicolon
Directive -> percent nooptim error semicolon
Directive -> percent dense semicolon
Directive -> percent dense error semicolon
Directive -> percent trace ident* semicolon
Directive -> percent trace error semicolon
Directive -> percent filter RustCode semicolon
Directive -> percent filter semicolon
Directive -> percent runtime semicolon
Directive -> percent runtime error semicolon
Directive -> percent location RustCode semicolon
Directive -> percent location semicolon
Directive -> percent error semicolon
GrammarLine -> Rule
GrammarLine -> Directive
Grammar -> GrammarLine+
TokenMapped+ -> TokenMapped
TokenMapped+ -> TokenMapped+ TokenMapped
TokenMapped* -> TokenMapped+
TokenMapped* -> 
PrecDef+ -> PrecDef
PrecDef+ -> PrecDef+ PrecDef
PrecDef* -> PrecDef+
PrecDef* -> 
caret? -> caret
caret? -> 
TerminalSetItem+ -> TerminalSetItem
TerminalSetItem+ -> TerminalSetItem+ TerminalSetItem
TerminalSetItem* -> TerminalSetItem+
TerminalSetItem* -> 
Pattern+ -> Pattern
Pattern+ -> Pattern+ Pattern
Pattern* -> Pattern+
Pattern* -> 
$sep(Pattern*, pipe, +) -> Pattern*
$sep(Pattern*, pipe, +) -> $sep(Pattern*, pipe, +) pipe Pattern*
comma? -> comma
comma? -> 
[^semicolon] -> ident
[^semicolon] -> colon
[^semicolon] -> pipe
[^semicolon] -> percent
[^semicolon] -> equal
[^semicolon] -> plus
[^semicolon] -> star
[^semicolon] -> question
[^semicolon] -> caret
[^semicolon] -> minus
[^semicolon] -> exclamation
[^semicolon] -> slash
[^semicolon] -> dot
[^semicolon] -> dollar
[^semicolon] -> comma
[^semicolon] -> literal
[^semicolon] -> parengroup
[^semicolon] -> bracegroup
[^semicolon] -> lparen
[^semicolon] -> rparen
[^semicolon] -> lbracket
[^semicolon] -> rbracket
[^semicolon] -> left
[^semicolon] -> right
[^semicolon] -> token
[^semicolon] -> start
[^semicolon] -> eofdef
[^semicolon] -> tokentype
[^semicolon] -> userdata
[^semicolon] -> errortype
[^semicolon] -> moduleprefix
[^semicolon] -> lalr
[^semicolon] -> glr
[^semicolon] -> prec
[^semicolon] -> precedence
[^semicolon] -> nooptim
[^semicolon] -> dense
[^semicolon] -> trace
[^semicolon] -> dprec
[^semicolon] -> filter
[^semicolon] -> runtime
[^semicolon] -> location
[^semicolon] -> <Others>
[^semicolon]+ -> [^semicolon]
[^semicolon]+ -> [^semicolon]+ [^semicolon]
IdentOrLiteral+ -> IdentOrLiteral
IdentOrLiteral+ -> IdentOrLiteral+ IdentOrLiteral
ident+ -> ident
ident+ -> ident+ ident
ident* -> ident+
ident* -> 
GrammarLine+ -> GrammarLine
GrammarLine+ -> GrammarLine GrammarLine+
Augmented -> Grammar eof

*/
// =============================Generated Codes Begin==============================
/// type alias for `Context`
#[allow(non_camel_case_types, dead_code)]
pub type GrammarContext = ::rusty_lr_core::parser::deterministic::Context<
    GrammarDataStack,
    u8,
>;
/// type alias for CFG production rule
#[allow(non_camel_case_types, dead_code)]
pub type GrammarRule = ::rusty_lr_core::rule::ProductionRule<
    &'static str,
    GrammarNonTerminals,
>;
/// type alias for DFA state
#[allow(non_camel_case_types, dead_code)]
pub type GrammarState = ::rusty_lr_core::parser::state::SparseState<
    u8,
    GrammarNonTerminals,
    usize,
    u8,
>;
/// type alias for `ParseError`
#[allow(non_camel_case_types, dead_code)]
pub type GrammarParseError = ::rusty_lr_core::parser::deterministic::ParseError<
    GrammarDataStack,
>;
/// An enum that represents non-terminal symbols
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std::hash::Hash,
    std::cmp::PartialEq,
    std::cmp::Eq,
    std::cmp::PartialOrd,
    std::cmp::Ord
)]
pub enum GrammarNonTerminals {
    Rule,
    RuleType,
    RuleLines,
    RuleLine,
    PrecDef,
    TokenMapped,
    TerminalSetItem,
    TerminalSet,
    Pattern,
    Action,
    IdentOrLiteral,
    RustCode,
    Directive,
    GrammarLine,
    Grammar,
    _TokenMappedPlus15,
    _TokenMappedStar16,
    _PrecDefPlus17,
    _PrecDefStar18,
    _caretQuestion19,
    _TerminalSetItemPlus20,
    _TerminalSetItemStar21,
    _PatternPlus22,
    _PatternStar23,
    __PatternStar23SepPlus24,
    _commaQuestion25,
    _TermSet26,
    __TermSet26Plus27,
    _IdentOrLiteralPlus28,
    _identPlus29,
    _identStar30,
    _GrammarLinePlus31,
    Augmented,
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr_core::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl std::fmt::Debug for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr_core::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl ::rusty_lr_core::nonterminal::NonTerminal for GrammarNonTerminals {
    fn as_str(&self) -> &'static str {
        match self {
            GrammarNonTerminals::Rule => "Rule",
            GrammarNonTerminals::RuleType => "RuleType",
            GrammarNonTerminals::RuleLines => "RuleLines",
            GrammarNonTerminals::RuleLine => "RuleLine",
            GrammarNonTerminals::PrecDef => "PrecDef",
            GrammarNonTerminals::TokenMapped => "TokenMapped",
            GrammarNonTerminals::TerminalSetItem => "TerminalSetItem",
            GrammarNonTerminals::TerminalSet => "TerminalSet",
            GrammarNonTerminals::Pattern => "Pattern",
            GrammarNonTerminals::Action => "Action",
            GrammarNonTerminals::IdentOrLiteral => "IdentOrLiteral",
            GrammarNonTerminals::RustCode => "RustCode",
            GrammarNonTerminals::Directive => "Directive",
            GrammarNonTerminals::GrammarLine => "GrammarLine",
            GrammarNonTerminals::Grammar => "Grammar",
            GrammarNonTerminals::_TokenMappedPlus15 => "TokenMapped+",
            GrammarNonTerminals::_TokenMappedStar16 => "TokenMapped*",
            GrammarNonTerminals::_PrecDefPlus17 => "PrecDef+",
            GrammarNonTerminals::_PrecDefStar18 => "PrecDef*",
            GrammarNonTerminals::_caretQuestion19 => "caret?",
            GrammarNonTerminals::_TerminalSetItemPlus20 => "TerminalSetItem+",
            GrammarNonTerminals::_TerminalSetItemStar21 => "TerminalSetItem*",
            GrammarNonTerminals::_PatternPlus22 => "Pattern+",
            GrammarNonTerminals::_PatternStar23 => "Pattern*",
            GrammarNonTerminals::__PatternStar23SepPlus24 => "$sep(Pattern*, pipe, +)",
            GrammarNonTerminals::_commaQuestion25 => "comma?",
            GrammarNonTerminals::_TermSet26 => "[^semicolon]",
            GrammarNonTerminals::__TermSet26Plus27 => "[^semicolon]+",
            GrammarNonTerminals::_IdentOrLiteralPlus28 => "IdentOrLiteral+",
            GrammarNonTerminals::_identPlus29 => "ident+",
            GrammarNonTerminals::_identStar30 => "ident*",
            GrammarNonTerminals::_GrammarLinePlus31 => "GrammarLine+",
            GrammarNonTerminals::Augmented => "Augmented",
        }
    }
    fn is_trace(&self) -> bool {
        match self {
            GrammarNonTerminals::Rule => false,
            GrammarNonTerminals::RuleType => false,
            GrammarNonTerminals::RuleLines => false,
            GrammarNonTerminals::RuleLine => false,
            GrammarNonTerminals::PrecDef => false,
            GrammarNonTerminals::TokenMapped => false,
            GrammarNonTerminals::TerminalSetItem => false,
            GrammarNonTerminals::TerminalSet => false,
            GrammarNonTerminals::Pattern => false,
            GrammarNonTerminals::Action => false,
            GrammarNonTerminals::IdentOrLiteral => false,
            GrammarNonTerminals::RustCode => false,
            GrammarNonTerminals::Directive => false,
            GrammarNonTerminals::GrammarLine => false,
            GrammarNonTerminals::Grammar => false,
            GrammarNonTerminals::_TokenMappedPlus15 => false,
            GrammarNonTerminals::_TokenMappedStar16 => false,
            GrammarNonTerminals::_PrecDefPlus17 => false,
            GrammarNonTerminals::_PrecDefStar18 => false,
            GrammarNonTerminals::_caretQuestion19 => false,
            GrammarNonTerminals::_TerminalSetItemPlus20 => false,
            GrammarNonTerminals::_TerminalSetItemStar21 => false,
            GrammarNonTerminals::_PatternPlus22 => false,
            GrammarNonTerminals::_PatternStar23 => false,
            GrammarNonTerminals::__PatternStar23SepPlus24 => false,
            GrammarNonTerminals::_commaQuestion25 => false,
            GrammarNonTerminals::_TermSet26 => false,
            GrammarNonTerminals::__TermSet26Plus27 => false,
            GrammarNonTerminals::_IdentOrLiteralPlus28 => false,
            GrammarNonTerminals::_identPlus29 => false,
            GrammarNonTerminals::_identStar30 => false,
            GrammarNonTerminals::_GrammarLinePlus31 => false,
            GrammarNonTerminals::Augmented => false,
        }
    }
    fn nonterm_type(&self) -> Option<::rusty_lr_core::nonterminal::NonTerminalType> {
        match self {
            GrammarNonTerminals::Rule => None,
            GrammarNonTerminals::RuleType => None,
            GrammarNonTerminals::RuleLines => None,
            GrammarNonTerminals::RuleLine => None,
            GrammarNonTerminals::PrecDef => None,
            GrammarNonTerminals::TokenMapped => None,
            GrammarNonTerminals::TerminalSetItem => None,
            GrammarNonTerminals::TerminalSet => None,
            GrammarNonTerminals::Pattern => None,
            GrammarNonTerminals::Action => None,
            GrammarNonTerminals::IdentOrLiteral => None,
            GrammarNonTerminals::RustCode => None,
            GrammarNonTerminals::Directive => None,
            GrammarNonTerminals::GrammarLine => None,
            GrammarNonTerminals::Grammar => None,
            GrammarNonTerminals::_TokenMappedPlus15 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_TokenMappedStar16 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::Star)
            }
            GrammarNonTerminals::_PrecDefPlus17 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_PrecDefStar18 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::Star)
            }
            GrammarNonTerminals::_caretQuestion19 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::Optional)
            }
            GrammarNonTerminals::_TerminalSetItemPlus20 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_TerminalSetItemStar21 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::Star)
            }
            GrammarNonTerminals::_PatternPlus22 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_PatternStar23 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::Star)
            }
            GrammarNonTerminals::__PatternStar23SepPlus24 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_commaQuestion25 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::Optional)
            }
            GrammarNonTerminals::_TermSet26 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::TerminalSet)
            }
            GrammarNonTerminals::__TermSet26Plus27 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_IdentOrLiteralPlus28 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_identPlus29 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_identStar30 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::Star)
            }
            GrammarNonTerminals::_GrammarLinePlus31 => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::PlusRight)
            }
            GrammarNonTerminals::Augmented => {
                Some(::rusty_lr_core::nonterminal::NonTerminalType::Augmented)
            }
        }
    }
    fn to_usize(&self) -> usize {
        *self as usize
    }
}
/// tag for token that represents which stack a token is using
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
#[derive(Clone, Copy, PartialEq, Eq)]
pub enum GrammarTags {
    Empty,
    __terminals,
    __stack2,
    __stack3,
    __stack4,
    __stack5,
    __stack6,
    __stack7,
    __stack8,
    __stack9,
    __stack10,
    __stack11,
    __stack12,
    __stack13,
    __stack14,
    __stack15,
    __stack16,
    __stack17,
    __stack18,
    __stack19,
    __stack20,
}
/// enum for each non-terminal and terminal symbol, that actually hold data
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
pub struct GrammarDataStack {
    pub __tags: Vec<GrammarTags>,
    __terminals: Vec<Lexed>,
    __stack2: Vec<RuleDefArgs>,
    __stack3: Vec<Option<Group>>,
    __stack4: Vec<Vec<RuleLineArgs>>,
    __stack5: Vec<RuleLineArgs>,
    __stack6: Vec<PrecDPrecArgs>,
    __stack7: Vec<(Option<Ident>, PatternArgs)>,
    __stack8: Vec<TerminalSetItem>,
    __stack9: Vec<TerminalSet>,
    __stack10: Vec<PatternArgs>,
    __stack11: Vec<IdentOrLiteral>,
    __stack12: Vec<TokenStream>,
    __stack13: Vec<Vec<(Option<Ident>, PatternArgs)>>,
    __stack14: Vec<Vec<PrecDPrecArgs>>,
    __stack15: Vec<Option<Lexed>>,
    __stack16: Vec<Vec<TerminalSetItem>>,
    __stack17: Vec<Vec<PatternArgs>>,
    __stack18: Vec<Vec<Vec<PatternArgs>>>,
    __stack19: Vec<Vec<Lexed>>,
    __stack20: Vec<Vec<IdentOrLiteral>>,
}
impl Default for GrammarDataStack {
    fn default() -> Self {
        Self {
            __tags: Vec::new(),
            __terminals: Vec::new(),
            __stack2: Vec::new(),
            __stack3: Vec::new(),
            __stack4: Vec::new(),
            __stack5: Vec::new(),
            __stack6: Vec::new(),
            __stack7: Vec::new(),
            __stack8: Vec::new(),
            __stack9: Vec::new(),
            __stack10: Vec::new(),
            __stack11: Vec::new(),
            __stack12: Vec::new(),
            __stack13: Vec::new(),
            __stack14: Vec::new(),
            __stack15: Vec::new(),
            __stack16: Vec::new(),
            __stack17: Vec::new(),
            __stack18: Vec::new(),
            __stack19: Vec::new(),
            __stack20: Vec::new(),
        }
    }
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl GrammarDataStack {
    ///Rule -> ident RuleType colon RuleLines semicolon
    #[inline]
    fn reduce_Rule_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__stack3)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(GrammarTags::__stack2);
        let mut RuleType = __data_stack.__stack3.pop().unwrap();
        let mut RuleLines = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_colon = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("Rule-Ident");
            };
            let span = __rustylr_location_colon.span();
            if let Some(fisrt) = RuleLines.first_mut() {
                fisrt.separator_span = span;
            }
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.stream()),
                rule_lines: RuleLines,
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(())
    }
    ///RuleType -> parengroup
    #[inline]
    fn reduce_RuleType_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack3);
        let mut parengroup = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::ParenGroup(group) = parengroup else {
                unreachable!("RuleType - Group");
            };
            Some(group)
        };
        __data_stack.__stack3.push(__res);
        Ok(())
    }
    ///RuleType ->
    #[inline]
    fn reduce_RuleType_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack3);
        let __res = { None };
        __data_stack.__stack3.push(__res);
        Ok(())
    }
    ///RuleLines -> RuleLines pipe RuleLine
    #[inline]
    fn reduce_RuleLines_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack5)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__stack4)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut RuleLines = __data_stack.__stack4.pop().unwrap();
        let mut RuleLine = __data_stack.__stack5.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_pipe = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            RuleLine.separator_span = __rustylr_location_pipe.span();
            RuleLines.push(RuleLine);
            RuleLines
        };
        __data_stack.__stack4.push(__res);
        Ok(())
    }
    ///RuleLines -> RuleLine
    #[inline]
    fn reduce_RuleLines_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack5)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack4);
        let mut RuleLine = __data_stack.__stack5.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![RuleLine] };
        __data_stack.__stack4.push(__res);
        Ok(())
    }
    ///RuleLine -> TokenMapped* PrecDef* Action
    #[inline]
    fn reduce_RuleLine_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack3)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack14)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__stack13)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack5);
        let mut TokenMapped = __data_stack.__stack13.pop().unwrap();
        let mut PrecDef = __data_stack.__stack14.pop().unwrap();
        let mut Action = __data_stack.__stack3.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
                separator_span: Span::call_site(),
                precs: PrecDef,
                prec: None,
                dprec: None,
            }
        };
        __data_stack.__stack5.push(__res);
        Ok(())
    }
    ///PrecDef -> percent prec IdentOrLiteral
    #[inline]
    fn reduce_PrecDef_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack11)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack6);
        let mut IdentOrLiteral = __data_stack.__stack11.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = { PrecDPrecArgs::Prec(IdentOrLiteral) };
        __data_stack.__stack6.push(__res);
        Ok(())
    }
    ///PrecDef -> percent prec error
    #[inline]
    fn reduce_PrecDef_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack6);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected <ident> to token or <literal>".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#operator-precedence"
                        .to_string(),
                    span: __rustylr_location_error,
                });
            PrecDPrecArgs::None
        };
        __data_stack.__stack6.push(__res);
        Ok(())
    }
    ///PrecDef -> percent dprec literal
    #[inline]
    fn reduce_PrecDef_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack6);
        let mut literal = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            let Lexed::Literal(literal) = literal else {
                unreachable!("PrecDPrecArgs-DPrec");
            };
            PrecDPrecArgs::DPrec(literal)
        };
        __data_stack.__stack6.push(__res);
        Ok(())
    }
    ///PrecDef -> percent dprec error
    #[inline]
    fn reduce_PrecDef_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack6);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected integer literal".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#rule-priority"
                        .to_string(),
                    span: __rustylr_location_error,
                });
            PrecDPrecArgs::None
        };
        __data_stack.__stack6.push(__res);
        Ok(())
    }
    ///PrecDef -> percent error
    #[inline]
    fn reduce_PrecDef_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(GrammarTags::__stack6);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected %prec or %dprec".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#operator-precedence"
                        .to_string(),
                    span: __rustylr_location_error,
                });
            PrecDPrecArgs::None
        };
        __data_stack.__stack6.push(__res);
        Ok(())
    }
    ///TokenMapped -> Pattern
    #[inline]
    fn reduce_TokenMapped_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack7);
        let mut Pattern = __data_stack.__stack10.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { (None, Pattern) };
        __data_stack.__stack7.push(__res);
        Ok(())
    }
    ///TokenMapped -> ident equal Pattern
    #[inline]
    fn reduce_TokenMapped_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack7);
        let mut Pattern = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("Token-Ident");
            };
            (Some(ident), Pattern)
        };
        __data_stack.__stack7.push(__res);
        Ok(())
    }
    ///TerminalSetItem -> ident
    #[inline]
    fn reduce_TerminalSetItem_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack8);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("TerminalSetItem-Range1");
            };
            TerminalSetItem::Terminal(ident)
        };
        __data_stack.__stack8.push(__res);
        Ok(())
    }
    ///TerminalSetItem -> ident minus ident
    #[inline]
    fn reduce_TerminalSetItem_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack8);
        let mut last = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut first = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            let Lexed::Ident(first) = first else {
                unreachable!("TerminalSetItem-Range1");
            };
            let Lexed::Ident(last) = last else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::Range(first, last)
        };
        __data_stack.__stack8.push(__res);
        Ok(())
    }
    ///TerminalSetItem -> ident minus error
    #[inline]
    fn reduce_TerminalSetItem_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack8);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected ident for terminal set".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                        .to_string(),
                    span: __rustylr_location_error,
                });
            TerminalSetItem::Terminal(format_ident!("dummy"))
        };
        __data_stack.__stack8.push(__res);
        Ok(())
    }
    ///TerminalSetItem -> literal
    #[inline]
    fn reduce_TerminalSetItem_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack8);
        let mut literal = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Literal(literal) = literal else {
                unreachable!("TerminalSetItem-Literal");
            };
            TerminalSetItem::Literal(literal)
        };
        __data_stack.__stack8.push(__res);
        Ok(())
    }
    ///TerminalSetItem -> literal minus literal
    #[inline]
    fn reduce_TerminalSetItem_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack8);
        let mut last = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut first = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            let Lexed::Literal(first) = first else {
                unreachable!("TerminalSetItem-Range1");
            };
            let Lexed::Literal(last) = last else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::LiteralRange(first, last)
        };
        __data_stack.__stack8.push(__res);
        Ok(())
    }
    ///TerminalSetItem -> literal minus error
    #[inline]
    fn reduce_TerminalSetItem_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack8);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected literal for terminal set".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                        .to_string(),
                    span: __rustylr_location_error,
                });
            TerminalSetItem::Terminal(format_ident!("dummy"))
        };
        __data_stack.__stack8.push(__res);
        Ok(())
    }
    ///TerminalSet -> lbracket caret? TerminalSetItem* rbracket
    #[inline]
    fn reduce_TerminalSet_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack16)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__stack15)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::__stack9);
        let mut caret = __data_stack.__stack15.pop().unwrap();
        let mut TerminalSetItem = __data_stack.__stack16.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        let mut __rustylr_location_rbracket = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_lbracket = __location_stack.pop().unwrap();
        let __res = {
            TerminalSet {
                negate: caret.is_some(),
                items: TerminalSetItem,
                open_span: __rustylr_location_lbracket.span(),
                close_span: __rustylr_location_rbracket.span(),
            }
        };
        __data_stack.__stack9.push(__res);
        Ok(())
    }
    ///TerminalSet -> dot
    #[inline]
    fn reduce_TerminalSet_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack9);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut __rustylr_location_dot = __location_stack.pop().unwrap();
        let __res = {
            let span = __rustylr_location_dot.span();
            TerminalSet {
                negate: true,
                items: vec![],
                open_span: span,
                close_span: span,
            }
        };
        __data_stack.__stack9.push(__res);
        Ok(())
    }
    ///Pattern -> ident
    #[inline]
    fn reduce_Pattern_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("Pattern-Ident");
            };
            PatternArgs::Ident(ident)
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> Pattern plus
    #[inline]
    fn reduce_Pattern_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Pattern = __data_stack.__stack10.pop().unwrap();
        let mut plus = __data_stack.__terminals.pop().unwrap();
        let mut __rustylr_location_plus = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Plus(plus) = plus else {
                unreachable!("Pattern-Plus");
            };
            PatternArgs::Plus(Box::new(Pattern), __rustylr_location_plus.span())
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> Pattern star
    #[inline]
    fn reduce_Pattern_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Pattern = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut __rustylr_location_star = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            PatternArgs::Star(Box::new(Pattern), __rustylr_location_star.span())
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> Pattern question
    #[inline]
    fn reduce_Pattern_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Pattern = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut __rustylr_location_question = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            PatternArgs::Question(Box::new(Pattern), __rustylr_location_question.span())
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> Pattern exclamation
    #[inline]
    fn reduce_Pattern_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Pattern = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut __rustylr_location_exclamation = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            PatternArgs::Exclamation(
                Box::new(Pattern),
                __rustylr_location_exclamation.span(),
            )
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> TerminalSet
    #[inline]
    fn reduce_Pattern_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack9)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut TerminalSet = __data_stack.__stack9.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { PatternArgs::TerminalSet(TerminalSet) };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> Pattern slash Pattern
    #[inline]
    fn reduce_Pattern_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut lh = __data_stack.__stack10.pop().unwrap();
        let mut p1 = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = { PatternArgs::Lookaheads(Box::new(p1), Box::new(lh)) };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> lparen $sep(Pattern*, pipe, +) rparen
    #[inline]
    fn reduce_Pattern_7(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack18)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut Pattern = __data_stack.__stack18.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        let mut __rustylr_location_rparen = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_lparen = __location_stack.pop().unwrap();
        let __res = {
            PatternArgs::Group(
                Pattern,
                __rustylr_location_lparen.span(),
                __rustylr_location_rparen.span(),
            )
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> lparen error rparen
    #[inline]
    fn reduce_Pattern_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            data.error_recovered
                .push(RecoveredError {
                    message: "syntax error when parsing GROUP".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                        .to_string(),
                    span: __rustylr_location_error,
                });
            PatternArgs::Ident(format_ident!("dummy"))
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> literal
    #[inline]
    fn reduce_Pattern_9(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut literal = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Literal(literal) = literal else {
                unreachable!("Pattern-Literal");
            };
            PatternArgs::Literal(literal)
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> Pattern minus Pattern
    #[inline]
    fn reduce_Pattern_10(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut p2 = __data_stack.__stack10.pop().unwrap();
        let mut p1 = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = { PatternArgs::Minus(Box::new(p1), Box::new(p2)) };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> dollar ident lparen Pattern comma Pattern comma? rparen
    #[inline]
    fn reduce_Pattern_11(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack15)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 6usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 7usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 8usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut del = __data_stack.__stack10.pop().unwrap();
        let mut base = __data_stack.__stack10.pop().unwrap();
        __data_stack.__stack15.truncate(__data_stack.__stack15.len() - 1usize);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 6usize);
        let mut __rustylr_location_ident = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("Pattern-Sep-Ident");
            };
            if ident != "sep" {
                data.error_recovered
                    .push(RecoveredError {
                        message: "Expected $sep".to_string(),
                        link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                            .to_string(),
                        span: __rustylr_location_ident,
                    });
            }
            PatternArgs::Sep(Box::new(base), Box::new(del), false, *__rustylr_location0)
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> dollar ident lparen Pattern comma Pattern comma plus rparen
    #[inline]
    fn reduce_Pattern_12(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 6usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 7usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 8usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 9usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut del = __data_stack.__stack10.pop().unwrap();
        let mut base = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 5usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 7usize);
        let mut __rustylr_location_ident = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("Pattern-Sep-Ident");
            };
            if ident != "sep" {
                data.error_recovered
                    .push(RecoveredError {
                        message: "Expected $sep".to_string(),
                        link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                            .to_string(),
                        span: __rustylr_location_ident,
                    });
            }
            PatternArgs::Sep(Box::new(base), Box::new(del), true, *__rustylr_location0)
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> dollar ident lparen Pattern comma Pattern comma star rparen
    #[inline]
    fn reduce_Pattern_13(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 6usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 7usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 8usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 9usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut del = __data_stack.__stack10.pop().unwrap();
        let mut base = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 5usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 7usize);
        let mut __rustylr_location_ident = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("Pattern-Sep-Ident");
            };
            if ident != "sep" {
                data.error_recovered
                    .push(RecoveredError {
                        message: "Expected $sep".to_string(),
                        link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                            .to_string(),
                        span: __rustylr_location_ident,
                    });
            }
            PatternArgs::Sep(Box::new(base), Box::new(del), false, *__rustylr_location0)
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> dollar ident lparen Pattern comma Pattern error rparen
    #[inline]
    fn reduce_Pattern_14(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 6usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 7usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 8usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut del = __data_stack.__stack10.pop().unwrap();
        let mut base = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 4usize);
        let mut __rustylr_location_ident = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("Pattern-Sep-Ident");
            };
            if ident != "sep" {
                data.error_recovered
                    .push(RecoveredError {
                        message: "Expected $sep".to_string(),
                        link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                            .to_string(),
                        span: __rustylr_location_ident,
                    });
            }
            data.error_recovered
                .push(RecoveredError {
                    message: "Unexpected $sep arguments".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                        .to_string(),
                    span: __rustylr_location_error,
                });
            PatternArgs::Sep(Box::new(base), Box::new(del), false, *__rustylr_location0)
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Pattern -> dollar ident lparen Pattern comma Pattern comma error rparen
    #[inline]
    fn reduce_Pattern_15(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 6usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 7usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 8usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 9usize);
        __data_stack.__tags.push(GrammarTags::__stack10);
        let mut del = __data_stack.__stack10.pop().unwrap();
        let mut base = __data_stack.__stack10.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 4usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 5usize);
        let mut __rustylr_location_ident = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("Pattern-Sep-Ident");
            };
            if ident != "sep" {
                data.error_recovered
                    .push(RecoveredError {
                        message: "Expected $sep".to_string(),
                        link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                            .to_string(),
                        span: __rustylr_location_ident,
                    });
            }
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected '+' or '*' repetition".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#patterns"
                        .to_string(),
                    span: __rustylr_location_error,
                });
            PatternArgs::Sep(Box::new(base), Box::new(del), false, *__rustylr_location0)
        };
        __data_stack.__stack10.push(__res);
        Ok(())
    }
    ///Action -> bracegroup
    #[inline]
    fn reduce_Action_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack3);
        let mut bracegroup = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::BraceGroup(group) = bracegroup else {
                unreachable!("Action0");
            };
            Some(group)
        };
        __data_stack.__stack3.push(__res);
        Ok(())
    }
    ///Action ->
    #[inline]
    fn reduce_Action_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack3);
        let __res = { None };
        __data_stack.__stack3.push(__res);
        Ok(())
    }
    ///IdentOrLiteral -> ident
    #[inline]
    fn reduce_IdentOrLiteral_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack11);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Ident(ident) = ident else {
                unreachable!("IdentOrLiteral-Ident");
            };
            IdentOrLiteral::Ident(ident)
        };
        __data_stack.__stack11.push(__res);
        Ok(())
    }
    ///IdentOrLiteral -> literal
    #[inline]
    fn reduce_IdentOrLiteral_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack11);
        let mut literal = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Lexed::Literal(literal) = literal else {
                unreachable!("IdentOrLiteral-Literal");
            };
            IdentOrLiteral::Literal(literal)
        };
        __data_stack.__stack11.push(__res);
        Ok(())
    }
    ///RustCode -> [^semicolon]+
    #[inline]
    fn reduce_RustCode_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack19)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack12);
        let mut t = __data_stack.__stack19.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                token.append_to_stream(&mut tokens);
            }
            tokens
        };
        __data_stack.__stack12.push(__res);
        Ok(())
    }
    ///Directive -> percent token ident RustCode semicolon
    #[inline]
    fn reduce_Directive_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack12)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut RustCode = __data_stack.__stack12.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        {
            let Lexed::Ident(ident) = ident else {
                unreachable!("TokenDef-Ident");
            };
            data.terminals.push((ident, RustCode));
        }
        Ok(())
    }
    ///Directive -> percent token ident semicolon
    #[inline]
    fn reduce_Directive_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 4usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_ident = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected token definition".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#token-definition-must-defined"
                        .to_string(),
                    span: __rustylr_location_ident,
                });
        }
        Ok(())
    }
    ///Directive -> percent token error semicolon
    #[inline]
    fn reduce_Directive_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected token name".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#token-definition-must-defined"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent start ident semicolon
    #[inline]
    fn reduce_Directive_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        {
            let Lexed::Ident(ident) = ident else {
                unreachable!("StartDef-Ident");
            };
            data.start_rule_name.push(ident);
        }
        Ok(())
    }
    ///Directive -> percent start error semicolon
    #[inline]
    fn reduce_Directive_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected start rule name".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#start-symbol-must-defined"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent eofdef error semicolon
    #[inline]
    fn reduce_Directive_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_eofdef = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "%eof directive is deprecated. You don't need to define an eof token explicitly"
                        .to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md"
                        .to_string(),
                    span: __rustylr_location_eofdef,
                });
        }
        Ok(())
    }
    ///Directive -> percent tokentype RustCode semicolon
    #[inline]
    fn reduce_Directive_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack12)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut RustCode = __data_stack.__stack12.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_tokentype = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.token_typename.push((__rustylr_location_tokentype.span(), RustCode));
        }
        Ok(())
    }
    ///Directive -> percent tokentype semicolon
    #[inline]
    fn reduce_Directive_7(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_tokentype = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected token type definition".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#token-type-must-defined"
                        .to_string(),
                    span: __rustylr_location_tokentype,
                });
        }
        Ok(())
    }
    ///Directive -> percent userdata RustCode semicolon
    #[inline]
    fn reduce_Directive_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack12)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut RustCode = __data_stack.__stack12.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_userdata = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.userdata_typename.push((__rustylr_location_userdata.span(), RustCode));
        }
        Ok(())
    }
    ///Directive -> percent userdata semicolon
    #[inline]
    fn reduce_Directive_9(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_userdata = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected userdata definition".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#userdata-type-optional"
                        .to_string(),
                    span: __rustylr_location_userdata,
                });
        }
        Ok(())
    }
    ///Directive -> percent left IdentOrLiteral+ semicolon
    #[inline]
    fn reduce_Directive_10(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack20)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut IdentOrLiteral = __data_stack.__stack20.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_left = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.precedences
                .push((
                    __rustylr_location_left.span(),
                    Some(ReduceType::Left),
                    IdentOrLiteral,
                ));
        }
        Ok(())
    }
    ///Directive -> percent left error semicolon
    #[inline]
    fn reduce_Directive_11(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected <ident> to token or <literal>".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#operator-precedence"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent right IdentOrLiteral+ semicolon
    #[inline]
    fn reduce_Directive_12(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack20)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut IdentOrLiteral = __data_stack.__stack20.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_right = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.precedences
                .push((
                    __rustylr_location_right.span(),
                    Some(ReduceType::Right),
                    IdentOrLiteral,
                ));
        }
        Ok(())
    }
    ///Directive -> percent right error semicolon
    #[inline]
    fn reduce_Directive_13(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected <ident> to token or <literal>".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#operator-precedence"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent precedence IdentOrLiteral+ semicolon
    #[inline]
    fn reduce_Directive_14(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack20)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut IdentOrLiteral = __data_stack.__stack20.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_precedence = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.precedences
                .push((__rustylr_location_precedence.span(), None, IdentOrLiteral));
        }
        Ok(())
    }
    ///Directive -> percent precedence error semicolon
    #[inline]
    fn reduce_Directive_15(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected <ident> to token or <literal>".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#operator-precedence"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent errortype RustCode semicolon
    #[inline]
    fn reduce_Directive_16(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack12)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut RustCode = __data_stack.__stack12.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_errortype = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_typename.push((__rustylr_location_errortype.span(), RustCode));
        }
        Ok(())
    }
    ///Directive -> percent errortype semicolon
    #[inline]
    fn reduce_Directive_17(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_errortype = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected error type definition".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#error-type-optional"
                        .to_string(),
                    span: __rustylr_location_errortype,
                });
        }
        Ok(())
    }
    ///Directive -> percent moduleprefix RustCode semicolon
    #[inline]
    fn reduce_Directive_18(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack12)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut RustCode = __data_stack.__stack12.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let mut __rustylr_location_moduleprefix = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.module_prefix.push((__rustylr_location_moduleprefix.span(), RustCode));
        }
        Ok(())
    }
    ///Directive -> percent moduleprefix semicolon
    #[inline]
    fn reduce_Directive_19(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_moduleprefix = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected moduleprefix definition".to_string(),
                    link: "This is hidden directive, user must not use this explicitly"
                        .to_string(),
                    span: __rustylr_location_moduleprefix,
                });
        }
        Ok(())
    }
    ///Directive -> percent glr semicolon
    #[inline]
    fn reduce_Directive_20(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut glr = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        {
            data.glr = true;
        }
        Ok(())
    }
    ///Directive -> percent glr error semicolon
    #[inline]
    fn reduce_Directive_21(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected semicolon".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#glr-parser-generation"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent lalr semicolon
    #[inline]
    fn reduce_Directive_22(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut lalr = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        {
            data.lalr = true;
        }
        Ok(())
    }
    ///Directive -> percent lalr error semicolon
    #[inline]
    fn reduce_Directive_23(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected semicolon".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#lalr-parser-generation"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent nooptim semicolon
    #[inline]
    fn reduce_Directive_24(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        {
            data.no_optim = true;
        }
        Ok(())
    }
    ///Directive -> percent nooptim error semicolon
    #[inline]
    fn reduce_Directive_25(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected semicolon".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#no-optimization"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent dense semicolon
    #[inline]
    fn reduce_Directive_26(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut dense = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        {
            data.dense = true;
        }
        Ok(())
    }
    ///Directive -> percent dense error semicolon
    #[inline]
    fn reduce_Directive_27(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected semicolon".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#dense-parser-table"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent trace ident* semicolon
    #[inline]
    fn reduce_Directive_28(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack19)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut ident = __data_stack.__stack19.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        {
            let idents = ident
                .into_iter()
                .map(|t| {
                    let Lexed::Ident(ident) = t else {
                        unreachable!("Trace-Ident");
                    };
                    ident
                });
            data.traces.extend(idents);
        }
        Ok(())
    }
    ///Directive -> percent trace error semicolon
    #[inline]
    fn reduce_Directive_29(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected ident".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#tracing-non-terminals"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent filter RustCode semicolon
    #[inline]
    fn reduce_Directive_30(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack12)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut RustCode = __data_stack.__stack12.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut filter = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        {
            data.filter = Some(RustCode);
        }
        Ok(())
    }
    ///Directive -> percent filter semicolon
    #[inline]
    fn reduce_Directive_31(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_filter = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected filter definition".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#filter-directive"
                        .to_string(),
                    span: __rustylr_location_filter,
                });
        }
        Ok(())
    }
    ///Directive -> percent runtime semicolon
    #[inline]
    fn reduce_Directive_32(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        {
            data.compiled = false;
        }
        Ok(())
    }
    ///Directive -> percent runtime error semicolon
    #[inline]
    fn reduce_Directive_33(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected semicolon".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#runtime-table-calculation"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///Directive -> percent location RustCode semicolon
    #[inline]
    fn reduce_Directive_34(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack12)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut RustCode = __data_stack.__stack12.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        {
            data.location_typename = Some(RustCode);
        }
        Ok(())
    }
    ///Directive -> percent location semicolon
    #[inline]
    fn reduce_Directive_35(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_location = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected location type definition".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#location-tracking"
                        .to_string(),
                    span: __rustylr_location_location,
                });
        }
        Ok(())
    }
    ///Directive -> percent error semicolon
    #[inline]
    fn reduce_Directive_36(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.error_recovered
                .push(RecoveredError {
                    message: "Expected directive, e.g. %token, %start, ...".to_string(),
                    link: "https://github.com/ehwan/RustyLR/blob/main/SYNTAX.md#syntax"
                        .to_string(),
                    span: __rustylr_location_error,
                });
        }
        Ok(())
    }
    ///GrammarLine -> Rule
    #[inline]
    fn reduce_GrammarLine_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::Empty);
        let mut Rule = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            data.rules.push(Rule);
        }
        Ok(())
    }
    ///GrammarLine -> Directive
    #[inline(always)]
    fn reduce_GrammarLine_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///Grammar -> GrammarLine+
    #[inline(always)]
    fn reduce_Grammar_0(__data_stack: &mut Self, __location_stack: &mut Vec<SpanPair>) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///TokenMapped+ -> TokenMapped
    #[inline]
    fn reduce__TokenMappedPlus15_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack13);
        let mut A = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack13.push(__res);
        Ok(())
    }
    ///TokenMapped+ -> TokenMapped+ TokenMapped
    #[inline]
    fn reduce__TokenMappedPlus15_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack13)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack13.pop().unwrap();
        let mut A = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack13.push(__res);
        Ok(())
    }
    ///TokenMapped* -> TokenMapped+
    #[inline(always)]
    fn reduce__TokenMappedStar16_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///TokenMapped* ->
    #[inline]
    fn reduce__TokenMappedStar16_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack13);
        let __res = { vec![] };
        __data_stack.__stack13.push(__res);
        Ok(())
    }
    ///PrecDef+ -> PrecDef
    #[inline]
    fn reduce__PrecDefPlus17_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack6)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack14);
        let mut A = __data_stack.__stack6.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack14.push(__res);
        Ok(())
    }
    ///PrecDef+ -> PrecDef+ PrecDef
    #[inline]
    fn reduce__PrecDefPlus17_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack6)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack14)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack14.pop().unwrap();
        let mut A = __data_stack.__stack6.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack14.push(__res);
        Ok(())
    }
    ///PrecDef* -> PrecDef+
    #[inline(always)]
    fn reduce__PrecDefStar18_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///PrecDef* ->
    #[inline]
    fn reduce__PrecDefStar18_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack14);
        let __res = { vec![] };
        __data_stack.__stack14.push(__res);
        Ok(())
    }
    ///caret? -> caret
    #[inline]
    fn reduce__caretQuestion19_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack15);
        let mut A = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = Some(A);
        __data_stack.__stack15.push(__res);
        Ok(())
    }
    ///caret? ->
    #[inline]
    fn reduce__caretQuestion19_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack15);
        let __res = { None };
        __data_stack.__stack15.push(__res);
        Ok(())
    }
    ///TerminalSetItem+ -> TerminalSetItem
    #[inline]
    fn reduce__TerminalSetItemPlus20_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack8)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack16);
        let mut A = __data_stack.__stack8.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack16.push(__res);
        Ok(())
    }
    ///TerminalSetItem+ -> TerminalSetItem+ TerminalSetItem
    #[inline]
    fn reduce__TerminalSetItemPlus20_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack8)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack16)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack16.pop().unwrap();
        let mut A = __data_stack.__stack8.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack16.push(__res);
        Ok(())
    }
    ///TerminalSetItem* -> TerminalSetItem+
    #[inline(always)]
    fn reduce__TerminalSetItemStar21_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///TerminalSetItem* ->
    #[inline]
    fn reduce__TerminalSetItemStar21_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack16);
        let __res = { vec![] };
        __data_stack.__stack16.push(__res);
        Ok(())
    }
    ///Pattern+ -> Pattern
    #[inline]
    fn reduce__PatternPlus22_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack17);
        let mut A = __data_stack.__stack10.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack17.push(__res);
        Ok(())
    }
    ///Pattern+ -> Pattern+ Pattern
    #[inline]
    fn reduce__PatternPlus22_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack10)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack17)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut A = __data_stack.__stack10.pop().unwrap();
        let mut Ap = __data_stack.__stack17.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack17.push(__res);
        Ok(())
    }
    ///Pattern* -> Pattern+
    #[inline(always)]
    fn reduce__PatternStar23_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///Pattern* ->
    #[inline]
    fn reduce__PatternStar23_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack17);
        let __res = { vec![] };
        __data_stack.__stack17.push(__res);
        Ok(())
    }
    ///$sep(Pattern*, pipe, +) -> Pattern*
    #[inline]
    fn reduce___PatternStar23SepPlus24_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack17)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack18);
        let mut __token0 = __data_stack.__stack17.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![__token0] };
        __data_stack.__stack18.push(__res);
        Ok(())
    }
    ///$sep(Pattern*, pipe, +) -> $sep(Pattern*, pipe, +) pipe Pattern*
    #[inline]
    fn reduce___PatternStar23SepPlus24_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack17)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                GrammarTags::__stack18)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut __token1 = __data_stack.__stack17.pop().unwrap();
        let mut __token0 = __data_stack.__stack18.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            __token0.push(__token1);
            __token0
        };
        __data_stack.__stack18.push(__res);
        Ok(())
    }
    ///comma? -> comma
    #[inline]
    fn reduce__commaQuestion25_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack15);
        let mut A = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = Some(A);
        __data_stack.__stack15.push(__res);
        Ok(())
    }
    ///comma? ->
    #[inline]
    fn reduce__commaQuestion25_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack15);
        let __res = { None };
        __data_stack.__stack15.push(__res);
        Ok(())
    }
    ///[^semicolon] -> ident
    #[inline(always)]
    fn reduce__TermSet26_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> colon
    #[inline(always)]
    fn reduce__TermSet26_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> pipe
    #[inline(always)]
    fn reduce__TermSet26_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> percent
    #[inline(always)]
    fn reduce__TermSet26_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> equal
    #[inline(always)]
    fn reduce__TermSet26_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> plus
    #[inline(always)]
    fn reduce__TermSet26_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> star
    #[inline(always)]
    fn reduce__TermSet26_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> question
    #[inline(always)]
    fn reduce__TermSet26_7(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> caret
    #[inline(always)]
    fn reduce__TermSet26_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> minus
    #[inline(always)]
    fn reduce__TermSet26_9(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> exclamation
    #[inline(always)]
    fn reduce__TermSet26_10(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> slash
    #[inline(always)]
    fn reduce__TermSet26_11(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> dot
    #[inline(always)]
    fn reduce__TermSet26_12(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> dollar
    #[inline(always)]
    fn reduce__TermSet26_13(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> comma
    #[inline(always)]
    fn reduce__TermSet26_14(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> literal
    #[inline(always)]
    fn reduce__TermSet26_15(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> parengroup
    #[inline(always)]
    fn reduce__TermSet26_16(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> bracegroup
    #[inline(always)]
    fn reduce__TermSet26_17(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> lparen
    #[inline(always)]
    fn reduce__TermSet26_18(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> rparen
    #[inline(always)]
    fn reduce__TermSet26_19(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> lbracket
    #[inline(always)]
    fn reduce__TermSet26_20(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> rbracket
    #[inline(always)]
    fn reduce__TermSet26_21(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> left
    #[inline(always)]
    fn reduce__TermSet26_22(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> right
    #[inline(always)]
    fn reduce__TermSet26_23(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> token
    #[inline(always)]
    fn reduce__TermSet26_24(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> start
    #[inline(always)]
    fn reduce__TermSet26_25(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> eofdef
    #[inline(always)]
    fn reduce__TermSet26_26(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> tokentype
    #[inline(always)]
    fn reduce__TermSet26_27(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> userdata
    #[inline(always)]
    fn reduce__TermSet26_28(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> errortype
    #[inline(always)]
    fn reduce__TermSet26_29(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> moduleprefix
    #[inline(always)]
    fn reduce__TermSet26_30(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> lalr
    #[inline(always)]
    fn reduce__TermSet26_31(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> glr
    #[inline(always)]
    fn reduce__TermSet26_32(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> prec
    #[inline(always)]
    fn reduce__TermSet26_33(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> precedence
    #[inline(always)]
    fn reduce__TermSet26_34(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> nooptim
    #[inline(always)]
    fn reduce__TermSet26_35(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> dense
    #[inline(always)]
    fn reduce__TermSet26_36(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> trace
    #[inline(always)]
    fn reduce__TermSet26_37(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> dprec
    #[inline(always)]
    fn reduce__TermSet26_38(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> filter
    #[inline(always)]
    fn reduce__TermSet26_39(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> runtime
    #[inline(always)]
    fn reduce__TermSet26_40(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> location
    #[inline(always)]
    fn reduce__TermSet26_41(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon] -> <Others>
    #[inline(always)]
    fn reduce__TermSet26_42(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///[^semicolon]+ -> [^semicolon]
    #[inline]
    fn reduce___TermSet26Plus27_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack19);
        let mut A = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack19.push(__res);
        Ok(())
    }
    ///[^semicolon]+ -> [^semicolon]+ [^semicolon]
    #[inline]
    fn reduce___TermSet26Plus27_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack19)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack19.pop().unwrap();
        let mut A = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack19.push(__res);
        Ok(())
    }
    ///IdentOrLiteral+ -> IdentOrLiteral
    #[inline]
    fn reduce__IdentOrLiteralPlus28_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack11)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack20);
        let mut A = __data_stack.__stack11.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack20.push(__res);
        Ok(())
    }
    ///IdentOrLiteral+ -> IdentOrLiteral+ IdentOrLiteral
    #[inline]
    fn reduce__IdentOrLiteralPlus28_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__stack11)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack20)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut A = __data_stack.__stack11.pop().unwrap();
        let mut Ap = __data_stack.__stack20.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack20.push(__res);
        Ok(())
    }
    ///ident+ -> ident
    #[inline]
    fn reduce__identPlus29_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(GrammarTags::__stack19);
        let mut A = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack19.push(__res);
        Ok(())
    }
    ///ident+ -> ident+ ident
    #[inline]
    fn reduce__identPlus29_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                GrammarTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                GrammarTags::__stack19)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack19.pop().unwrap();
        let mut A = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack19.push(__res);
        Ok(())
    }
    ///ident* -> ident+
    #[inline(always)]
    fn reduce__identStar30_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///ident* ->
    #[inline]
    fn reduce__identStar30_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Lexed>,
        data: &mut GrammarArgs,
        __rustylr_location0: &mut SpanPair,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(GrammarTags::__stack19);
        let __res = { vec![] };
        __data_stack.__stack19.push(__res);
        Ok(())
    }
    ///GrammarLine+ -> GrammarLine
    #[inline(always)]
    fn reduce__GrammarLinePlus31_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 1usize);
    }
    ///GrammarLine+ -> GrammarLine GrammarLine+
    #[inline(always)]
    fn reduce__GrammarLinePlus31_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 2usize);
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
    }
    ///Augmented -> Grammar eof
    #[inline(always)]
    fn reduce_Augmented_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<SpanPair>,
    ) {
        __location_stack.truncate(__location_stack.len() - 2usize);
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl ::rusty_lr_core::parser::data_stack::DataStack for GrammarDataStack {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type ReduceActionError = ::rusty_lr_core::DefaultReduceActionError;
    type UserData = GrammarArgs;
    type StartType = ();
    type Location = SpanPair;
    fn pop_start(&mut self) -> Option<Self::StartType> {
        let tag = self.__tags.pop();
        debug_assert!(tag == Some(GrammarTags::Empty));
        Some(())
    }
    fn pop(&mut self) {
        match self.__tags.pop().unwrap() {
            GrammarTags::__terminals => {
                self.__terminals.pop();
            }
            GrammarTags::__stack2 => {
                self.__stack2.pop();
            }
            GrammarTags::__stack3 => {
                self.__stack3.pop();
            }
            GrammarTags::__stack4 => {
                self.__stack4.pop();
            }
            GrammarTags::__stack5 => {
                self.__stack5.pop();
            }
            GrammarTags::__stack6 => {
                self.__stack6.pop();
            }
            GrammarTags::__stack7 => {
                self.__stack7.pop();
            }
            GrammarTags::__stack8 => {
                self.__stack8.pop();
            }
            GrammarTags::__stack9 => {
                self.__stack9.pop();
            }
            GrammarTags::__stack10 => {
                self.__stack10.pop();
            }
            GrammarTags::__stack11 => {
                self.__stack11.pop();
            }
            GrammarTags::__stack12 => {
                self.__stack12.pop();
            }
            GrammarTags::__stack13 => {
                self.__stack13.pop();
            }
            GrammarTags::__stack14 => {
                self.__stack14.pop();
            }
            GrammarTags::__stack15 => {
                self.__stack15.pop();
            }
            GrammarTags::__stack16 => {
                self.__stack16.pop();
            }
            GrammarTags::__stack17 => {
                self.__stack17.pop();
            }
            GrammarTags::__stack18 => {
                self.__stack18.pop();
            }
            GrammarTags::__stack19 => {
                self.__stack19.pop();
            }
            GrammarTags::__stack20 => {
                self.__stack20.pop();
            }
            _ => {}
        }
    }
    fn push_terminal(&mut self, term: Self::Term) {
        self.__tags.push(GrammarTags::__terminals);
        self.__terminals.push(term);
    }
    fn push_empty(&mut self) {
        self.__tags.push(GrammarTags::Empty);
    }
    fn clear(&mut self) {
        self.__tags.clear();
        self.__terminals.clear();
        self.__stack2.clear();
        self.__stack3.clear();
        self.__stack4.clear();
        self.__stack5.clear();
        self.__stack6.clear();
        self.__stack7.clear();
        self.__stack8.clear();
        self.__stack9.clear();
        self.__stack10.clear();
        self.__stack11.clear();
        self.__stack12.clear();
        self.__stack13.clear();
        self.__stack14.clear();
        self.__stack15.clear();
        self.__stack16.clear();
        self.__stack17.clear();
        self.__stack18.clear();
        self.__stack19.clear();
        self.__stack20.clear();
    }
    fn reserve(&mut self, additional: usize) {
        self.__tags.reserve(additional);
    }
    fn split_off(&mut self, at: usize) -> Self {
        let __other_tag_stack = self.__tags.split_off(at);
        let mut __counts: [u8; 20usize] = [0; 20usize];
        for &tag in &__other_tag_stack {
            __counts[tag as usize] += 1;
        }
        let __other___terminals = self
            .__terminals
            .split_off(self.__terminals.len() - (__counts[0usize] as usize));
        let __other___stack2 = self
            .__stack2
            .split_off(self.__stack2.len() - (__counts[1usize] as usize));
        let __other___stack3 = self
            .__stack3
            .split_off(self.__stack3.len() - (__counts[2usize] as usize));
        let __other___stack4 = self
            .__stack4
            .split_off(self.__stack4.len() - (__counts[3usize] as usize));
        let __other___stack5 = self
            .__stack5
            .split_off(self.__stack5.len() - (__counts[4usize] as usize));
        let __other___stack6 = self
            .__stack6
            .split_off(self.__stack6.len() - (__counts[5usize] as usize));
        let __other___stack7 = self
            .__stack7
            .split_off(self.__stack7.len() - (__counts[6usize] as usize));
        let __other___stack8 = self
            .__stack8
            .split_off(self.__stack8.len() - (__counts[7usize] as usize));
        let __other___stack9 = self
            .__stack9
            .split_off(self.__stack9.len() - (__counts[8usize] as usize));
        let __other___stack10 = self
            .__stack10
            .split_off(self.__stack10.len() - (__counts[9usize] as usize));
        let __other___stack11 = self
            .__stack11
            .split_off(self.__stack11.len() - (__counts[10usize] as usize));
        let __other___stack12 = self
            .__stack12
            .split_off(self.__stack12.len() - (__counts[11usize] as usize));
        let __other___stack13 = self
            .__stack13
            .split_off(self.__stack13.len() - (__counts[12usize] as usize));
        let __other___stack14 = self
            .__stack14
            .split_off(self.__stack14.len() - (__counts[13usize] as usize));
        let __other___stack15 = self
            .__stack15
            .split_off(self.__stack15.len() - (__counts[14usize] as usize));
        let __other___stack16 = self
            .__stack16
            .split_off(self.__stack16.len() - (__counts[15usize] as usize));
        let __other___stack17 = self
            .__stack17
            .split_off(self.__stack17.len() - (__counts[16usize] as usize));
        let __other___stack18 = self
            .__stack18
            .split_off(self.__stack18.len() - (__counts[17usize] as usize));
        let __other___stack19 = self
            .__stack19
            .split_off(self.__stack19.len() - (__counts[18usize] as usize));
        let __other___stack20 = self
            .__stack20
            .split_off(self.__stack20.len() - (__counts[19usize] as usize));
        Self {
            __tags: __other_tag_stack,
            __terminals: __other___terminals,
            __stack2: __other___stack2,
            __stack3: __other___stack3,
            __stack4: __other___stack4,
            __stack5: __other___stack5,
            __stack6: __other___stack6,
            __stack7: __other___stack7,
            __stack8: __other___stack8,
            __stack9: __other___stack9,
            __stack10: __other___stack10,
            __stack11: __other___stack11,
            __stack12: __other___stack12,
            __stack13: __other___stack13,
            __stack14: __other___stack14,
            __stack15: __other___stack15,
            __stack16: __other___stack16,
            __stack17: __other___stack17,
            __stack18: __other___stack18,
            __stack19: __other___stack19,
            __stack20: __other___stack20,
        }
    }
    fn append(&mut self, other: &mut Self) {
        self.__tags.append(&mut other.__tags);
        self.__terminals.append(&mut other.__terminals);
        self.__stack2.append(&mut other.__stack2);
        self.__stack3.append(&mut other.__stack3);
        self.__stack4.append(&mut other.__stack4);
        self.__stack5.append(&mut other.__stack5);
        self.__stack6.append(&mut other.__stack6);
        self.__stack7.append(&mut other.__stack7);
        self.__stack8.append(&mut other.__stack8);
        self.__stack9.append(&mut other.__stack9);
        self.__stack10.append(&mut other.__stack10);
        self.__stack11.append(&mut other.__stack11);
        self.__stack12.append(&mut other.__stack12);
        self.__stack13.append(&mut other.__stack13);
        self.__stack14.append(&mut other.__stack14);
        self.__stack15.append(&mut other.__stack15);
        self.__stack16.append(&mut other.__stack16);
        self.__stack17.append(&mut other.__stack17);
        self.__stack18.append(&mut other.__stack18);
        self.__stack19.append(&mut other.__stack19);
        self.__stack20.append(&mut other.__stack20);
    }
    fn reduce_action(
        data_stack: &mut Self,
        location_stack: &mut Vec<SpanPair>,
        rule_index: usize,
        shift: &mut bool,
        lookahead: &::rusty_lr_core::TerminalSymbol<Self::Term>,
        user_data: &mut Self::UserData,
        location0: &mut Self::Location,
    ) -> Result<(), Self::ReduceActionError> {
        match rule_index {
            0usize => {
                Self::reduce_Rule_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            1usize => {
                Self::reduce_RuleType_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            2usize => {
                Self::reduce_RuleType_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            3usize => {
                Self::reduce_RuleLines_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            4usize => {
                Self::reduce_RuleLines_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            5usize => {
                Self::reduce_RuleLine_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            6usize => {
                Self::reduce_PrecDef_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            7usize => {
                Self::reduce_PrecDef_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            8usize => {
                Self::reduce_PrecDef_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            9usize => {
                Self::reduce_PrecDef_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            10usize => {
                Self::reduce_PrecDef_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            11usize => {
                Self::reduce_TokenMapped_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            12usize => {
                Self::reduce_TokenMapped_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            13usize => {
                Self::reduce_TerminalSetItem_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            14usize => {
                Self::reduce_TerminalSetItem_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            15usize => {
                Self::reduce_TerminalSetItem_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            16usize => {
                Self::reduce_TerminalSetItem_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            17usize => {
                Self::reduce_TerminalSetItem_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            18usize => {
                Self::reduce_TerminalSetItem_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            19usize => {
                Self::reduce_TerminalSet_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            20usize => {
                Self::reduce_TerminalSet_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            21usize => {
                Self::reduce_Pattern_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            22usize => {
                Self::reduce_Pattern_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            23usize => {
                Self::reduce_Pattern_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            24usize => {
                Self::reduce_Pattern_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            25usize => {
                Self::reduce_Pattern_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            26usize => {
                Self::reduce_Pattern_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            27usize => {
                Self::reduce_Pattern_6(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            28usize => {
                Self::reduce_Pattern_7(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            29usize => {
                Self::reduce_Pattern_8(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            30usize => {
                Self::reduce_Pattern_9(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            31usize => {
                Self::reduce_Pattern_10(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            32usize => {
                Self::reduce_Pattern_11(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            33usize => {
                Self::reduce_Pattern_12(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            34usize => {
                Self::reduce_Pattern_13(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            35usize => {
                Self::reduce_Pattern_14(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            36usize => {
                Self::reduce_Pattern_15(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            37usize => {
                Self::reduce_Action_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            38usize => {
                Self::reduce_Action_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            39usize => {
                Self::reduce_IdentOrLiteral_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            40usize => {
                Self::reduce_IdentOrLiteral_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            41usize => {
                Self::reduce_RustCode_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            42usize => {
                Self::reduce_Directive_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            43usize => {
                Self::reduce_Directive_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            44usize => {
                Self::reduce_Directive_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            45usize => {
                Self::reduce_Directive_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            46usize => {
                Self::reduce_Directive_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            47usize => {
                Self::reduce_Directive_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            48usize => {
                Self::reduce_Directive_6(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            49usize => {
                Self::reduce_Directive_7(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            50usize => {
                Self::reduce_Directive_8(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            51usize => {
                Self::reduce_Directive_9(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            52usize => {
                Self::reduce_Directive_10(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            53usize => {
                Self::reduce_Directive_11(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            54usize => {
                Self::reduce_Directive_12(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            55usize => {
                Self::reduce_Directive_13(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            56usize => {
                Self::reduce_Directive_14(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            57usize => {
                Self::reduce_Directive_15(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            58usize => {
                Self::reduce_Directive_16(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            59usize => {
                Self::reduce_Directive_17(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            60usize => {
                Self::reduce_Directive_18(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            61usize => {
                Self::reduce_Directive_19(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            62usize => {
                Self::reduce_Directive_20(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            63usize => {
                Self::reduce_Directive_21(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            64usize => {
                Self::reduce_Directive_22(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            65usize => {
                Self::reduce_Directive_23(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            66usize => {
                Self::reduce_Directive_24(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            67usize => {
                Self::reduce_Directive_25(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            68usize => {
                Self::reduce_Directive_26(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            69usize => {
                Self::reduce_Directive_27(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            70usize => {
                Self::reduce_Directive_28(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            71usize => {
                Self::reduce_Directive_29(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            72usize => {
                Self::reduce_Directive_30(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            73usize => {
                Self::reduce_Directive_31(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            74usize => {
                Self::reduce_Directive_32(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            75usize => {
                Self::reduce_Directive_33(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            76usize => {
                Self::reduce_Directive_34(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            77usize => {
                Self::reduce_Directive_35(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            78usize => {
                Self::reduce_Directive_36(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            79usize => {
                Self::reduce_GrammarLine_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            80usize => {
                Self::reduce_GrammarLine_1(data_stack, location_stack);
                Ok(())
            }
            81usize => {
                Self::reduce_Grammar_0(data_stack, location_stack);
                Ok(())
            }
            82usize => {
                Self::reduce__TokenMappedPlus15_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            83usize => {
                Self::reduce__TokenMappedPlus15_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            84usize => {
                Self::reduce__TokenMappedStar16_0(data_stack, location_stack);
                Ok(())
            }
            85usize => {
                Self::reduce__TokenMappedStar16_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            86usize => {
                Self::reduce__PrecDefPlus17_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            87usize => {
                Self::reduce__PrecDefPlus17_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            88usize => {
                Self::reduce__PrecDefStar18_0(data_stack, location_stack);
                Ok(())
            }
            89usize => {
                Self::reduce__PrecDefStar18_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            90usize => {
                Self::reduce__caretQuestion19_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            91usize => {
                Self::reduce__caretQuestion19_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            92usize => {
                Self::reduce__TerminalSetItemPlus20_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            93usize => {
                Self::reduce__TerminalSetItemPlus20_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            94usize => {
                Self::reduce__TerminalSetItemStar21_0(data_stack, location_stack);
                Ok(())
            }
            95usize => {
                Self::reduce__TerminalSetItemStar21_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            96usize => {
                Self::reduce__PatternPlus22_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            97usize => {
                Self::reduce__PatternPlus22_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            98usize => {
                Self::reduce__PatternStar23_0(data_stack, location_stack);
                Ok(())
            }
            99usize => {
                Self::reduce__PatternStar23_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            100usize => {
                Self::reduce___PatternStar23SepPlus24_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            101usize => {
                Self::reduce___PatternStar23SepPlus24_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            102usize => {
                Self::reduce__commaQuestion25_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            103usize => {
                Self::reduce__commaQuestion25_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            104usize => {
                Self::reduce__TermSet26_0(data_stack, location_stack);
                Ok(())
            }
            105usize => {
                Self::reduce__TermSet26_1(data_stack, location_stack);
                Ok(())
            }
            106usize => {
                Self::reduce__TermSet26_2(data_stack, location_stack);
                Ok(())
            }
            107usize => {
                Self::reduce__TermSet26_3(data_stack, location_stack);
                Ok(())
            }
            108usize => {
                Self::reduce__TermSet26_4(data_stack, location_stack);
                Ok(())
            }
            109usize => {
                Self::reduce__TermSet26_5(data_stack, location_stack);
                Ok(())
            }
            110usize => {
                Self::reduce__TermSet26_6(data_stack, location_stack);
                Ok(())
            }
            111usize => {
                Self::reduce__TermSet26_7(data_stack, location_stack);
                Ok(())
            }
            112usize => {
                Self::reduce__TermSet26_8(data_stack, location_stack);
                Ok(())
            }
            113usize => {
                Self::reduce__TermSet26_9(data_stack, location_stack);
                Ok(())
            }
            114usize => {
                Self::reduce__TermSet26_10(data_stack, location_stack);
                Ok(())
            }
            115usize => {
                Self::reduce__TermSet26_11(data_stack, location_stack);
                Ok(())
            }
            116usize => {
                Self::reduce__TermSet26_12(data_stack, location_stack);
                Ok(())
            }
            117usize => {
                Self::reduce__TermSet26_13(data_stack, location_stack);
                Ok(())
            }
            118usize => {
                Self::reduce__TermSet26_14(data_stack, location_stack);
                Ok(())
            }
            119usize => {
                Self::reduce__TermSet26_15(data_stack, location_stack);
                Ok(())
            }
            120usize => {
                Self::reduce__TermSet26_16(data_stack, location_stack);
                Ok(())
            }
            121usize => {
                Self::reduce__TermSet26_17(data_stack, location_stack);
                Ok(())
            }
            122usize => {
                Self::reduce__TermSet26_18(data_stack, location_stack);
                Ok(())
            }
            123usize => {
                Self::reduce__TermSet26_19(data_stack, location_stack);
                Ok(())
            }
            124usize => {
                Self::reduce__TermSet26_20(data_stack, location_stack);
                Ok(())
            }
            125usize => {
                Self::reduce__TermSet26_21(data_stack, location_stack);
                Ok(())
            }
            126usize => {
                Self::reduce__TermSet26_22(data_stack, location_stack);
                Ok(())
            }
            127usize => {
                Self::reduce__TermSet26_23(data_stack, location_stack);
                Ok(())
            }
            128usize => {
                Self::reduce__TermSet26_24(data_stack, location_stack);
                Ok(())
            }
            129usize => {
                Self::reduce__TermSet26_25(data_stack, location_stack);
                Ok(())
            }
            130usize => {
                Self::reduce__TermSet26_26(data_stack, location_stack);
                Ok(())
            }
            131usize => {
                Self::reduce__TermSet26_27(data_stack, location_stack);
                Ok(())
            }
            132usize => {
                Self::reduce__TermSet26_28(data_stack, location_stack);
                Ok(())
            }
            133usize => {
                Self::reduce__TermSet26_29(data_stack, location_stack);
                Ok(())
            }
            134usize => {
                Self::reduce__TermSet26_30(data_stack, location_stack);
                Ok(())
            }
            135usize => {
                Self::reduce__TermSet26_31(data_stack, location_stack);
                Ok(())
            }
            136usize => {
                Self::reduce__TermSet26_32(data_stack, location_stack);
                Ok(())
            }
            137usize => {
                Self::reduce__TermSet26_33(data_stack, location_stack);
                Ok(())
            }
            138usize => {
                Self::reduce__TermSet26_34(data_stack, location_stack);
                Ok(())
            }
            139usize => {
                Self::reduce__TermSet26_35(data_stack, location_stack);
                Ok(())
            }
            140usize => {
                Self::reduce__TermSet26_36(data_stack, location_stack);
                Ok(())
            }
            141usize => {
                Self::reduce__TermSet26_37(data_stack, location_stack);
                Ok(())
            }
            142usize => {
                Self::reduce__TermSet26_38(data_stack, location_stack);
                Ok(())
            }
            143usize => {
                Self::reduce__TermSet26_39(data_stack, location_stack);
                Ok(())
            }
            144usize => {
                Self::reduce__TermSet26_40(data_stack, location_stack);
                Ok(())
            }
            145usize => {
                Self::reduce__TermSet26_41(data_stack, location_stack);
                Ok(())
            }
            146usize => {
                Self::reduce__TermSet26_42(data_stack, location_stack);
                Ok(())
            }
            147usize => {
                Self::reduce___TermSet26Plus27_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            148usize => {
                Self::reduce___TermSet26Plus27_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            149usize => {
                Self::reduce__IdentOrLiteralPlus28_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            150usize => {
                Self::reduce__IdentOrLiteralPlus28_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            151usize => {
                Self::reduce__identPlus29_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            152usize => {
                Self::reduce__identPlus29_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            153usize => {
                Self::reduce__identStar30_0(data_stack, location_stack);
                Ok(())
            }
            154usize => {
                Self::reduce__identStar30_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            155usize => {
                Self::reduce__GrammarLinePlus31_0(data_stack, location_stack);
                Ok(())
            }
            156usize => {
                Self::reduce__GrammarLinePlus31_1(data_stack, location_stack);
                Ok(())
            }
            157usize => {
                Self::reduce_Augmented_0(data_stack, location_stack);
                Ok(())
            }
            _ => {
                unreachable!("Invalid Rule: {}", rule_index);
            }
        }
    }
}
/// A struct that holds the entire parser table and production rules.
#[allow(unused_braces, unused_parens, unused_variables, non_snake_case, unused_mut)]
pub struct GrammarParser {
    /// production rules
    pub rules: Vec<GrammarRule>,
    /// states
    pub states: Vec<GrammarState>,
    /// terminal classes
    pub classes: Vec<Vec<&'static str>>,
}
impl ::rusty_lr_core::parser::Parser for GrammarParser {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type State = GrammarState;
    type TerminalClassElement = &'static str;
    const ERROR_USED: bool = true;
    fn class_precedence(
        &self,
        class: ::rusty_lr_core::TerminalSymbol<usize>,
    ) -> ::rusty_lr_core::parser::Precedence {
        match class {
            ::rusty_lr_core::TerminalSymbol::Term(class) => {
                #[allow(unreachable_patterns)]
                match class {
                    10 => ::rusty_lr_core::parser::Precedence::new(0),
                    12 => ::rusty_lr_core::parser::Precedence::new(1),
                    6..=8 | 11 => ::rusty_lr_core::parser::Precedence::new(2),
                    _ => ::rusty_lr_core::parser::Precedence::none(),
                }
            }
            ::rusty_lr_core::TerminalSymbol::Error => {
                ::rusty_lr_core::parser::Precedence::none()
            }
            ::rusty_lr_core::TerminalSymbol::Eof => {
                unreachable!("eof token cannot be used in precedence levels")
            }
        }
    }
    fn precedence_types(
        &self,
        level: u8,
    ) -> Option<::rusty_lr_core::builder::ReduceType> {
        #[allow(unreachable_patterns)]
        match level {
            0..=2 => Some(::rusty_lr_core::builder::ReduceType::Left),
            _ => None,
        }
    }
    fn get_rules(&self) -> &[GrammarRule] {
        &self.rules
    }
    fn get_states(&self) -> &[GrammarState] {
        &self.states
    }
    fn get_terminals(
        &self,
        i: usize,
    ) -> Option<impl IntoIterator<Item = Self::TerminalClassElement> + '_> {
        self.classes.get(i).map(|class| class.iter().copied())
    }
    fn to_terminal_class(&self, terminal: &Self::Term) -> usize {
        #[allow(unreachable_patterns)]
        match terminal {
            Lexed::Ident(_) => 0,
            Lexed::Colon(_) => 1,
            Lexed::Semicolon(_) => 2,
            Lexed::Pipe(_) => 3,
            Lexed::Percent(_) => 4,
            Lexed::Equal(_) => 5,
            Lexed::Plus(_) => 6,
            Lexed::Star(_) => 7,
            Lexed::Question(_) => 8,
            Lexed::Caret(_) => 9,
            Lexed::Minus(_) => 10,
            Lexed::Exclamation(_) => 11,
            Lexed::Slash(_) => 12,
            Lexed::Dot(_) => 13,
            Lexed::Dollar(_) => 14,
            Lexed::Comma(_) => 15,
            Lexed::Literal(_) => 16,
            Lexed::ParenGroup(_) => 17,
            Lexed::BraceGroup(_) => 18,
            Lexed::LParen => 19,
            Lexed::RParen => 20,
            Lexed::LBracket => 21,
            Lexed::RBracket => 22,
            Lexed::Left(_) => 23,
            Lexed::Right(_) => 24,
            Lexed::Token(_) => 25,
            Lexed::Start(_) => 26,
            Lexed::EofDef(_) => 27,
            Lexed::TokenType(_) => 28,
            Lexed::UserData(_) => 29,
            Lexed::ErrorType(_) => 30,
            Lexed::ModulePrefix(_) => 31,
            Lexed::Lalr(_) => 32,
            Lexed::Glr(_) => 33,
            Lexed::Prec(_) => 34,
            Lexed::Precedence(_) => 35,
            Lexed::NoOptim(_) => 36,
            Lexed::Dense(_) => 37,
            Lexed::Trace(_) => 38,
            Lexed::DPrec(_) => 39,
            Lexed::Filter(_) => 40,
            Lexed::Runtime(_) => 41,
            Lexed::Location(_) => 42,
            _ => 43,
        }
    }
}
/// A struct that holds the whole parser table.
#[allow(unused_braces, unused_parens, unused_variables, non_snake_case, unused_mut)]
impl GrammarParser {
    /// Calculates the states and parser tables from the grammar.
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let rules: Vec<
            ::rusty_lr_core::rule::ProductionRule<::rusty_lr_core::TerminalSymbol<u8>, _>,
        > = vec![
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Rule,
            rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(1)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::RuleType, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(17)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::RuleType, rule : vec![], precedence : None, },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::RuleLines, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(3)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),], precedence
            : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::RuleLines, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::RuleLine, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedStar16),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PrecDefStar18),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),], precedence :
            None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::PrecDef, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(34)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::PrecDef, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(34)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::PrecDef, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(39)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(16)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::PrecDef, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(39)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::PrecDef, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TokenMapped, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TokenMapped, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(5)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),], precedence :
            None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TerminalSetItem, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TerminalSetItem, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(10)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(0usize)), },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TerminalSetItem, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(10)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(0usize)), },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TerminalSetItem, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(16)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TerminalSetItem, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(16)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(10)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(16)),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(0usize)), },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TerminalSetItem, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(16)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(10)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(0usize)), },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TerminalSet, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(21)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_caretQuestion19),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemStar21),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(22)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::TerminalSet, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(13)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Pattern, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Pattern, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(6)),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(2usize)), },
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Pattern,
            rule : vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(7)),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(2usize)), },
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Pattern,
            rule : vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(8)),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(2usize)), },
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Pattern,
            rule : vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(11)),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(2usize)), },
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Pattern,
            rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSet),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Pattern, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(12)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),], precedence :
            Some(::rusty_lr_core::rule::Precedence::Fixed(1usize)), },
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Pattern,
            rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(19)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__PatternStar23SepPlus24),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(20)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Pattern, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(19)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(20)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Pattern, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(16)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Pattern, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(10)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),], precedence :
            Some(::rusty_lr_core::rule::Precedence::Fixed(0usize)), },
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Pattern,
            rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(14)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(19)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_commaQuestion25),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(20)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Pattern, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(14)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(19)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(6)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(20)),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(2usize)), },
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Pattern,
            rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(14)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(19)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(7)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(20)),],
            precedence : Some(::rusty_lr_core::rule::Precedence::Fixed(2usize)), },
            ::rusty_lr_core::rule::ProductionRule { name : GrammarNonTerminals::Pattern,
            rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(14)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(19)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(20)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Pattern, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(14)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(19)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(20)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Action, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(18)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Action, rule : vec![], precedence : None, },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::IdentOrLiteral, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::IdentOrLiteral, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(16)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::RustCode, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__TermSet26Plus27),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(25)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(25)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(25)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(26)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(26)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(27)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(28)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(28)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(29)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(29)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(23)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus28),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(23)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(24)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus28),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(24)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(35)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus28),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(35)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(30)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(30)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(31)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(31)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(33)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(33)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(32)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(32)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(36)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(36)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(37)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(37)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(38)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_identStar30),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(38)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(40)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(40)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(41)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(41)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(42)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(42)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Directive, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Error),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(2)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::GrammarLine, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule),], precedence
            : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::GrammarLine, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Directive),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Grammar, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_GrammarLinePlus31),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TokenMappedPlus15, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TokenMappedPlus15, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedPlus15),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TokenMappedStar16, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedPlus15),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TokenMappedStar16, rule : vec![], precedence : None, },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_PrecDefPlus17, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::PrecDef),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_PrecDefPlus17, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PrecDefPlus17),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::PrecDef),], precedence :
            None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_PrecDefStar18, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PrecDefPlus17),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_PrecDefStar18, rule : vec![], precedence : None, },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_caretQuestion19, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(9)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_caretQuestion19, rule : vec![], precedence : None, },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TerminalSetItemPlus20, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TerminalSetItemPlus20, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemPlus20),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TerminalSetItemStar21, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemPlus20),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TerminalSetItemStar21, rule : vec![], precedence :
            None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_PatternPlus22, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_PatternPlus22, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternPlus22),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),], precedence :
            None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_PatternStar23, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternPlus22),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_PatternStar23, rule : vec![], precedence : None, },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::__PatternStar23SepPlus24, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternStar23),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::__PatternStar23SepPlus24, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__PatternStar23SepPlus24),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(3)),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternStar23),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_commaQuestion25, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_commaQuestion25, rule : vec![], precedence : None, },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(1)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(3)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(4)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(5)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(6)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(7)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(8)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(9)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(10)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(11)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(12)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(13)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(14)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(15)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(16)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(17)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(18)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(19)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(20)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(21)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(22)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(23)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(24)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(25)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(26)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(27)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(28)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(29)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(30)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(31)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(32)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(33)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(34)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(35)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(36)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(37)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(38)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(39)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(40)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(41)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(42)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_TermSet26, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(43)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::__TermSet26Plus27, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TermSet26),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::__TermSet26Plus27, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__TermSet26Plus27),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TermSet26),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_IdentOrLiteralPlus28, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_IdentOrLiteralPlus28, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus28),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_identPlus29, rule :
            vec![::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_identPlus29, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_identPlus29),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_identStar30, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_identPlus29),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_identStar30, rule : vec![], precedence : None, },
            ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_GrammarLinePlus31, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::GrammarLine),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::_GrammarLinePlus31, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::GrammarLine),
            ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_GrammarLinePlus31),],
            precedence : None, }, ::rusty_lr_core::rule::ProductionRule { name :
            GrammarNonTerminals::Augmented, rule :
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
            ::rusty_lr_core::Token::Term(::rusty_lr_core::TerminalSymbol::Eof),],
            precedence : None, },
        ];
        let terminal_class_names = vec![
            "ident", "colon", "semicolon", "pipe", "percent", "equal", "plus", "star",
            "question", "caret", "minus", "exclamation", "slash", "dot", "dollar",
            "comma", "literal", "parengroup", "bracegroup", "lparen", "rparen",
            "lbracket", "rbracket", "left", "right", "token", "start", "eofdef",
            "tokentype", "userdata", "errortype", "moduleprefix", "lalr", "glr", "prec",
            "precedence", "nooptim", "dense", "trace", "dprec", "filter", "runtime",
            "location", "<Others>",
        ];
        let rules = rules
            .into_iter()
            .map(move |rule| {
                rule.map(
                    |term| match term {
                        ::rusty_lr_core::TerminalSymbol::Term(term) => {
                            terminal_class_names[term as usize]
                        }
                        ::rusty_lr_core::TerminalSymbol::Error => "error",
                        ::rusty_lr_core::TerminalSymbol::Eof => "eof",
                    },
                    |nonterm| nonterm,
                )
            })
            .collect();
        let __rustylr_tset17: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(1),
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Term(5),
            ::rusty_lr_core::TerminalSymbol::Term(6),
            ::rusty_lr_core::TerminalSymbol::Term(7),
            ::rusty_lr_core::TerminalSymbol::Term(8),
            ::rusty_lr_core::TerminalSymbol::Term(9),
            ::rusty_lr_core::TerminalSymbol::Term(10),
            ::rusty_lr_core::TerminalSymbol::Term(11),
            ::rusty_lr_core::TerminalSymbol::Term(12),
            ::rusty_lr_core::TerminalSymbol::Term(13),
            ::rusty_lr_core::TerminalSymbol::Term(14),
            ::rusty_lr_core::TerminalSymbol::Term(15),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(17),
            ::rusty_lr_core::TerminalSymbol::Term(18),
            ::rusty_lr_core::TerminalSymbol::Term(19),
            ::rusty_lr_core::TerminalSymbol::Term(20),
            ::rusty_lr_core::TerminalSymbol::Term(21),
            ::rusty_lr_core::TerminalSymbol::Term(22),
            ::rusty_lr_core::TerminalSymbol::Term(23),
            ::rusty_lr_core::TerminalSymbol::Term(24),
            ::rusty_lr_core::TerminalSymbol::Term(25),
            ::rusty_lr_core::TerminalSymbol::Term(26),
            ::rusty_lr_core::TerminalSymbol::Term(27),
            ::rusty_lr_core::TerminalSymbol::Term(28),
            ::rusty_lr_core::TerminalSymbol::Term(29),
            ::rusty_lr_core::TerminalSymbol::Term(30),
            ::rusty_lr_core::TerminalSymbol::Term(31),
            ::rusty_lr_core::TerminalSymbol::Term(32),
            ::rusty_lr_core::TerminalSymbol::Term(33),
            ::rusty_lr_core::TerminalSymbol::Term(34),
            ::rusty_lr_core::TerminalSymbol::Term(35),
            ::rusty_lr_core::TerminalSymbol::Term(36),
            ::rusty_lr_core::TerminalSymbol::Term(37),
            ::rusty_lr_core::TerminalSymbol::Term(38),
            ::rusty_lr_core::TerminalSymbol::Term(39),
            ::rusty_lr_core::TerminalSymbol::Term(40),
            ::rusty_lr_core::TerminalSymbol::Term(41),
            ::rusty_lr_core::TerminalSymbol::Term(42),
            ::rusty_lr_core::TerminalSymbol::Term(43),
        ];
        let __rustylr_tset19: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(2),
        ];
        let __rustylr_tset3: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Term(6),
            ::rusty_lr_core::TerminalSymbol::Term(7),
            ::rusty_lr_core::TerminalSymbol::Term(8),
            ::rusty_lr_core::TerminalSymbol::Term(10),
            ::rusty_lr_core::TerminalSymbol::Term(11),
            ::rusty_lr_core::TerminalSymbol::Term(12),
            ::rusty_lr_core::TerminalSymbol::Term(13),
            ::rusty_lr_core::TerminalSymbol::Term(14),
            ::rusty_lr_core::TerminalSymbol::Term(15),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(18),
            ::rusty_lr_core::TerminalSymbol::Term(19),
            ::rusty_lr_core::TerminalSymbol::Term(20),
            ::rusty_lr_core::TerminalSymbol::Term(21),
            ::rusty_lr_core::TerminalSymbol::Error,
        ];
        let __rustylr_tset2: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Term(6),
            ::rusty_lr_core::TerminalSymbol::Term(7),
            ::rusty_lr_core::TerminalSymbol::Term(8),
            ::rusty_lr_core::TerminalSymbol::Term(10),
            ::rusty_lr_core::TerminalSymbol::Term(11),
            ::rusty_lr_core::TerminalSymbol::Term(12),
            ::rusty_lr_core::TerminalSymbol::Term(13),
            ::rusty_lr_core::TerminalSymbol::Term(14),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(18),
            ::rusty_lr_core::TerminalSymbol::Term(19),
            ::rusty_lr_core::TerminalSymbol::Term(21),
        ];
        let __rustylr_tset8: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Term(10),
            ::rusty_lr_core::TerminalSymbol::Term(12),
            ::rusty_lr_core::TerminalSymbol::Term(13),
            ::rusty_lr_core::TerminalSymbol::Term(14),
            ::rusty_lr_core::TerminalSymbol::Term(15),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(18),
            ::rusty_lr_core::TerminalSymbol::Term(19),
            ::rusty_lr_core::TerminalSymbol::Term(20),
            ::rusty_lr_core::TerminalSymbol::Term(21),
            ::rusty_lr_core::TerminalSymbol::Error,
        ];
        let __rustylr_tset7: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Term(10),
            ::rusty_lr_core::TerminalSymbol::Term(13),
            ::rusty_lr_core::TerminalSymbol::Term(14),
            ::rusty_lr_core::TerminalSymbol::Term(15),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(18),
            ::rusty_lr_core::TerminalSymbol::Term(19),
            ::rusty_lr_core::TerminalSymbol::Term(20),
            ::rusty_lr_core::TerminalSymbol::Term(21),
            ::rusty_lr_core::TerminalSymbol::Error,
        ];
        let __rustylr_tset11: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Term(13),
            ::rusty_lr_core::TerminalSymbol::Term(14),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(18),
            ::rusty_lr_core::TerminalSymbol::Term(19),
            ::rusty_lr_core::TerminalSymbol::Term(21),
        ];
        let __rustylr_tset15: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(18),
        ];
        let __rustylr_tset16: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(16),
        ];
        let __rustylr_tset9: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(13),
            ::rusty_lr_core::TerminalSymbol::Term(14),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(19),
            ::rusty_lr_core::TerminalSymbol::Term(20),
            ::rusty_lr_core::TerminalSymbol::Term(21),
        ];
        let __rustylr_tset12: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Eof,
        ];
        let __rustylr_tset5: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(0),
            ::rusty_lr_core::TerminalSymbol::Term(16),
            ::rusty_lr_core::TerminalSymbol::Term(22),
        ];
        let __rustylr_tset0: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(1),
        ];
        let __rustylr_tset18: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(2),
        ];
        let __rustylr_tset13: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
        ];
        let __rustylr_tset1: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(4),
            ::rusty_lr_core::TerminalSymbol::Term(18),
        ];
        let __rustylr_tset14: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(2),
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(18),
        ];
        let __rustylr_tset4: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(3),
            ::rusty_lr_core::TerminalSymbol::Term(20),
        ];
        let __rustylr_tset10: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(20),
        ];
        let __rustylr_tset6: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Term(22),
        ];
        let __rustylr_tset20: Vec<::rusty_lr_core::TerminalSymbol<u8>> = vec![
            ::rusty_lr_core::TerminalSymbol::Eof,
        ];
        let states: Vec<
            ::rusty_lr_core::parser::state::IntermediateState<
                ::rusty_lr_core::TerminalSymbol<u8>,
                _,
                u8,
                u8,
            >,
        > = vec![
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 1),
            (::rusty_lr_core::TerminalSymbol::Term(4), 90),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::Rule, 223), (GrammarNonTerminals::Directive, 224),
            (GrammarNonTerminals::GrammarLine, 225), (GrammarNonTerminals::Grammar, 227),
            (GrammarNonTerminals::_GrammarLinePlus31, 229),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [0, 42, 43, 44, 45,
            46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
            65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 155, 156,
            157,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(17), 2),], shift_goto_map_nonterm
            : vec![(GrammarNonTerminals::RuleType, 3),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![2,]; __reduce_map.extend(__rustylr_tset0.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2,]; let shifted : & 'static [u8] = &
            [1, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![1,];
            __reduce_map.extend(__rustylr_tset0.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [1,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(1), 4),], shift_goto_map_nonterm
            : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [0,]; let shifted : & 'static [u8]
            = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 5),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RuleLines, 64), (GrammarNonTerminals::RuleLine,
            89), (GrammarNonTerminals::TokenMapped, 68),
            (GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern, 69),
            (GrammarNonTerminals::_TokenMappedPlus15, 70),
            (GrammarNonTerminals::_TokenMappedStar16, 72),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![85,]; __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [0, 3, 4, 5, 11, 12, 19, 20, 21, 22, 23, 24,
            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 82, 83, 84, 85,]; let shifted
            : & 'static [u8] = & [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(5), 6),], shift_goto_map_nonterm
            : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![21,]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, ruleset : { let rules : & 'static [u8]
            = & [12, 21,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 7),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            63),], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [12, 19, 20, 21, 22, 23, 24, 25,
            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,]; let shifted : & 'static [u8] =
            & [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![21,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [21,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![20,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [20,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 10),], shift_goto_map_nonterm
            : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [32, 33, 34, 35, 36,]; let shifted
            : & 'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(19), 11),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [32, 33, 34, 35, 36,]; let shifted
            : & 'static [u8] = & [2, 2, 2, 2, 2,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 7),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            31),], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [19, 20, 21, 22, 23, 24, 25, 26,
            27, 28, 29, 30, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0,
            3, 0, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![30,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [30,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 7),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),
            (::rusty_lr_core::TerminalSymbol::Error, 41),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            43), (GrammarNonTerminals::_PatternPlus22, 44),
            (GrammarNonTerminals::_PatternStar23, 46),
            (GrammarNonTerminals::__PatternStar23SepPlus24, 47),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![99,]; __reduce_map.extend(__rustylr_tset4.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 28,
            29, 29, 30, 31, 32, 33, 34, 35, 36, 96, 97, 98, 99, 100, 101,]; let shifted :
            & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(9), 15),], shift_goto_map_nonterm
            : vec![(GrammarNonTerminals::_caretQuestion19, 16),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![91,]; __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [19, 90, 91,]; let shifted : & 'static [u8] =
            & [1, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![90,];
            __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [90,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 17),
            (::rusty_lr_core::TerminalSymbol::Term(16), 21),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSetItem, 25),
            (GrammarNonTerminals::_TerminalSetItemPlus20, 26),
            (GrammarNonTerminals::_TerminalSetItemStar21, 28),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![95,]; __reduce_map.extend(__rustylr_tset6.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [13, 14, 15, 16, 17, 18, 19, 92, 93, 94, 95,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(10), 18),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![13,]; __reduce_map
            .extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, ruleset : { let rules : & 'static [u8]
            = & [13, 14, 15,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 19),
            (::rusty_lr_core::TerminalSymbol::Error, 20),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [14, 15,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![14,];
            __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [14,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![15,];
            __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [15,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(10), 22),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![16,]; __reduce_map
            .extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, ruleset : { let rules : & 'static [u8]
            = & [16, 17, 18,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(16), 23),
            (::rusty_lr_core::TerminalSymbol::Error, 24),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [17, 18,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![17,];
            __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [17,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![18,];
            __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [18,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![92,];
            __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [92,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 17),
            (::rusty_lr_core::TerminalSymbol::Term(16), 21),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSetItem, 27),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![94,]; __reduce_map.extend(__rustylr_tset6.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [13, 14, 15, 16, 17, 18, 93, 94,]; let shifted
            : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef
            { rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![93,];
            __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [93,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(22), 29),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [19,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![19,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [19,]; let shifted : & 'static [u8] = & [4,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![26,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [26,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 32),
            (::rusty_lr_core::TerminalSymbol::Term(7), 33),
            (::rusty_lr_core::TerminalSymbol::Term(8), 34),
            (::rusty_lr_core::TerminalSymbol::Term(10), 35),
            (::rusty_lr_core::TerminalSymbol::Term(11), 37),
            (::rusty_lr_core::TerminalSymbol::Term(12), 38),
            (::rusty_lr_core::TerminalSymbol::Term(15), 40),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [22, 23, 24, 25, 27, 31, 32, 33,
            34, 35, 36,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1, 1, 4, 4, 4, 4,
            4,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![22,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [22,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![23,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [23,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![24,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [24,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 7),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            36),], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [19, 20, 21, 22, 23, 24, 25, 26,
            27, 28, 29, 30, 31, 31, 32, 33, 34, 35, 36,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 32),
            (::rusty_lr_core::TerminalSymbol::Term(7), 33),
            (::rusty_lr_core::TerminalSymbol::Term(8), 34),
            (::rusty_lr_core::TerminalSymbol::Term(11), 37),
            (::rusty_lr_core::TerminalSymbol::Term(12), 38),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![31,]; __reduce_map
            .extend(__rustylr_tset7.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, ruleset : { let rules : & 'static [u8]
            = & [22, 23, 24, 25, 27, 31,]; let shifted : & 'static [u8] = & [1, 1, 1, 1,
            1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![25,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [25,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 7),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            39),], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [19, 20, 21, 22, 23, 24, 25, 26,
            27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 32),
            (::rusty_lr_core::TerminalSymbol::Term(7), 33),
            (::rusty_lr_core::TerminalSymbol::Term(8), 34),
            (::rusty_lr_core::TerminalSymbol::Term(11), 37),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![27,]; __reduce_map
            .extend(__rustylr_tset8.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, ruleset : { let rules : & 'static [u8]
            = & [22, 23, 24, 25, 27,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 7),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            51),], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [19, 20, 21, 22, 23, 24, 25, 26,
            27, 28, 29, 30, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0,
            5, 0, 5,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(20), 42),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [29,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![29,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [29,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 32),
            (::rusty_lr_core::TerminalSymbol::Term(7), 33),
            (::rusty_lr_core::TerminalSymbol::Term(8), 34),
            (::rusty_lr_core::TerminalSymbol::Term(10), 35),
            (::rusty_lr_core::TerminalSymbol::Term(11), 37),
            (::rusty_lr_core::TerminalSymbol::Term(12), 38),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![96,]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, ruleset : { let rules : & 'static [u8]
            = & [22, 23, 24, 25, 27, 31, 96,]; let shifted : & 'static [u8] = & [1, 1, 1,
            1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 7),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            45),], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![98,]; __reduce_map
            .extend(__rustylr_tset4.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, ruleset : { let rules : & 'static [u8]
            = & [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
            97, 98,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 32),
            (::rusty_lr_core::TerminalSymbol::Term(7), 33),
            (::rusty_lr_core::TerminalSymbol::Term(8), 34),
            (::rusty_lr_core::TerminalSymbol::Term(10), 35),
            (::rusty_lr_core::TerminalSymbol::Term(11), 37),
            (::rusty_lr_core::TerminalSymbol::Term(12), 38),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![97,]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, ruleset : { let rules : & 'static [u8]
            = & [22, 23, 24, 25, 27, 31, 97,]; let shifted : & 'static [u8] = & [1, 1, 1,
            1, 1, 1, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![100,];
            __reduce_map.extend(__rustylr_tset4.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [100,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(3), 48),
            (::rusty_lr_core::TerminalSymbol::Term(20), 50),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [28, 101,]; let shifted : &
            'static [u8] = & [2, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 7),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            43), (GrammarNonTerminals::_PatternPlus22, 44),
            (GrammarNonTerminals::_PatternStar23, 49),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![99,]; __reduce_map.extend(__rustylr_tset4.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35, 36, 96, 97, 98, 99, 101,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![101,];
            __reduce_map.extend(__rustylr_tset4.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [101,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![28,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [28,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 32),
            (::rusty_lr_core::TerminalSymbol::Term(7), 33),
            (::rusty_lr_core::TerminalSymbol::Term(8), 34),
            (::rusty_lr_core::TerminalSymbol::Term(10), 35),
            (::rusty_lr_core::TerminalSymbol::Term(11), 37),
            (::rusty_lr_core::TerminalSymbol::Term(12), 38),
            (::rusty_lr_core::TerminalSymbol::Term(15), 52),
            (::rusty_lr_core::TerminalSymbol::Error, 59),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::_commaQuestion25, 61),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![103,]; __reduce_map.extend(__rustylr_tset10.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [22, 23, 24, 25, 27, 31, 32, 33, 34, 35, 36,
            102, 103,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1, 1, 6, 6, 6, 6,
            6, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 53),
            (::rusty_lr_core::TerminalSymbol::Term(7), 55),
            (::rusty_lr_core::TerminalSymbol::Error, 57),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![102,];
            __reduce_map.extend(__rustylr_tset10.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [33, 34, 36, 102,]; let shifted : & 'static
            [u8] = & [7, 7, 7, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(20), 54),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [33,]; let shifted : & 'static
            [u8] = & [8,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![33,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [33,]; let shifted : & 'static [u8] = & [9,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(20), 56),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [34,]; let shifted : & 'static
            [u8] = & [8,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![34,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [34,]; let shifted : & 'static [u8] = & [9,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(20), 58),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [36,]; let shifted : & 'static
            [u8] = & [8,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![36,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [36,]; let shifted : & 'static [u8] = & [9,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(20), 60),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [35,]; let shifted : & 'static
            [u8] = & [7,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![35,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [35,]; let shifted : & 'static [u8] = & [8,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(20), 62),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [32,]; let shifted : & 'static
            [u8] = & [7,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![32,];
            __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [32,]; let shifted : & 'static [u8] = & [8,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 32),
            (::rusty_lr_core::TerminalSymbol::Term(7), 33),
            (::rusty_lr_core::TerminalSymbol::Term(8), 34),
            (::rusty_lr_core::TerminalSymbol::Term(10), 35),
            (::rusty_lr_core::TerminalSymbol::Term(11), 37),
            (::rusty_lr_core::TerminalSymbol::Term(12), 38),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![12,]; __reduce_map
            .extend(__rustylr_tset11.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [12, 22, 23, 24, 25, 27, 31,]; let shifted : & 'static [u8]
            = & [3, 1, 1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 65),
            (::rusty_lr_core::TerminalSymbol::Term(3), 66),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [0, 3,]; let shifted : & 'static
            [u8] = & [4, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![0,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [0,]; let shifted : & 'static [u8] = & [5,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 5),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RuleLine, 67), (GrammarNonTerminals::TokenMapped,
            68), (GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern,
            69), (GrammarNonTerminals::_TokenMappedPlus15, 70),
            (GrammarNonTerminals::_TokenMappedStar16, 72),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![85,]; __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [3, 5, 11, 12, 19, 20, 21, 22, 23, 24, 25, 26,
            27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 82, 83, 84, 85,]; let shifted : &
            'static [u8] = & [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![3,];
            __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [3,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![82,];
            __reduce_map.extend(__rustylr_tset11.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [82,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(6), 32),
            (::rusty_lr_core::TerminalSymbol::Term(7), 33),
            (::rusty_lr_core::TerminalSymbol::Term(8), 34),
            (::rusty_lr_core::TerminalSymbol::Term(10), 35),
            (::rusty_lr_core::TerminalSymbol::Term(11), 37),
            (::rusty_lr_core::TerminalSymbol::Term(12), 38),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![11,]; __reduce_map
            .extend(__rustylr_tset11.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [11, 22, 23, 24, 25, 27, 31,]; let shifted : & 'static [u8]
            = & [1, 1, 1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 5),
            (::rusty_lr_core::TerminalSymbol::Term(13), 8),
            (::rusty_lr_core::TerminalSymbol::Term(14), 9),
            (::rusty_lr_core::TerminalSymbol::Term(16), 12),
            (::rusty_lr_core::TerminalSymbol::Term(19), 13),
            (::rusty_lr_core::TerminalSymbol::Term(21), 14),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::TokenMapped, 71),
            (GrammarNonTerminals::TerminalSet, 30), (GrammarNonTerminals::Pattern, 69),],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![84,]; __reduce_map.extend(__rustylr_tset1.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, ruleset : { let rules : & 'static [u8] = & [11, 12, 19, 20, 21, 22, 23,
            24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 83, 84,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![83,];
            __reduce_map.extend(__rustylr_tset11.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [83,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(4), 73),], shift_goto_map_nonterm
            : vec![(GrammarNonTerminals::PrecDef, 83),
            (GrammarNonTerminals::_PrecDefPlus17, 84),
            (GrammarNonTerminals::_PrecDefStar18, 86),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![89,]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [5, 6, 7, 8, 9, 10, 86, 87, 88, 89,]; let
            shifted : & 'static [u8] = & [1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(34), 74),
            (::rusty_lr_core::TerminalSymbol::Term(39), 79),
            (::rusty_lr_core::TerminalSymbol::Error, 82),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [6, 7, 8, 9, 10,]; let shifted : &
            'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 75),
            (::rusty_lr_core::TerminalSymbol::Term(16), 76),
            (::rusty_lr_core::TerminalSymbol::Error, 77),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::IdentOrLiteral, 78),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [6, 7, 39, 40,]; let
            shifted : & 'static [u8] = & [2, 2, 0, 0,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule :
            rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![39,];
            __reduce_map.extend(__rustylr_tset15.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [39,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![40,];
            __reduce_map.extend(__rustylr_tset15.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [40,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![7,];
            __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [7,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![6,];
            __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [6,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(16), 80),
            (::rusty_lr_core::TerminalSymbol::Error, 81),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [8, 9,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![8,];
            __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [8,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![9,];
            __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [9,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![10,];
            __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [10,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![86,];
            __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [86,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(4), 73),], shift_goto_map_nonterm
            : vec![(GrammarNonTerminals::PrecDef, 85),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![88,]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [6, 7, 8, 9, 10, 87, 88,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 1, 1,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule :
            rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![87,];
            __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, ruleset : { let rules : &
            'static [u8] = & [87,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(18), 87),],
            shift_goto_map_nonterm : vec![(GrammarNonTerminals::Action, 88),], reduce_map
            : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![38,]; __reduce_map.extend(__rustylr_tset13.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, ruleset : { let rules : & 'static [u8] = & [5, 37, 38,]; let shifted : &
            'static [u8] = & [2, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![37,];
            __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [37,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![5,];
            __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [5,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![4,];
            __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [4,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(23), 91),
            (::rusty_lr_core::TerminalSymbol::Term(24), 98),
            (::rusty_lr_core::TerminalSymbol::Term(25), 103),
            (::rusty_lr_core::TerminalSymbol::Term(26), 156),
            (::rusty_lr_core::TerminalSymbol::Term(27), 161),
            (::rusty_lr_core::TerminalSymbol::Term(28), 164),
            (::rusty_lr_core::TerminalSymbol::Term(29), 168),
            (::rusty_lr_core::TerminalSymbol::Term(30), 172),
            (::rusty_lr_core::TerminalSymbol::Term(31), 176),
            (::rusty_lr_core::TerminalSymbol::Term(32), 180),
            (::rusty_lr_core::TerminalSymbol::Term(33), 184),
            (::rusty_lr_core::TerminalSymbol::Term(35), 188),
            (::rusty_lr_core::TerminalSymbol::Term(36), 193),
            (::rusty_lr_core::TerminalSymbol::Term(37), 197),
            (::rusty_lr_core::TerminalSymbol::Term(38), 201),
            (::rusty_lr_core::TerminalSymbol::Term(40), 209),
            (::rusty_lr_core::TerminalSymbol::Term(41), 213),
            (::rusty_lr_core::TerminalSymbol::Term(42), 217),
            (::rusty_lr_core::TerminalSymbol::Error, 221),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [42, 43, 44, 45, 46, 47, 48, 49,
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
            69, 70, 71, 72, 73, 74, 75, 76, 77, 78,]; let shifted : & 'static [u8] = &
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 75),
            (::rusty_lr_core::TerminalSymbol::Term(16), 76),
            (::rusty_lr_core::TerminalSymbol::Error, 92),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::IdentOrLiteral, 94),
            (GrammarNonTerminals::_IdentOrLiteralPlus28, 95),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [39, 40, 52, 53,
            149, 150,]; let shifted : & 'static [u8] = & [0, 0, 2, 2, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 93),], shift_goto_map_nonterm
            : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [53,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![53,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [53,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![149,];
            __reduce_map.extend(__rustylr_tset16.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [149,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 75),
            (::rusty_lr_core::TerminalSymbol::Term(2), 96),
            (::rusty_lr_core::TerminalSymbol::Term(16), 76),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::IdentOrLiteral, 97),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [39, 40, 52, 150,];
            let shifted : & 'static [u8] = & [0, 0, 3, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef
            { rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![52,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [52,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![150,];
            __reduce_map.extend(__rustylr_tset16.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [150,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 75),
            (::rusty_lr_core::TerminalSymbol::Term(16), 76),
            (::rusty_lr_core::TerminalSymbol::Error, 99),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::IdentOrLiteral, 94),
            (GrammarNonTerminals::_IdentOrLiteralPlus28, 101),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [39, 40, 54, 55,
            149, 150,]; let shifted : & 'static [u8] = & [0, 0, 2, 2, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 100),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [55,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![55,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [55,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 75),
            (::rusty_lr_core::TerminalSymbol::Term(2), 102),
            (::rusty_lr_core::TerminalSymbol::Term(16), 76),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::IdentOrLiteral, 97),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [39, 40, 54, 150,];
            let shifted : & 'static [u8] = & [0, 0, 3, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef
            { rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![54,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [54,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 104),
            (::rusty_lr_core::TerminalSymbol::Error, 154),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [42, 43, 44,]; let shifted : &
            'static [u8] = & [2, 2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 105),
            (::rusty_lr_core::TerminalSymbol::Term(1), 106),
            (::rusty_lr_core::TerminalSymbol::Term(2), 107),
            (::rusty_lr_core::TerminalSymbol::Term(3), 108),
            (::rusty_lr_core::TerminalSymbol::Term(4), 109),
            (::rusty_lr_core::TerminalSymbol::Term(5), 110),
            (::rusty_lr_core::TerminalSymbol::Term(6), 111),
            (::rusty_lr_core::TerminalSymbol::Term(7), 112),
            (::rusty_lr_core::TerminalSymbol::Term(8), 113),
            (::rusty_lr_core::TerminalSymbol::Term(9), 114),
            (::rusty_lr_core::TerminalSymbol::Term(10), 115),
            (::rusty_lr_core::TerminalSymbol::Term(11), 116),
            (::rusty_lr_core::TerminalSymbol::Term(12), 117),
            (::rusty_lr_core::TerminalSymbol::Term(13), 118),
            (::rusty_lr_core::TerminalSymbol::Term(14), 119),
            (::rusty_lr_core::TerminalSymbol::Term(15), 120),
            (::rusty_lr_core::TerminalSymbol::Term(16), 121),
            (::rusty_lr_core::TerminalSymbol::Term(17), 122),
            (::rusty_lr_core::TerminalSymbol::Term(18), 123),
            (::rusty_lr_core::TerminalSymbol::Term(19), 124),
            (::rusty_lr_core::TerminalSymbol::Term(20), 125),
            (::rusty_lr_core::TerminalSymbol::Term(21), 126),
            (::rusty_lr_core::TerminalSymbol::Term(22), 127),
            (::rusty_lr_core::TerminalSymbol::Term(23), 128),
            (::rusty_lr_core::TerminalSymbol::Term(24), 129),
            (::rusty_lr_core::TerminalSymbol::Term(25), 130),
            (::rusty_lr_core::TerminalSymbol::Term(26), 131),
            (::rusty_lr_core::TerminalSymbol::Term(27), 132),
            (::rusty_lr_core::TerminalSymbol::Term(28), 133),
            (::rusty_lr_core::TerminalSymbol::Term(29), 134),
            (::rusty_lr_core::TerminalSymbol::Term(30), 135),
            (::rusty_lr_core::TerminalSymbol::Term(31), 136),
            (::rusty_lr_core::TerminalSymbol::Term(32), 137),
            (::rusty_lr_core::TerminalSymbol::Term(33), 138),
            (::rusty_lr_core::TerminalSymbol::Term(34), 139),
            (::rusty_lr_core::TerminalSymbol::Term(35), 140),
            (::rusty_lr_core::TerminalSymbol::Term(36), 141),
            (::rusty_lr_core::TerminalSymbol::Term(37), 142),
            (::rusty_lr_core::TerminalSymbol::Term(38), 143),
            (::rusty_lr_core::TerminalSymbol::Term(39), 144),
            (::rusty_lr_core::TerminalSymbol::Term(40), 145),
            (::rusty_lr_core::TerminalSymbol::Term(41), 146),
            (::rusty_lr_core::TerminalSymbol::Term(42), 147),
            (::rusty_lr_core::TerminalSymbol::Term(43), 148),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RustCode, 149), (GrammarNonTerminals::_TermSet26,
            151), (GrammarNonTerminals::__TermSet26Plus27, 152),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [41, 42, 43, 104,
            105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
            120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
            135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,]; let
            shifted : & 'static [u8] = & [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![104,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [104,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![105,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [105,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![43,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [43,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![106,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [106,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![107,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [107,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![108,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [108,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![109,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [109,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![110,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [110,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![111,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [111,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![112,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [112,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![113,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [113,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![114,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [114,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![115,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [115,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![116,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [116,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![117,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [117,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![118,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [118,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![119,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [119,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![120,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [120,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![121,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [121,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![122,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [122,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![123,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [123,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![124,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [124,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![125,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [125,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![126,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [126,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![127,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [127,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![128,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [128,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![129,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [129,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![130,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [130,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![131,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [131,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![132,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [132,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![133,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [133,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![134,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [134,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![135,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [135,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![136,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [136,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![137,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [137,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![138,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [138,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![139,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [139,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![140,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [140,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![141,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [141,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![142,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [142,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![143,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [143,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![144,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [144,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![145,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [145,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![146,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [146,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 150),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [42,]; let shifted : & 'static
            [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![42,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [42,]; let shifted : & 'static [u8] = & [5,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![147,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [147,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 105),
            (::rusty_lr_core::TerminalSymbol::Term(1), 106),
            (::rusty_lr_core::TerminalSymbol::Term(3), 108),
            (::rusty_lr_core::TerminalSymbol::Term(4), 109),
            (::rusty_lr_core::TerminalSymbol::Term(5), 110),
            (::rusty_lr_core::TerminalSymbol::Term(6), 111),
            (::rusty_lr_core::TerminalSymbol::Term(7), 112),
            (::rusty_lr_core::TerminalSymbol::Term(8), 113),
            (::rusty_lr_core::TerminalSymbol::Term(9), 114),
            (::rusty_lr_core::TerminalSymbol::Term(10), 115),
            (::rusty_lr_core::TerminalSymbol::Term(11), 116),
            (::rusty_lr_core::TerminalSymbol::Term(12), 117),
            (::rusty_lr_core::TerminalSymbol::Term(13), 118),
            (::rusty_lr_core::TerminalSymbol::Term(14), 119),
            (::rusty_lr_core::TerminalSymbol::Term(15), 120),
            (::rusty_lr_core::TerminalSymbol::Term(16), 121),
            (::rusty_lr_core::TerminalSymbol::Term(17), 122),
            (::rusty_lr_core::TerminalSymbol::Term(18), 123),
            (::rusty_lr_core::TerminalSymbol::Term(19), 124),
            (::rusty_lr_core::TerminalSymbol::Term(20), 125),
            (::rusty_lr_core::TerminalSymbol::Term(21), 126),
            (::rusty_lr_core::TerminalSymbol::Term(22), 127),
            (::rusty_lr_core::TerminalSymbol::Term(23), 128),
            (::rusty_lr_core::TerminalSymbol::Term(24), 129),
            (::rusty_lr_core::TerminalSymbol::Term(25), 130),
            (::rusty_lr_core::TerminalSymbol::Term(26), 131),
            (::rusty_lr_core::TerminalSymbol::Term(27), 132),
            (::rusty_lr_core::TerminalSymbol::Term(28), 133),
            (::rusty_lr_core::TerminalSymbol::Term(29), 134),
            (::rusty_lr_core::TerminalSymbol::Term(30), 135),
            (::rusty_lr_core::TerminalSymbol::Term(31), 136),
            (::rusty_lr_core::TerminalSymbol::Term(32), 137),
            (::rusty_lr_core::TerminalSymbol::Term(33), 138),
            (::rusty_lr_core::TerminalSymbol::Term(34), 139),
            (::rusty_lr_core::TerminalSymbol::Term(35), 140),
            (::rusty_lr_core::TerminalSymbol::Term(36), 141),
            (::rusty_lr_core::TerminalSymbol::Term(37), 142),
            (::rusty_lr_core::TerminalSymbol::Term(38), 143),
            (::rusty_lr_core::TerminalSymbol::Term(39), 144),
            (::rusty_lr_core::TerminalSymbol::Term(40), 145),
            (::rusty_lr_core::TerminalSymbol::Term(41), 146),
            (::rusty_lr_core::TerminalSymbol::Term(42), 147),
            (::rusty_lr_core::TerminalSymbol::Term(43), 148),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::_TermSet26, 153),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![41,]; __reduce_map.extend(__rustylr_tset18.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [41, 104, 105, 106, 107, 108, 109, 110, 111,
            112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
            127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
            142, 143, 144, 145, 146, 148,]; let shifted : & 'static [u8] = & [1, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef
            { rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![148,];
            __reduce_map.extend(__rustylr_tset17.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [148,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 155),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [44,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![44,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [44,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 157),
            (::rusty_lr_core::TerminalSymbol::Error, 159),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [45, 46,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 158),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [45,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![45,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [45,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 160),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [46,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![46,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [46,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Error, 162),], shift_goto_map_nonterm
            : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [47,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 163),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [47,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![47,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [47,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 105),
            (::rusty_lr_core::TerminalSymbol::Term(1), 106),
            (::rusty_lr_core::TerminalSymbol::Term(2), 165),
            (::rusty_lr_core::TerminalSymbol::Term(3), 108),
            (::rusty_lr_core::TerminalSymbol::Term(4), 109),
            (::rusty_lr_core::TerminalSymbol::Term(5), 110),
            (::rusty_lr_core::TerminalSymbol::Term(6), 111),
            (::rusty_lr_core::TerminalSymbol::Term(7), 112),
            (::rusty_lr_core::TerminalSymbol::Term(8), 113),
            (::rusty_lr_core::TerminalSymbol::Term(9), 114),
            (::rusty_lr_core::TerminalSymbol::Term(10), 115),
            (::rusty_lr_core::TerminalSymbol::Term(11), 116),
            (::rusty_lr_core::TerminalSymbol::Term(12), 117),
            (::rusty_lr_core::TerminalSymbol::Term(13), 118),
            (::rusty_lr_core::TerminalSymbol::Term(14), 119),
            (::rusty_lr_core::TerminalSymbol::Term(15), 120),
            (::rusty_lr_core::TerminalSymbol::Term(16), 121),
            (::rusty_lr_core::TerminalSymbol::Term(17), 122),
            (::rusty_lr_core::TerminalSymbol::Term(18), 123),
            (::rusty_lr_core::TerminalSymbol::Term(19), 124),
            (::rusty_lr_core::TerminalSymbol::Term(20), 125),
            (::rusty_lr_core::TerminalSymbol::Term(21), 126),
            (::rusty_lr_core::TerminalSymbol::Term(22), 127),
            (::rusty_lr_core::TerminalSymbol::Term(23), 128),
            (::rusty_lr_core::TerminalSymbol::Term(24), 129),
            (::rusty_lr_core::TerminalSymbol::Term(25), 130),
            (::rusty_lr_core::TerminalSymbol::Term(26), 131),
            (::rusty_lr_core::TerminalSymbol::Term(27), 132),
            (::rusty_lr_core::TerminalSymbol::Term(28), 133),
            (::rusty_lr_core::TerminalSymbol::Term(29), 134),
            (::rusty_lr_core::TerminalSymbol::Term(30), 135),
            (::rusty_lr_core::TerminalSymbol::Term(31), 136),
            (::rusty_lr_core::TerminalSymbol::Term(32), 137),
            (::rusty_lr_core::TerminalSymbol::Term(33), 138),
            (::rusty_lr_core::TerminalSymbol::Term(34), 139),
            (::rusty_lr_core::TerminalSymbol::Term(35), 140),
            (::rusty_lr_core::TerminalSymbol::Term(36), 141),
            (::rusty_lr_core::TerminalSymbol::Term(37), 142),
            (::rusty_lr_core::TerminalSymbol::Term(38), 143),
            (::rusty_lr_core::TerminalSymbol::Term(39), 144),
            (::rusty_lr_core::TerminalSymbol::Term(40), 145),
            (::rusty_lr_core::TerminalSymbol::Term(41), 146),
            (::rusty_lr_core::TerminalSymbol::Term(42), 147),
            (::rusty_lr_core::TerminalSymbol::Term(43), 148),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RustCode, 166), (GrammarNonTerminals::_TermSet26,
            151), (GrammarNonTerminals::__TermSet26Plus27, 152),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [41, 48, 49, 104,
            105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
            120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
            135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,]; let
            shifted : & 'static [u8] = & [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![49,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [49,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 167),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [48,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![48,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [48,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 105),
            (::rusty_lr_core::TerminalSymbol::Term(1), 106),
            (::rusty_lr_core::TerminalSymbol::Term(2), 169),
            (::rusty_lr_core::TerminalSymbol::Term(3), 108),
            (::rusty_lr_core::TerminalSymbol::Term(4), 109),
            (::rusty_lr_core::TerminalSymbol::Term(5), 110),
            (::rusty_lr_core::TerminalSymbol::Term(6), 111),
            (::rusty_lr_core::TerminalSymbol::Term(7), 112),
            (::rusty_lr_core::TerminalSymbol::Term(8), 113),
            (::rusty_lr_core::TerminalSymbol::Term(9), 114),
            (::rusty_lr_core::TerminalSymbol::Term(10), 115),
            (::rusty_lr_core::TerminalSymbol::Term(11), 116),
            (::rusty_lr_core::TerminalSymbol::Term(12), 117),
            (::rusty_lr_core::TerminalSymbol::Term(13), 118),
            (::rusty_lr_core::TerminalSymbol::Term(14), 119),
            (::rusty_lr_core::TerminalSymbol::Term(15), 120),
            (::rusty_lr_core::TerminalSymbol::Term(16), 121),
            (::rusty_lr_core::TerminalSymbol::Term(17), 122),
            (::rusty_lr_core::TerminalSymbol::Term(18), 123),
            (::rusty_lr_core::TerminalSymbol::Term(19), 124),
            (::rusty_lr_core::TerminalSymbol::Term(20), 125),
            (::rusty_lr_core::TerminalSymbol::Term(21), 126),
            (::rusty_lr_core::TerminalSymbol::Term(22), 127),
            (::rusty_lr_core::TerminalSymbol::Term(23), 128),
            (::rusty_lr_core::TerminalSymbol::Term(24), 129),
            (::rusty_lr_core::TerminalSymbol::Term(25), 130),
            (::rusty_lr_core::TerminalSymbol::Term(26), 131),
            (::rusty_lr_core::TerminalSymbol::Term(27), 132),
            (::rusty_lr_core::TerminalSymbol::Term(28), 133),
            (::rusty_lr_core::TerminalSymbol::Term(29), 134),
            (::rusty_lr_core::TerminalSymbol::Term(30), 135),
            (::rusty_lr_core::TerminalSymbol::Term(31), 136),
            (::rusty_lr_core::TerminalSymbol::Term(32), 137),
            (::rusty_lr_core::TerminalSymbol::Term(33), 138),
            (::rusty_lr_core::TerminalSymbol::Term(34), 139),
            (::rusty_lr_core::TerminalSymbol::Term(35), 140),
            (::rusty_lr_core::TerminalSymbol::Term(36), 141),
            (::rusty_lr_core::TerminalSymbol::Term(37), 142),
            (::rusty_lr_core::TerminalSymbol::Term(38), 143),
            (::rusty_lr_core::TerminalSymbol::Term(39), 144),
            (::rusty_lr_core::TerminalSymbol::Term(40), 145),
            (::rusty_lr_core::TerminalSymbol::Term(41), 146),
            (::rusty_lr_core::TerminalSymbol::Term(42), 147),
            (::rusty_lr_core::TerminalSymbol::Term(43), 148),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RustCode, 170), (GrammarNonTerminals::_TermSet26,
            151), (GrammarNonTerminals::__TermSet26Plus27, 152),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [41, 50, 51, 104,
            105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
            120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
            135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,]; let
            shifted : & 'static [u8] = & [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![51,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [51,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 171),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [50,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![50,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [50,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 105),
            (::rusty_lr_core::TerminalSymbol::Term(1), 106),
            (::rusty_lr_core::TerminalSymbol::Term(2), 173),
            (::rusty_lr_core::TerminalSymbol::Term(3), 108),
            (::rusty_lr_core::TerminalSymbol::Term(4), 109),
            (::rusty_lr_core::TerminalSymbol::Term(5), 110),
            (::rusty_lr_core::TerminalSymbol::Term(6), 111),
            (::rusty_lr_core::TerminalSymbol::Term(7), 112),
            (::rusty_lr_core::TerminalSymbol::Term(8), 113),
            (::rusty_lr_core::TerminalSymbol::Term(9), 114),
            (::rusty_lr_core::TerminalSymbol::Term(10), 115),
            (::rusty_lr_core::TerminalSymbol::Term(11), 116),
            (::rusty_lr_core::TerminalSymbol::Term(12), 117),
            (::rusty_lr_core::TerminalSymbol::Term(13), 118),
            (::rusty_lr_core::TerminalSymbol::Term(14), 119),
            (::rusty_lr_core::TerminalSymbol::Term(15), 120),
            (::rusty_lr_core::TerminalSymbol::Term(16), 121),
            (::rusty_lr_core::TerminalSymbol::Term(17), 122),
            (::rusty_lr_core::TerminalSymbol::Term(18), 123),
            (::rusty_lr_core::TerminalSymbol::Term(19), 124),
            (::rusty_lr_core::TerminalSymbol::Term(20), 125),
            (::rusty_lr_core::TerminalSymbol::Term(21), 126),
            (::rusty_lr_core::TerminalSymbol::Term(22), 127),
            (::rusty_lr_core::TerminalSymbol::Term(23), 128),
            (::rusty_lr_core::TerminalSymbol::Term(24), 129),
            (::rusty_lr_core::TerminalSymbol::Term(25), 130),
            (::rusty_lr_core::TerminalSymbol::Term(26), 131),
            (::rusty_lr_core::TerminalSymbol::Term(27), 132),
            (::rusty_lr_core::TerminalSymbol::Term(28), 133),
            (::rusty_lr_core::TerminalSymbol::Term(29), 134),
            (::rusty_lr_core::TerminalSymbol::Term(30), 135),
            (::rusty_lr_core::TerminalSymbol::Term(31), 136),
            (::rusty_lr_core::TerminalSymbol::Term(32), 137),
            (::rusty_lr_core::TerminalSymbol::Term(33), 138),
            (::rusty_lr_core::TerminalSymbol::Term(34), 139),
            (::rusty_lr_core::TerminalSymbol::Term(35), 140),
            (::rusty_lr_core::TerminalSymbol::Term(36), 141),
            (::rusty_lr_core::TerminalSymbol::Term(37), 142),
            (::rusty_lr_core::TerminalSymbol::Term(38), 143),
            (::rusty_lr_core::TerminalSymbol::Term(39), 144),
            (::rusty_lr_core::TerminalSymbol::Term(40), 145),
            (::rusty_lr_core::TerminalSymbol::Term(41), 146),
            (::rusty_lr_core::TerminalSymbol::Term(42), 147),
            (::rusty_lr_core::TerminalSymbol::Term(43), 148),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RustCode, 174), (GrammarNonTerminals::_TermSet26,
            151), (GrammarNonTerminals::__TermSet26Plus27, 152),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [41, 58, 59, 104,
            105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
            120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
            135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,]; let
            shifted : & 'static [u8] = & [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![59,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [59,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 175),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [58,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![58,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [58,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 105),
            (::rusty_lr_core::TerminalSymbol::Term(1), 106),
            (::rusty_lr_core::TerminalSymbol::Term(2), 177),
            (::rusty_lr_core::TerminalSymbol::Term(3), 108),
            (::rusty_lr_core::TerminalSymbol::Term(4), 109),
            (::rusty_lr_core::TerminalSymbol::Term(5), 110),
            (::rusty_lr_core::TerminalSymbol::Term(6), 111),
            (::rusty_lr_core::TerminalSymbol::Term(7), 112),
            (::rusty_lr_core::TerminalSymbol::Term(8), 113),
            (::rusty_lr_core::TerminalSymbol::Term(9), 114),
            (::rusty_lr_core::TerminalSymbol::Term(10), 115),
            (::rusty_lr_core::TerminalSymbol::Term(11), 116),
            (::rusty_lr_core::TerminalSymbol::Term(12), 117),
            (::rusty_lr_core::TerminalSymbol::Term(13), 118),
            (::rusty_lr_core::TerminalSymbol::Term(14), 119),
            (::rusty_lr_core::TerminalSymbol::Term(15), 120),
            (::rusty_lr_core::TerminalSymbol::Term(16), 121),
            (::rusty_lr_core::TerminalSymbol::Term(17), 122),
            (::rusty_lr_core::TerminalSymbol::Term(18), 123),
            (::rusty_lr_core::TerminalSymbol::Term(19), 124),
            (::rusty_lr_core::TerminalSymbol::Term(20), 125),
            (::rusty_lr_core::TerminalSymbol::Term(21), 126),
            (::rusty_lr_core::TerminalSymbol::Term(22), 127),
            (::rusty_lr_core::TerminalSymbol::Term(23), 128),
            (::rusty_lr_core::TerminalSymbol::Term(24), 129),
            (::rusty_lr_core::TerminalSymbol::Term(25), 130),
            (::rusty_lr_core::TerminalSymbol::Term(26), 131),
            (::rusty_lr_core::TerminalSymbol::Term(27), 132),
            (::rusty_lr_core::TerminalSymbol::Term(28), 133),
            (::rusty_lr_core::TerminalSymbol::Term(29), 134),
            (::rusty_lr_core::TerminalSymbol::Term(30), 135),
            (::rusty_lr_core::TerminalSymbol::Term(31), 136),
            (::rusty_lr_core::TerminalSymbol::Term(32), 137),
            (::rusty_lr_core::TerminalSymbol::Term(33), 138),
            (::rusty_lr_core::TerminalSymbol::Term(34), 139),
            (::rusty_lr_core::TerminalSymbol::Term(35), 140),
            (::rusty_lr_core::TerminalSymbol::Term(36), 141),
            (::rusty_lr_core::TerminalSymbol::Term(37), 142),
            (::rusty_lr_core::TerminalSymbol::Term(38), 143),
            (::rusty_lr_core::TerminalSymbol::Term(39), 144),
            (::rusty_lr_core::TerminalSymbol::Term(40), 145),
            (::rusty_lr_core::TerminalSymbol::Term(41), 146),
            (::rusty_lr_core::TerminalSymbol::Term(42), 147),
            (::rusty_lr_core::TerminalSymbol::Term(43), 148),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RustCode, 178), (GrammarNonTerminals::_TermSet26,
            151), (GrammarNonTerminals::__TermSet26Plus27, 152),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [41, 60, 61, 104,
            105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
            120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
            135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,]; let
            shifted : & 'static [u8] = & [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![61,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [61,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 179),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [60,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![60,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [60,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 181),
            (::rusty_lr_core::TerminalSymbol::Error, 182),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [64, 65,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![64,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [64,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 183),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [65,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![65,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [65,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 185),
            (::rusty_lr_core::TerminalSymbol::Error, 186),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [62, 63,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![62,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [62,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 187),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [63,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![63,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [63,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 75),
            (::rusty_lr_core::TerminalSymbol::Term(16), 76),
            (::rusty_lr_core::TerminalSymbol::Error, 189),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::IdentOrLiteral, 94),
            (GrammarNonTerminals::_IdentOrLiteralPlus28, 191),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [39, 40, 56, 57,
            149, 150,]; let shifted : & 'static [u8] = & [0, 0, 2, 2, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 190),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [57,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![57,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [57,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 75),
            (::rusty_lr_core::TerminalSymbol::Term(2), 192),
            (::rusty_lr_core::TerminalSymbol::Term(16), 76),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::IdentOrLiteral, 97),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [39, 40, 56, 150,];
            let shifted : & 'static [u8] = & [0, 0, 3, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef
            { rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![56,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [56,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 194),
            (::rusty_lr_core::TerminalSymbol::Error, 195),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [66, 67,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![66,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [66,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 196),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [67,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![67,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [67,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 198),
            (::rusty_lr_core::TerminalSymbol::Error, 199),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [68, 69,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![68,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [68,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 200),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [69,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![69,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [69,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 202),
            (::rusty_lr_core::TerminalSymbol::Error, 203),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::_identPlus29, 205),
            (GrammarNonTerminals::_identStar30, 207),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![154,]; __reduce_map.extend(__rustylr_tset18.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [70, 71, 151, 152, 153, 154,]; let shifted : &
            'static [u8] = & [2, 2, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![151,];
            __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [151,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 204),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [71,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![71,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [71,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 206),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![153,];
            __reduce_map.extend(__rustylr_tset18.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [152, 153,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![152,];
            __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [152,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 208),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [70,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![70,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [70,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 105),
            (::rusty_lr_core::TerminalSymbol::Term(1), 106),
            (::rusty_lr_core::TerminalSymbol::Term(2), 210),
            (::rusty_lr_core::TerminalSymbol::Term(3), 108),
            (::rusty_lr_core::TerminalSymbol::Term(4), 109),
            (::rusty_lr_core::TerminalSymbol::Term(5), 110),
            (::rusty_lr_core::TerminalSymbol::Term(6), 111),
            (::rusty_lr_core::TerminalSymbol::Term(7), 112),
            (::rusty_lr_core::TerminalSymbol::Term(8), 113),
            (::rusty_lr_core::TerminalSymbol::Term(9), 114),
            (::rusty_lr_core::TerminalSymbol::Term(10), 115),
            (::rusty_lr_core::TerminalSymbol::Term(11), 116),
            (::rusty_lr_core::TerminalSymbol::Term(12), 117),
            (::rusty_lr_core::TerminalSymbol::Term(13), 118),
            (::rusty_lr_core::TerminalSymbol::Term(14), 119),
            (::rusty_lr_core::TerminalSymbol::Term(15), 120),
            (::rusty_lr_core::TerminalSymbol::Term(16), 121),
            (::rusty_lr_core::TerminalSymbol::Term(17), 122),
            (::rusty_lr_core::TerminalSymbol::Term(18), 123),
            (::rusty_lr_core::TerminalSymbol::Term(19), 124),
            (::rusty_lr_core::TerminalSymbol::Term(20), 125),
            (::rusty_lr_core::TerminalSymbol::Term(21), 126),
            (::rusty_lr_core::TerminalSymbol::Term(22), 127),
            (::rusty_lr_core::TerminalSymbol::Term(23), 128),
            (::rusty_lr_core::TerminalSymbol::Term(24), 129),
            (::rusty_lr_core::TerminalSymbol::Term(25), 130),
            (::rusty_lr_core::TerminalSymbol::Term(26), 131),
            (::rusty_lr_core::TerminalSymbol::Term(27), 132),
            (::rusty_lr_core::TerminalSymbol::Term(28), 133),
            (::rusty_lr_core::TerminalSymbol::Term(29), 134),
            (::rusty_lr_core::TerminalSymbol::Term(30), 135),
            (::rusty_lr_core::TerminalSymbol::Term(31), 136),
            (::rusty_lr_core::TerminalSymbol::Term(32), 137),
            (::rusty_lr_core::TerminalSymbol::Term(33), 138),
            (::rusty_lr_core::TerminalSymbol::Term(34), 139),
            (::rusty_lr_core::TerminalSymbol::Term(35), 140),
            (::rusty_lr_core::TerminalSymbol::Term(36), 141),
            (::rusty_lr_core::TerminalSymbol::Term(37), 142),
            (::rusty_lr_core::TerminalSymbol::Term(38), 143),
            (::rusty_lr_core::TerminalSymbol::Term(39), 144),
            (::rusty_lr_core::TerminalSymbol::Term(40), 145),
            (::rusty_lr_core::TerminalSymbol::Term(41), 146),
            (::rusty_lr_core::TerminalSymbol::Term(42), 147),
            (::rusty_lr_core::TerminalSymbol::Term(43), 148),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RustCode, 211), (GrammarNonTerminals::_TermSet26,
            151), (GrammarNonTerminals::__TermSet26Plus27, 152),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [41, 72, 73, 104,
            105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
            120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
            135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,]; let
            shifted : & 'static [u8] = & [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![73,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [73,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 212),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [72,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![72,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [72,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 214),
            (::rusty_lr_core::TerminalSymbol::Error, 215),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [74, 75,]; let shifted : & 'static
            [u8] = & [2, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted)
            | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![74,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [74,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 216),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [75,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![75,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [75,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 105),
            (::rusty_lr_core::TerminalSymbol::Term(1), 106),
            (::rusty_lr_core::TerminalSymbol::Term(2), 218),
            (::rusty_lr_core::TerminalSymbol::Term(3), 108),
            (::rusty_lr_core::TerminalSymbol::Term(4), 109),
            (::rusty_lr_core::TerminalSymbol::Term(5), 110),
            (::rusty_lr_core::TerminalSymbol::Term(6), 111),
            (::rusty_lr_core::TerminalSymbol::Term(7), 112),
            (::rusty_lr_core::TerminalSymbol::Term(8), 113),
            (::rusty_lr_core::TerminalSymbol::Term(9), 114),
            (::rusty_lr_core::TerminalSymbol::Term(10), 115),
            (::rusty_lr_core::TerminalSymbol::Term(11), 116),
            (::rusty_lr_core::TerminalSymbol::Term(12), 117),
            (::rusty_lr_core::TerminalSymbol::Term(13), 118),
            (::rusty_lr_core::TerminalSymbol::Term(14), 119),
            (::rusty_lr_core::TerminalSymbol::Term(15), 120),
            (::rusty_lr_core::TerminalSymbol::Term(16), 121),
            (::rusty_lr_core::TerminalSymbol::Term(17), 122),
            (::rusty_lr_core::TerminalSymbol::Term(18), 123),
            (::rusty_lr_core::TerminalSymbol::Term(19), 124),
            (::rusty_lr_core::TerminalSymbol::Term(20), 125),
            (::rusty_lr_core::TerminalSymbol::Term(21), 126),
            (::rusty_lr_core::TerminalSymbol::Term(22), 127),
            (::rusty_lr_core::TerminalSymbol::Term(23), 128),
            (::rusty_lr_core::TerminalSymbol::Term(24), 129),
            (::rusty_lr_core::TerminalSymbol::Term(25), 130),
            (::rusty_lr_core::TerminalSymbol::Term(26), 131),
            (::rusty_lr_core::TerminalSymbol::Term(27), 132),
            (::rusty_lr_core::TerminalSymbol::Term(28), 133),
            (::rusty_lr_core::TerminalSymbol::Term(29), 134),
            (::rusty_lr_core::TerminalSymbol::Term(30), 135),
            (::rusty_lr_core::TerminalSymbol::Term(31), 136),
            (::rusty_lr_core::TerminalSymbol::Term(32), 137),
            (::rusty_lr_core::TerminalSymbol::Term(33), 138),
            (::rusty_lr_core::TerminalSymbol::Term(34), 139),
            (::rusty_lr_core::TerminalSymbol::Term(35), 140),
            (::rusty_lr_core::TerminalSymbol::Term(36), 141),
            (::rusty_lr_core::TerminalSymbol::Term(37), 142),
            (::rusty_lr_core::TerminalSymbol::Term(38), 143),
            (::rusty_lr_core::TerminalSymbol::Term(39), 144),
            (::rusty_lr_core::TerminalSymbol::Term(40), 145),
            (::rusty_lr_core::TerminalSymbol::Term(41), 146),
            (::rusty_lr_core::TerminalSymbol::Term(42), 147),
            (::rusty_lr_core::TerminalSymbol::Term(43), 148),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::RustCode, 219), (GrammarNonTerminals::_TermSet26,
            151), (GrammarNonTerminals::__TermSet26Plus27, 152),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, ruleset : { let rules : & 'static [u8] = & [41, 76, 77, 104,
            105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
            120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
            135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,]; let
            shifted : & 'static [u8] = & [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![77,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [77,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 220),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [76,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![76,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [76,]; let shifted : & 'static [u8] = & [4,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(2), 222),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [78,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![78,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [78,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![79,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [79,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![80,];
            __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [80,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Term(0), 1),
            (::rusty_lr_core::TerminalSymbol::Term(4), 90),], shift_goto_map_nonterm :
            vec![(GrammarNonTerminals::Rule, 223), (GrammarNonTerminals::Directive, 224),
            (GrammarNonTerminals::GrammarLine, 225),
            (GrammarNonTerminals::_GrammarLinePlus31, 226),], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![155,]; __reduce_map.extend(__rustylr_tset20.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [0, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 155, 155, 156, 156,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![156,];
            __reduce_map.extend(__rustylr_tset20.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [156,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![(::rusty_lr_core::TerminalSymbol::Eof, 228),], shift_goto_map_nonterm :
            vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [157,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            ruleset : { let rules : & 'static [u8] = & [157,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
            ::rusty_lr_core::parser::state::IntermediateState { shift_goto_map_term :
            vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map
            = std::collections::BTreeMap::new(); let reduce_rules = vec![81,];
            __reduce_map.extend(__rustylr_tset20.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, ruleset : {
            let rules : & 'static [u8] = & [81,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr_core::rule::ShiftedRuleRef { rule : rule as usize, shifted :
            shifted as usize, } }).collect() } },
        ];
        let states: Vec<GrammarState> = states
            .into_iter()
            .map(|state| state.into())
            .collect();
        Self {
            rules,
            states,
            classes: vec![
                vec!["ident",], vec!["colon",], vec!["semicolon",], vec!["pipe",],
                vec!["percent",], vec!["equal",], vec!["plus",], vec!["star",],
                vec!["question",], vec!["caret",], vec!["minus",], vec!["exclamation",],
                vec!["slash",], vec!["dot",], vec!["dollar",], vec!["comma",],
                vec!["literal",], vec!["parengroup",], vec!["bracegroup",],
                vec!["lparen",], vec!["rparen",], vec!["lbracket",], vec!["rbracket",],
                vec!["left",], vec!["right",], vec!["token",], vec!["start",],
                vec!["eofdef",], vec!["tokentype",], vec!["userdata",],
                vec!["errortype",], vec!["moduleprefix",], vec!["lalr",], vec!["glr",],
                vec!["prec",], vec!["precedence",], vec!["nooptim",], vec!["dense",],
                vec!["trace",], vec!["dprec",], vec!["filter",], vec!["runtime",],
                vec!["location",],
            ],
        }
    }
}

// ==============================Generated Codes End===============================
        