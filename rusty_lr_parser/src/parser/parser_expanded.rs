// This file was generated by rustylr 0.7.1
//
// Input file: ../rusty_lr_parser/src/parser/parser.rs
// Output file: parser_expanded.rs
// ================================User Codes Begin================================
use crate::parser::args::GrammarArgs;
use crate::parser::args::PatternArgs;
use crate::parser::args::ReduceTypeArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::lexer::Lexed;
use crate::terminalset::TerminalSet;
use crate::terminalset::TerminalSetItem;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Punct;
use proc_macro2::Spacing;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use rusty_lr_core::ReduceType;
use std::boxed::Box;
macro_rules ! punct (($ l : literal) => { Punct :: new ($ l , Spacing :: Alone) } ;) ;
// =================================User Codes End=================================
/*
====================================Grammar=====================================
Rule -> ident RuleType colon RuleLines semicolon
RuleType -> parengroup
RuleType ->
RuleLines -> RuleLines pipe RuleLine
RuleLines -> RuleLine
RuleLine -> _RustyLRGenerated0 Action
_RustyLRGenerated1 -> TokenMapped
_RustyLRGenerated1 -> _RustyLRGenerated1 TokenMapped
_RustyLRGenerated0 -> _RustyLRGenerated1
_RustyLRGenerated0 ->
TokenMapped -> Pattern
TokenMapped -> ident equal Pattern
TerminalSetItem -> ident
TerminalSetItem -> ident minus ident
TerminalSet -> lbracket _RustyLRGenerated2 _RustyLRGenerated3 rbracket
_RustyLRGenerated2 -> caret
_RustyLRGenerated2 ->
_RustyLRGenerated4 -> TerminalSetItem
_RustyLRGenerated4 -> _RustyLRGenerated4 TerminalSetItem
_RustyLRGenerated3 -> _RustyLRGenerated4
_RustyLRGenerated3 ->
Pattern -> ident
Pattern -> Pattern plus
Pattern -> Pattern star
Pattern -> Pattern question
Pattern -> Pattern exclamation
Pattern -> TerminalSet
Action -> bracegroup
Action ->
TokenDef -> token ident RustCode semicolon
RustCode -> _RustyLRGenerated5
_RustyLRGenerated6 -> bracegroup
_RustyLRGenerated6 -> bracketgroup
_RustyLRGenerated6 -> caret
_RustyLRGenerated6 -> colon
_RustyLRGenerated6 -> equal
_RustyLRGenerated6 -> exclamation
_RustyLRGenerated6 -> ident
_RustyLRGenerated6 -> literal
_RustyLRGenerated6 -> minus
_RustyLRGenerated6 -> nonegroup
_RustyLRGenerated6 -> otherpunct
_RustyLRGenerated6 -> parengroup
_RustyLRGenerated6 -> percent
_RustyLRGenerated6 -> pipe
_RustyLRGenerated6 -> plus
_RustyLRGenerated6 -> question
_RustyLRGenerated6 -> star
_RustyLRGenerated5 -> _RustyLRGenerated6
_RustyLRGenerated5 -> _RustyLRGenerated5 _RustyLRGenerated6
StartDef -> start ident semicolon
EofDef -> eofdef RustCode semicolon
TokenTypeDef -> tokentype RustCode semicolon
UserDataDef -> userdata RustCode semicolon
ReduceType -> left
ReduceType -> right
ReduceDef -> ReduceType ident semicolon
ReduceDef -> ReduceType TerminalSet semicolon
ErrorDef -> errortype RustCode semicolon
ModulePrefixDef -> moduleprefix RustCode semicolon
Grammar -> Grammar Rule
Grammar -> Rule
Grammar -> Grammar TokenDef
Grammar -> TokenDef
Grammar -> Grammar StartDef
Grammar -> StartDef
Grammar -> Grammar EofDef
Grammar -> EofDef
Grammar -> Grammar TokenTypeDef
Grammar -> TokenTypeDef
Grammar -> Grammar UserDataDef
Grammar -> UserDataDef
Grammar -> Grammar ReduceDef
Grammar -> ReduceDef
Grammar -> Grammar ErrorDef
Grammar -> ErrorDef
Grammar -> Grammar ModulePrefixDef
Grammar -> ModulePrefixDef
Augmented -> Grammar eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarRule = ::rusty_lr_core::ProductionRule<Lexed, GrammarNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarState = ::rusty_lr_core::State<Lexed, GrammarNonTerminals>;
#[doc = r" type alias for `ParseError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarParseError = ::rusty_lr_core::ParseError<Lexed, String>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarInvalidTerminalError = ::rusty_lr_core::InvalidTerminalError<Lexed>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types)]
#[derive(
    Debug,
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum GrammarNonTerminals {
    Rule,
    RuleType,
    RuleLines,
    RuleLine,
    _RustyLRGenerated1,
    _RustyLRGenerated0,
    TokenMapped,
    TerminalSetItem,
    TerminalSet,
    _RustyLRGenerated2,
    _RustyLRGenerated4,
    _RustyLRGenerated3,
    Pattern,
    Action,
    TokenDef,
    RustCode,
    _RustyLRGenerated6,
    _RustyLRGenerated5,
    StartDef,
    EofDef,
    TokenTypeDef,
    UserDataDef,
    ReduceType,
    ReduceDef,
    ErrorDef,
    ModulePrefixDef,
    Grammar,
    Augmented,
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrammarNonTerminals::Rule => write!(f, "Rule"),
            GrammarNonTerminals::RuleType => write!(f, "RuleType"),
            GrammarNonTerminals::RuleLines => write!(f, "RuleLines"),
            GrammarNonTerminals::RuleLine => write!(f, "RuleLine"),
            GrammarNonTerminals::_RustyLRGenerated1 => write!(f, "_RustyLRGenerated1"),
            GrammarNonTerminals::_RustyLRGenerated0 => write!(f, "_RustyLRGenerated0"),
            GrammarNonTerminals::TokenMapped => write!(f, "TokenMapped"),
            GrammarNonTerminals::TerminalSetItem => write!(f, "TerminalSetItem"),
            GrammarNonTerminals::TerminalSet => write!(f, "TerminalSet"),
            GrammarNonTerminals::_RustyLRGenerated2 => write!(f, "_RustyLRGenerated2"),
            GrammarNonTerminals::_RustyLRGenerated4 => write!(f, "_RustyLRGenerated4"),
            GrammarNonTerminals::_RustyLRGenerated3 => write!(f, "_RustyLRGenerated3"),
            GrammarNonTerminals::Pattern => write!(f, "Pattern"),
            GrammarNonTerminals::Action => write!(f, "Action"),
            GrammarNonTerminals::TokenDef => write!(f, "TokenDef"),
            GrammarNonTerminals::RustCode => write!(f, "RustCode"),
            GrammarNonTerminals::_RustyLRGenerated6 => write!(f, "_RustyLRGenerated6"),
            GrammarNonTerminals::_RustyLRGenerated5 => write!(f, "_RustyLRGenerated5"),
            GrammarNonTerminals::StartDef => write!(f, "StartDef"),
            GrammarNonTerminals::EofDef => write!(f, "EofDef"),
            GrammarNonTerminals::TokenTypeDef => write!(f, "TokenTypeDef"),
            GrammarNonTerminals::UserDataDef => write!(f, "UserDataDef"),
            GrammarNonTerminals::ReduceType => write!(f, "ReduceType"),
            GrammarNonTerminals::ReduceDef => write!(f, "ReduceDef"),
            GrammarNonTerminals::ErrorDef => write!(f, "ErrorDef"),
            GrammarNonTerminals::ModulePrefixDef => write!(f, "ModulePrefixDef"),
            GrammarNonTerminals::Grammar => write!(f, "Grammar"),
            GrammarNonTerminals::Augmented => write!(f, "Augmented"),
        }
    }
}
#[doc = r" struct that holds internal parser data, for reduce action and state transition"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarContext {
    #[doc = r" state stack, user must not modify this"]
    pub state_stack: Vec<usize>,
    __rustylr_generated_terminal_stack: Vec<Lexed>,
    __rustylr_generated_stack_1: Vec<RuleDefArgs>,
    __rustylr_generated_stack_2: Vec<Option<Group>>,
    __rustylr_generated_stack_3: Vec<Vec<RuleLineArgs>>,
    __rustylr_generated_stack_4: Vec<RuleLineArgs>,
    __rustylr_generated_stack_5: Vec<Vec<(Option<Ident>, PatternArgs)>>,
    __rustylr_generated_stack_6: Vec<(Option<Ident>, PatternArgs)>,
    __rustylr_generated_stack_7: Vec<TerminalSetItem>,
    __rustylr_generated_stack_8: Vec<TerminalSet>,
    __rustylr_generated_stack_9: Vec<Option<Lexed>>,
    __rustylr_generated_stack_10: Vec<Vec<TerminalSetItem>>,
    __rustylr_generated_stack_11: Vec<PatternArgs>,
    __rustylr_generated_stack_12: Vec<(Ident, TokenStream)>,
    __rustylr_generated_stack_13: Vec<TokenStream>,
    __rustylr_generated_stack_14: Vec<Vec<Lexed>>,
    __rustylr_generated_stack_15: Vec<Ident>,
    __rustylr_generated_stack_16: Vec<(Span, TokenStream)>,
    __rustylr_generated_stack_17: Vec<ReduceType>,
    __rustylr_generated_stack_18: Vec<(ReduceTypeArgs, ReduceType)>,
    __rustylr_generated_stack_19: Vec<GrammarArgs>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarContext {
    pub fn new() -> Self {
        Self {
            state_stack: vec![0],
            __rustylr_generated_terminal_stack: Vec::new(),
            __rustylr_generated_stack_1: Vec::new(),
            __rustylr_generated_stack_2: Vec::new(),
            __rustylr_generated_stack_3: Vec::new(),
            __rustylr_generated_stack_4: Vec::new(),
            __rustylr_generated_stack_5: Vec::new(),
            __rustylr_generated_stack_6: Vec::new(),
            __rustylr_generated_stack_7: Vec::new(),
            __rustylr_generated_stack_8: Vec::new(),
            __rustylr_generated_stack_9: Vec::new(),
            __rustylr_generated_stack_10: Vec::new(),
            __rustylr_generated_stack_11: Vec::new(),
            __rustylr_generated_stack_12: Vec::new(),
            __rustylr_generated_stack_13: Vec::new(),
            __rustylr_generated_stack_14: Vec::new(),
            __rustylr_generated_stack_15: Vec::new(),
            __rustylr_generated_stack_16: Vec::new(),
            __rustylr_generated_stack_17: Vec::new(),
            __rustylr_generated_stack_18: Vec::new(),
            __rustylr_generated_stack_19: Vec::new(),
        }
    }
    fn reduce_Rule_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        let mut colon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleType = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_1.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("Rule-Ident");
            };
            if let Lexed::Colon(colon) = colon {
                let span = colon.span();
                if let Some(fisrt) = RuleLines.first_mut() {
                    fisrt.separator_span = span;
                }
            } else {
                unreachable!("Rule-Colon2");
            }
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.stream()),
                rule_lines: RuleLines,
            }
        });
        Ok(())
    }
    fn reduce_RuleType_0(&mut self) -> Result<(), String> {
        let mut parengroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::ParenGroup(group) = parengroup {
                group
            } else {
                unreachable!("RuleType - Group");
            }
        });
        Ok(())
    }
    fn reduce_RuleType_1(&mut self) -> Result<(), String> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_RuleLines_0(&mut self) -> Result<(), String> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        let mut pipe = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        self.__rustylr_generated_stack_3.push({
            if let Lexed::Pipe(punct) = pipe {
                RuleLine.separator_span = punct.span();
                RuleLines.push(RuleLine);
            }
            RuleLines
        });
        Ok(())
    }
    fn reduce_RuleLines_1(&mut self) -> Result<(), String> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        self.__rustylr_generated_stack_3.push({ vec![RuleLine] });
        Ok(())
    }
    fn reduce_RuleLine_0(&mut self) -> Result<(), String> {
        let mut Action = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut TokenMapped = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_4.push({
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
                separator_span: Span::call_site(),
            }
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated1_0(&mut self) -> Result<(), String> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        self.__rustylr_generated_stack_5.push({ vec![A] });
        Ok(())
    }
    fn reduce__RustyLRGenerated1_1(&mut self) -> Result<(), String> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_5.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated0_0(&mut self) -> Result<(), String> {
        let mut Ap = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_5.push({ Ap });
        Ok(())
    }
    fn reduce__RustyLRGenerated0_1(&mut self) -> Result<(), String> {
        self.__rustylr_generated_stack_5.push({ vec![] });
        Ok(())
    }
    fn reduce_TokenMapped_0(&mut self) -> Result<(), String> {
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_6.push({ (None, Pattern) });
        Ok(())
    }
    fn reduce_TokenMapped_1(&mut self) -> Result<(), String> {
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut equal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            if let Lexed::Ident(ident) = ident {
                (Some(ident), Pattern)
            } else {
                unreachable!("Token-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_0(&mut self) -> Result<(), String> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            TerminalSetItem::Terminal(ident)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_1(&mut self) -> Result<(), String> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let first = if let Lexed::Ident(first) = first {
                first
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            let last = if let Lexed::Ident(last) = last {
                last
            } else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::Range(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSet_0(&mut self) -> Result<(), String> {
        let mut rbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSetItem = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut caret = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut lbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            let open_span = if let Lexed::LBracket(lbracket) = lbracket {
                lbracket
            } else {
                unreachable!("TerminalSet-Open");
            };
            let close_span = if let Lexed::RBracket(rbracket) = rbracket {
                rbracket
            } else {
                unreachable!("TerminalSet-Close");
            };
            TerminalSet {
                negate: caret.is_some(),
                items: TerminalSetItem,
                open_span,
                close_span,
            }
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated2_0(&mut self) -> Result<(), String> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({ Some(A) });
        Ok(())
    }
    fn reduce__RustyLRGenerated2_1(&mut self) -> Result<(), String> {
        self.__rustylr_generated_stack_9.push({ None });
        Ok(())
    }
    fn reduce__RustyLRGenerated4_0(&mut self) -> Result<(), String> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        self.__rustylr_generated_stack_10.push({ vec![A] });
        Ok(())
    }
    fn reduce__RustyLRGenerated4_1(&mut self) -> Result<(), String> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_10.pop().unwrap();
        self.__rustylr_generated_stack_10.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated3_0(&mut self) -> Result<(), String> {
        let mut Ap = self.__rustylr_generated_stack_10.pop().unwrap();
        self.__rustylr_generated_stack_10.push({ Ap });
        Ok(())
    }
    fn reduce__RustyLRGenerated3_1(&mut self) -> Result<(), String> {
        self.__rustylr_generated_stack_10.push({ vec![] });
        Ok(())
    }
    fn reduce_Pattern_0(&mut self) -> Result<(), String> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Ident(ident) = ident {
                let span = ident.span();
                PatternArgs::Ident(ident, span)
            } else {
                unreachable!("Pattern-Ident");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_1(&mut self) -> Result<(), String> {
        let mut plus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Plus(plus) = plus {
                PatternArgs::Plus(Box::new(Pattern), plus.span())
            } else {
                unreachable!("Pattern-Plus");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_2(&mut self) -> Result<(), String> {
        let mut star = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Star(star) = star {
                PatternArgs::Star(Box::new(Pattern), star.span())
            } else {
                unreachable!("Pattern-Star");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_3(&mut self) -> Result<(), String> {
        let mut question = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Question(question) = question {
                PatternArgs::Question(Box::new(Pattern), question.span())
            } else {
                unreachable!("Pattern-Question");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_4(&mut self) -> Result<(), String> {
        let mut exclamation = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Exclamation(exclamation) = exclamation {
                PatternArgs::Exclamation(Box::new(Pattern), exclamation.span())
            } else {
                unreachable!("Pattern-Exclamation");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_5(&mut self) -> Result<(), String> {
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_11
            .push({ PatternArgs::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_Action_0(&mut self) -> Result<(), String> {
        let mut bracegroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::BraceGroup(group) = bracegroup {
                group
            } else {
                unreachable!("Action0");
            }
        });
        Ok(())
    }
    fn reduce_Action_1(&mut self) -> Result<(), String> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_TokenDef_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut token = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12.push({
            if let Lexed::Ident(ident) = ident {
                (ident, RustCode)
            } else {
                unreachable!("TokenDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_RustCode_0(&mut self) -> Result<(), String> {
        let mut t = self.__rustylr_generated_stack_14.pop().unwrap();
        self.__rustylr_generated_stack_13.push({
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                token.append_to_stream(&mut tokens);
            }
            tokens
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated6_0(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_1(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_2(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_3(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_4(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_5(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_6(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_7(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_8(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_9(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_10(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_11(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_12(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_13(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_14(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_15(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated6_16(&mut self) -> Result<(), String> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated5_0(&mut self) -> Result<(), String> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14.push({ vec![A] });
        Ok(())
    }
    fn reduce__RustyLRGenerated5_1(&mut self) -> Result<(), String> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_14.pop().unwrap();
        self.__rustylr_generated_stack_14.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce_StartDef_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut start = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_15.push({
            if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("StartDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_EofDef_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut eofdef = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (eofdef.span(), RustCode) });
        Ok(())
    }
    fn reduce_TokenTypeDef_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut tokentype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (tokentype.span(), RustCode) });
        Ok(())
    }
    fn reduce_UserDataDef_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut userdata = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (userdata.span(), RustCode) });
        Ok(())
    }
    fn reduce_ReduceType_0(&mut self) -> Result<(), String> {
        let mut left = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17.push({ ReduceType::Left });
        Ok(())
    }
    fn reduce_ReduceType_1(&mut self) -> Result<(), String> {
        let mut right = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17
            .push({ ReduceType::Right });
        Ok(())
    }
    fn reduce_ReduceDef_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut reducetype = self.__rustylr_generated_stack_17.pop().unwrap();
        self.__rustylr_generated_stack_18.push({
            if let Lexed::Ident(ident) = ident {
                (ReduceTypeArgs::Ident(ident), reducetype)
            } else {
                unreachable!("ReduceDef-Ident (Left)");
            }
        });
        Ok(())
    }
    fn reduce_ReduceDef_1(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        let mut reducetype = self.__rustylr_generated_stack_17.pop().unwrap();
        self.__rustylr_generated_stack_18
            .push({ (ReduceTypeArgs::TerminalSet(TerminalSet), reducetype) });
        Ok(())
    }
    fn reduce_ErrorDef_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut errortype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (errortype.span(), RustCode) });
        Ok(())
    }
    fn reduce_ModulePrefixDef_0(&mut self) -> Result<(), String> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut moduleprefix = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (moduleprefix.span(), RustCode) });
        Ok(())
    }
    fn reduce_Grammar_0(&mut self) -> Result<(), String> {
        let mut Rule = self.__rustylr_generated_stack_1.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.rules.push(Rule);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_1(&mut self) -> Result<(), String> {
        let mut Rule = self.__rustylr_generated_stack_1.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.rules.push(Rule);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_2(&mut self) -> Result<(), String> {
        let mut TokenDef = self.__rustylr_generated_stack_12.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.terminals.push(TokenDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_3(&mut self) -> Result<(), String> {
        let mut TokenDef = self.__rustylr_generated_stack_12.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.terminals.push(TokenDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_4(&mut self) -> Result<(), String> {
        let mut StartDef = self.__rustylr_generated_stack_15.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.start_rule_name.push(StartDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_5(&mut self) -> Result<(), String> {
        let mut StartDef = self.__rustylr_generated_stack_15.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.start_rule_name.push(StartDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_6(&mut self) -> Result<(), String> {
        let mut EofDef = self.__rustylr_generated_stack_16.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.eof.push(EofDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_7(&mut self) -> Result<(), String> {
        let mut EofDef = self.__rustylr_generated_stack_16.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.eof.push(EofDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_8(&mut self) -> Result<(), String> {
        let mut TokenTypeDef = self.__rustylr_generated_stack_16.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.token_typename.push(TokenTypeDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_9(&mut self) -> Result<(), String> {
        let mut TokenTypeDef = self.__rustylr_generated_stack_16.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.token_typename.push(TokenTypeDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_10(&mut self) -> Result<(), String> {
        let mut UserDataDef = self.__rustylr_generated_stack_16.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.userdata_typename.push(UserDataDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_11(&mut self) -> Result<(), String> {
        let mut UserDataDef = self.__rustylr_generated_stack_16.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.userdata_typename.push(UserDataDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_12(&mut self) -> Result<(), String> {
        let mut ReduceDef = self.__rustylr_generated_stack_18.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.reduce_types.push(ReduceDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_13(&mut self) -> Result<(), String> {
        let mut ReduceDef = self.__rustylr_generated_stack_18.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.reduce_types.push(ReduceDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_14(&mut self) -> Result<(), String> {
        let mut ErrorDef = self.__rustylr_generated_stack_16.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.error_typename.push(ErrorDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_15(&mut self) -> Result<(), String> {
        let mut ErrorDef = self.__rustylr_generated_stack_16.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.error_typename.push(ErrorDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_16(&mut self) -> Result<(), String> {
        let mut ModulePrefixDef = self.__rustylr_generated_stack_16.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Grammar.module_prefix.push(ModulePrefixDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_17(&mut self) -> Result<(), String> {
        let mut ModulePrefixDef = self.__rustylr_generated_stack_16.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            let mut g: GrammarArgs = Default::default();
            g.module_prefix.push(ModulePrefixDef);
            g
        });
        Ok(())
    }
    fn reduce_Augmented_0(&mut self) -> Result<(), String> {
        let mut eof = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Grammar = self.__rustylr_generated_stack_19.pop().unwrap();
        Ok(())
    }
    #[doc = r" reduce items in stack, this function is called automatically by parser"]
    pub fn reduce(
        &mut self,
        rulelen: usize,
        rustylr_macro_generated_ruleid__: usize,
    ) -> Result<(), String> {
        match rustylr_macro_generated_ruleid__ {
            0usize => {
                self.reduce_Rule_0()?;
            }
            1usize => {
                self.reduce_RuleType_0()?;
            }
            2usize => {
                self.reduce_RuleType_1()?;
            }
            3usize => {
                self.reduce_RuleLines_0()?;
            }
            4usize => {
                self.reduce_RuleLines_1()?;
            }
            5usize => {
                self.reduce_RuleLine_0()?;
            }
            6usize => {
                self.reduce__RustyLRGenerated1_0()?;
            }
            7usize => {
                self.reduce__RustyLRGenerated1_1()?;
            }
            8usize => {
                self.reduce__RustyLRGenerated0_0()?;
            }
            9usize => {
                self.reduce__RustyLRGenerated0_1()?;
            }
            10usize => {
                self.reduce_TokenMapped_0()?;
            }
            11usize => {
                self.reduce_TokenMapped_1()?;
            }
            12usize => {
                self.reduce_TerminalSetItem_0()?;
            }
            13usize => {
                self.reduce_TerminalSetItem_1()?;
            }
            14usize => {
                self.reduce_TerminalSet_0()?;
            }
            15usize => {
                self.reduce__RustyLRGenerated2_0()?;
            }
            16usize => {
                self.reduce__RustyLRGenerated2_1()?;
            }
            17usize => {
                self.reduce__RustyLRGenerated4_0()?;
            }
            18usize => {
                self.reduce__RustyLRGenerated4_1()?;
            }
            19usize => {
                self.reduce__RustyLRGenerated3_0()?;
            }
            20usize => {
                self.reduce__RustyLRGenerated3_1()?;
            }
            21usize => {
                self.reduce_Pattern_0()?;
            }
            22usize => {
                self.reduce_Pattern_1()?;
            }
            23usize => {
                self.reduce_Pattern_2()?;
            }
            24usize => {
                self.reduce_Pattern_3()?;
            }
            25usize => {
                self.reduce_Pattern_4()?;
            }
            26usize => {
                self.reduce_Pattern_5()?;
            }
            27usize => {
                self.reduce_Action_0()?;
            }
            28usize => {
                self.reduce_Action_1()?;
            }
            29usize => {
                self.reduce_TokenDef_0()?;
            }
            30usize => {
                self.reduce_RustCode_0()?;
            }
            31usize => {
                self.reduce__RustyLRGenerated6_0()?;
            }
            32usize => {
                self.reduce__RustyLRGenerated6_1()?;
            }
            33usize => {
                self.reduce__RustyLRGenerated6_2()?;
            }
            34usize => {
                self.reduce__RustyLRGenerated6_3()?;
            }
            35usize => {
                self.reduce__RustyLRGenerated6_4()?;
            }
            36usize => {
                self.reduce__RustyLRGenerated6_5()?;
            }
            37usize => {
                self.reduce__RustyLRGenerated6_6()?;
            }
            38usize => {
                self.reduce__RustyLRGenerated6_7()?;
            }
            39usize => {
                self.reduce__RustyLRGenerated6_8()?;
            }
            40usize => {
                self.reduce__RustyLRGenerated6_9()?;
            }
            41usize => {
                self.reduce__RustyLRGenerated6_10()?;
            }
            42usize => {
                self.reduce__RustyLRGenerated6_11()?;
            }
            43usize => {
                self.reduce__RustyLRGenerated6_12()?;
            }
            44usize => {
                self.reduce__RustyLRGenerated6_13()?;
            }
            45usize => {
                self.reduce__RustyLRGenerated6_14()?;
            }
            46usize => {
                self.reduce__RustyLRGenerated6_15()?;
            }
            47usize => {
                self.reduce__RustyLRGenerated6_16()?;
            }
            48usize => {
                self.reduce__RustyLRGenerated5_0()?;
            }
            49usize => {
                self.reduce__RustyLRGenerated5_1()?;
            }
            50usize => {
                self.reduce_StartDef_0()?;
            }
            51usize => {
                self.reduce_EofDef_0()?;
            }
            52usize => {
                self.reduce_TokenTypeDef_0()?;
            }
            53usize => {
                self.reduce_UserDataDef_0()?;
            }
            54usize => {
                self.reduce_ReduceType_0()?;
            }
            55usize => {
                self.reduce_ReduceType_1()?;
            }
            56usize => {
                self.reduce_ReduceDef_0()?;
            }
            57usize => {
                self.reduce_ReduceDef_1()?;
            }
            58usize => {
                self.reduce_ErrorDef_0()?;
            }
            59usize => {
                self.reduce_ModulePrefixDef_0()?;
            }
            60usize => {
                self.reduce_Grammar_0()?;
            }
            61usize => {
                self.reduce_Grammar_1()?;
            }
            62usize => {
                self.reduce_Grammar_2()?;
            }
            63usize => {
                self.reduce_Grammar_3()?;
            }
            64usize => {
                self.reduce_Grammar_4()?;
            }
            65usize => {
                self.reduce_Grammar_5()?;
            }
            66usize => {
                self.reduce_Grammar_6()?;
            }
            67usize => {
                self.reduce_Grammar_7()?;
            }
            68usize => {
                self.reduce_Grammar_8()?;
            }
            69usize => {
                self.reduce_Grammar_9()?;
            }
            70usize => {
                self.reduce_Grammar_10()?;
            }
            71usize => {
                self.reduce_Grammar_11()?;
            }
            72usize => {
                self.reduce_Grammar_12()?;
            }
            73usize => {
                self.reduce_Grammar_13()?;
            }
            74usize => {
                self.reduce_Grammar_14()?;
            }
            75usize => {
                self.reduce_Grammar_15()?;
            }
            76usize => {
                self.reduce_Grammar_16()?;
            }
            77usize => {
                self.reduce_Grammar_17()?;
            }
            78usize => {
                self.reduce_Augmented_0()?;
            }
            _ => {
                unreachable!("Invalid Rule: {}", rustylr_macro_generated_ruleid__);
            }
        }
        Ok(())
    }
    #[doc = r" pop value from start rule"]
    pub fn accept(&mut self) -> GrammarArgs {
        self.__rustylr_generated_stack_19.pop().unwrap()
    }
    #[doc = r" push terminal symbol to stack, this function is called automatically by parser"]
    pub fn push(&mut self, term: Lexed) {
        self.__rustylr_generated_terminal_stack.push(term);
    }
}
impl ::rusty_lr_core::GetContext<Lexed, GrammarNonTerminals> for GrammarContext {
    fn get_state_stack(&self) -> &[usize] {
        &self.state_stack
    }
}
#[doc = r" struct that holds parser data, DFA tables"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarParser {
    #[doc = r" production rules"]
    pub rules: Vec<GrammarRule>,
    #[doc = r" states"]
    pub states: Vec<GrammarState>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarParser {
    pub fn new() -> Self {
        #[doc = r" make new terminal shift_map with pairs of (term, goto)"]
        macro_rules ! __rustylr_generated_shift_term_extend { { $ shift_map : ident , ($ term : ident , $ stateid : literal) , $ (($ terms : ident , $ stateids : literal) ,) * } => { $ shift_map . insert ($ term ! () , $ stateid) ; __rustylr_generated_shift_term_extend ! { $ shift_map , $ (($ terms , $ stateids) ,) * } } ; { $ shift_map : ident , } => { } }
        macro_rules ! __rustylr_generated_shift_term { { $ len : literal , $ (($ terms : ident , $ stateids : literal) ,) * } => { { let mut shift_map = :: rusty_lr_core :: HashMap :: default () ; shift_map . reserve ($ len) ; __rustylr_generated_shift_term_extend ! { shift_map , $ (($ terms , $ stateids) ,) * } shift_map } } ; }
        #[doc = r" make new non-terminal shift_map with pairs of (nonterm, goto)"]
        macro_rules ! __rustylr_generated_shift_nonterm_extend { { $ shift_map : ident , ($ nonterm : ident , $ stateid : literal) , $ (($ nonterms : ident , $ stateids : literal) ,) * } => { $ shift_map . insert (GrammarNonTerminals :: $ nonterm , $ stateid) ; __rustylr_generated_shift_nonterm_extend ! { $ shift_map , $ (($ nonterms , $ stateids) ,) * } } ; { $ shift_map : ident , } => { } }
        macro_rules ! __rustylr_generated_shift_nonterm { { $ len : literal , $ (($ nonterms : ident , $ stateids : literal) ,) * } => { { let mut shift_map = :: rusty_lr_core :: HashMap :: default () ; shift_map . reserve ($ len) ; __rustylr_generated_shift_nonterm_extend ! { shift_map , $ (($ nonterms , $ stateids) ,) * } shift_map } } ; }
        #[doc = r" make new reduce_map with pairs of (terminal_set, rule_id)"]
        macro_rules ! __rustylr_generated_reduce_map_extend { { $ reduce_map : ident , ($ terminals : ident , $ ruleid : literal) , $ (($ terminals1 : ident , $ ruleid1 : literal) ,) * } => { for term in $ terminals . iter () { $ reduce_map . insert (term . clone () , $ ruleid) ; } __rustylr_generated_reduce_map_extend ! { $ reduce_map , $ (($ terminals1 , $ ruleid1) ,) * } } ; { $ reduce_map : ident , } => { } }
        macro_rules ! __rustylr_generated_reduce_map { { $ len : literal , $ (($ terminals1 : ident , $ ruleid1 : literal) ,) * } => { { let mut reduce_map = :: rusty_lr_core :: HashMap :: default () ; reduce_map . reserve ($ len) ; __rustylr_generated_reduce_map_extend ! { reduce_map , $ (($ terminals1 , $ ruleid1) ,) * } reduce_map } } ; }
        #[doc = r" make new LookaheadRuleRefSet with pairs of (ruleid, shifted)"]
        macro_rules ! __rustylr_generated_ruleset { [$ ($ pairs : expr ,) *] => { { let rule_shifted_pairs = vec ! [$ ($ pairs) , *] ; std :: collections :: BTreeSet :: from_iter (rule_shifted_pairs . into_iter () . map (| (rule , shifted) : (usize , usize) | -> :: rusty_lr_core :: ShiftedRuleRef { :: rusty_lr_core :: ShiftedRuleRef { rule , shifted , } }) ,) } } }
        macro_rules! __rustylr_ident {
            () => {
                Lexed::Ident(Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_colon {
            () => {
                Lexed::Colon(punct!(':'))
            };
        }
        macro_rules! __rustylr_semicolon {
            () => {
                Lexed::Semicolon(punct!(';'))
            };
        }
        macro_rules! __rustylr_pipe {
            () => {
                Lexed::Pipe(punct!('|'))
            };
        }
        macro_rules! __rustylr_percent {
            () => {
                Lexed::Percent(punct!('%'))
            };
        }
        macro_rules! __rustylr_equal {
            () => {
                Lexed::Equal(punct!('='))
            };
        }
        macro_rules! __rustylr_plus {
            () => {
                Lexed::Plus(punct!('+'))
            };
        }
        macro_rules! __rustylr_star {
            () => {
                Lexed::Star(punct!('*'))
            };
        }
        macro_rules! __rustylr_question {
            () => {
                Lexed::Question(punct!('?'))
            };
        }
        macro_rules! __rustylr_caret {
            () => {
                Lexed::Caret(punct!('^'))
            };
        }
        macro_rules! __rustylr_minus {
            () => {
                Lexed::Minus(punct!('-'))
            };
        }
        macro_rules! __rustylr_exclamation {
            () => {
                Lexed::Exclamation(punct!('!'))
            };
        }
        macro_rules! __rustylr_otherpunct {
            () => {
                Lexed::OtherPunct(punct!('.'))
            };
        }
        macro_rules! __rustylr_literal {
            () => {
                Lexed::Literal(None)
            };
        }
        macro_rules! __rustylr_parengroup {
            () => {
                Lexed::ParenGroup(None)
            };
        }
        macro_rules! __rustylr_bracegroup {
            () => {
                Lexed::BraceGroup(None)
            };
        }
        macro_rules! __rustylr_bracketgroup {
            () => {
                Lexed::BracketGroup(None)
            };
        }
        macro_rules! __rustylr_nonegroup {
            () => {
                Lexed::NoneGroup(None)
            };
        }
        macro_rules! __rustylr_lparen {
            () => {
                Lexed::LParen(Span::call_site())
            };
        }
        macro_rules! __rustylr_rparen {
            () => {
                Lexed::RParen(Span::call_site())
            };
        }
        macro_rules! __rustylr_lbrace {
            () => {
                Lexed::LBrace(Span::call_site())
            };
        }
        macro_rules! __rustylr_rbrace {
            () => {
                Lexed::RBrace(Span::call_site())
            };
        }
        macro_rules! __rustylr_lbracket {
            () => {
                Lexed::LBracket(Span::call_site())
            };
        }
        macro_rules! __rustylr_rbracket {
            () => {
                Lexed::RBracket(Span::call_site())
            };
        }
        macro_rules! __rustylr_left {
            () => {
                Lexed::Left(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_right {
            () => {
                Lexed::Right(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_token {
            () => {
                Lexed::Token(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_start {
            () => {
                Lexed::Start(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_eofdef {
            () => {
                Lexed::EofDef(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_tokentype {
            () => {
                Lexed::TokenType(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_userdata {
            () => {
                Lexed::UserData(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_errortype {
            () => {
                Lexed::ErrorType(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_moduleprefix {
            () => {
                Lexed::ModulePrefix(punct!('%'), Ident::new("id", Span::call_site()))
            };
        }
        macro_rules! __rustylr_eof {
            () => {
                Lexed::Eof
            };
        }
        let rules = vec![
            GrammarRule {
                name: GrammarNonTerminals::Rule,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_ident!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
                    ::rusty_lr_core::Token::Term(__rustylr_colon!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::RuleType,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_parengroup!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::RuleType,
                rule: vec![],
            },
            GrammarRule {
                name: GrammarNonTerminals::RuleLines,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                    ::rusty_lr_core::Token::Term(__rustylr_pipe!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::RuleLines,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::RuleLine,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::RuleLine,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated0),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated1,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::TokenMapped,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated1,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated1),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated0,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::_RustyLRGenerated1,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated0,
                rule: vec![],
            },
            GrammarRule {
                name: GrammarNonTerminals::TokenMapped,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::Pattern,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::TokenMapped,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_ident!()),
                    ::rusty_lr_core::Token::Term(__rustylr_equal!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::TerminalSetItem,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_ident!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::TerminalSetItem,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_ident!()),
                    ::rusty_lr_core::Token::Term(__rustylr_minus!()),
                    ::rusty_lr_core::Token::Term(__rustylr_ident!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::TerminalSet,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_lbracket!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated2),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated3),
                    ::rusty_lr_core::Token::Term(__rustylr_rbracket!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated2,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_caret!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated2,
                rule: vec![],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated4,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::TerminalSetItem,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated4,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated4),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::_RustyLRGenerated4,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![],
            },
            GrammarRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_ident!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                    ::rusty_lr_core::Token::Term(__rustylr_plus!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                    ::rusty_lr_core::Token::Term(__rustylr_star!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                    ::rusty_lr_core::Token::Term(__rustylr_question!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                    ::rusty_lr_core::Token::Term(__rustylr_exclamation!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::TerminalSet,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::Action,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_bracegroup!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::Action,
                rule: vec![],
            },
            GrammarRule {
                name: GrammarNonTerminals::TokenDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_token!()),
                    ::rusty_lr_core::Token::Term(__rustylr_ident!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::RustCode,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::_RustyLRGenerated5,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_bracegroup!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_bracketgroup!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_caret!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_colon!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_equal!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_exclamation!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_ident!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_literal!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_minus!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_nonegroup!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_otherpunct!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_parengroup!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_percent!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_pipe!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_plus!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_question!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated6,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_star!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated5,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::_RustyLRGenerated6,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::_RustyLRGenerated5,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated5),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated6),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::StartDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_start!()),
                    ::rusty_lr_core::Token::Term(__rustylr_ident!()),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::EofDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_eofdef!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::TokenTypeDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_tokentype!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::UserDataDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_userdata!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::ReduceType,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_left!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::ReduceType,
                rule: vec![::rusty_lr_core::Token::Term(__rustylr_right!())],
            },
            GrammarRule {
                name: GrammarNonTerminals::ReduceDef,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                    ::rusty_lr_core::Token::Term(__rustylr_ident!()),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::ReduceDef,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSet),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::ErrorDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_errortype!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::ModulePrefixDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(__rustylr_moduleprefix!()),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(__rustylr_semicolon!()),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule)],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenDef),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::TokenDef,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::StartDef),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::StartDef,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef)],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenTypeDef),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::TokenTypeDef,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::UserDataDef),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::UserDataDef,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceDef),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::ReduceDef,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ErrorDef),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::ErrorDef,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ModulePrefixDef),
                ],
            },
            GrammarRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::ModulePrefixDef,
                )],
            },
            GrammarRule {
                name: GrammarNonTerminals::Augmented,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::Term(__rustylr_eof!()),
                ],
            },
        ];
        let _rustylr_generated_terminals_0 = vec![
            __rustylr_bracegroup!(),
            __rustylr_bracketgroup!(),
            __rustylr_caret!(),
            __rustylr_colon!(),
            __rustylr_equal!(),
            __rustylr_exclamation!(),
            __rustylr_ident!(),
            __rustylr_literal!(),
            __rustylr_minus!(),
            __rustylr_nonegroup!(),
            __rustylr_otherpunct!(),
            __rustylr_parengroup!(),
            __rustylr_percent!(),
            __rustylr_pipe!(),
            __rustylr_plus!(),
            __rustylr_question!(),
            __rustylr_semicolon!(),
            __rustylr_star!(),
        ];
        let _rustylr_generated_terminals_1 = vec![
            __rustylr_eof!(),
            __rustylr_eofdef!(),
            __rustylr_errortype!(),
            __rustylr_ident!(),
            __rustylr_left!(),
            __rustylr_moduleprefix!(),
            __rustylr_right!(),
            __rustylr_start!(),
            __rustylr_token!(),
            __rustylr_tokentype!(),
            __rustylr_userdata!(),
        ];
        let _rustylr_generated_terminals_2 = [__rustylr_semicolon!()];
        let _rustylr_generated_terminals_3 = [__rustylr_colon!()];
        let _rustylr_generated_terminals_4 = [__rustylr_bracegroup!(),
            __rustylr_pipe!(),
            __rustylr_semicolon!()];
        let _rustylr_generated_terminals_5 = vec![
            __rustylr_bracegroup!(),
            __rustylr_exclamation!(),
            __rustylr_ident!(),
            __rustylr_lbracket!(),
            __rustylr_pipe!(),
            __rustylr_plus!(),
            __rustylr_question!(),
            __rustylr_semicolon!(),
            __rustylr_star!(),
        ];
        let _rustylr_generated_terminals_6 = [__rustylr_ident!(), __rustylr_rbracket!()];
        let _rustylr_generated_terminals_7 = [__rustylr_rbracket!()];
        let _rustylr_generated_terminals_8 = [__rustylr_bracegroup!(),
            __rustylr_ident!(),
            __rustylr_lbracket!(),
            __rustylr_pipe!(),
            __rustylr_semicolon!()];
        let _rustylr_generated_terminals_9 = [__rustylr_pipe!(), __rustylr_semicolon!()];
        let _rustylr_generated_terminals_10 = [__rustylr_ident!(), __rustylr_lbracket!()];
        let mut states = Vec::with_capacity(110usize);
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 10usize , (__rustylr_eofdef , 1usize) , (__rustylr_errortype , 24usize) , (__rustylr_ident , 27usize) , (__rustylr_left , 63usize) , (__rustylr_moduleprefix , 64usize) , (__rustylr_right , 67usize) , (__rustylr_start , 68usize) , (__rustylr_token , 71usize) , (__rustylr_tokentype , 75usize) , (__rustylr_userdata , 78usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 11usize , (EofDef , 81usize) , (ErrorDef , 82usize) , (Grammar , 83usize) , (ModulePrefixDef , 103usize) , (ReduceDef , 104usize) , (ReduceType , 89usize) , (Rule , 105usize) , (StartDef , 106usize) , (TokenDef , 107usize) , (TokenTypeDef , 108usize) , (UserDataDef , 109usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (0usize, 0usize),
                (29usize, 0usize),
                (50usize, 0usize),
                (51usize, 0usize),
                (52usize, 0usize),
                (53usize, 0usize),
                (54usize, 0usize),
                (55usize, 0usize),
                (56usize, 0usize),
                (57usize, 0usize),
                (58usize, 0usize),
                (59usize, 0usize),
                (60usize, 0usize),
                (61usize, 0usize),
                (62usize, 0usize),
                (63usize, 0usize),
                (64usize, 0usize),
                (65usize, 0usize),
                (66usize, 0usize),
                (67usize, 0usize),
                (68usize, 0usize),
                (69usize, 0usize),
                (70usize, 0usize),
                (71usize, 0usize),
                (72usize, 0usize),
                (73usize, 0usize),
                (74usize, 0usize),
                (75usize, 0usize),
                (76usize, 0usize),
                (77usize, 0usize),
                (78usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 17usize , (__rustylr_bracegroup , 2usize) , (__rustylr_bracketgroup , 3usize) , (__rustylr_caret , 4usize) , (__rustylr_colon , 5usize) , (__rustylr_equal , 6usize) , (__rustylr_exclamation , 7usize) , (__rustylr_ident , 8usize) , (__rustylr_literal , 9usize) , (__rustylr_minus , 10usize) , (__rustylr_nonegroup , 11usize) , (__rustylr_otherpunct , 12usize) , (__rustylr_parengroup , 13usize) , (__rustylr_percent , 14usize) , (__rustylr_pipe , 15usize) , (__rustylr_plus , 16usize) , (__rustylr_question , 17usize) , (__rustylr_star , 18usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (RustCode , 19usize) , (_RustyLRGenerated5 , 21usize) , (_RustyLRGenerated6 , 23usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (30usize, 0usize),
                (31usize, 0usize),
                (32usize, 0usize),
                (33usize, 0usize),
                (34usize, 0usize),
                (35usize, 0usize),
                (36usize, 0usize),
                (37usize, 0usize),
                (38usize, 0usize),
                (39usize, 0usize),
                (40usize, 0usize),
                (41usize, 0usize),
                (42usize, 0usize),
                (43usize, 0usize),
                (44usize, 0usize),
                (45usize, 0usize),
                (46usize, 0usize),
                (47usize, 0usize),
                (48usize, 0usize),
                (49usize, 0usize),
                (51usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 31usize) , };
            let ruleset = __rustylr_generated_ruleset![(31usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 32usize) , };
            let ruleset = __rustylr_generated_ruleset![(32usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 33usize) , };
            let ruleset = __rustylr_generated_ruleset![(33usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 34usize) , };
            let ruleset = __rustylr_generated_ruleset![(34usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 35usize) , };
            let ruleset = __rustylr_generated_ruleset![(35usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 36usize) , };
            let ruleset = __rustylr_generated_ruleset![(36usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 37usize) , };
            let ruleset = __rustylr_generated_ruleset![(37usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 38usize) , };
            let ruleset = __rustylr_generated_ruleset![(38usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 39usize) , };
            let ruleset = __rustylr_generated_ruleset![(39usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 40usize) , };
            let ruleset = __rustylr_generated_ruleset![(40usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 41usize) , };
            let ruleset = __rustylr_generated_ruleset![(41usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 42usize) , };
            let ruleset = __rustylr_generated_ruleset![(42usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 43usize) , };
            let ruleset = __rustylr_generated_ruleset![(43usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 44usize) , };
            let ruleset = __rustylr_generated_ruleset![(44usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 45usize) , };
            let ruleset = __rustylr_generated_ruleset![(45usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 46usize) , };
            let ruleset = __rustylr_generated_ruleset![(46usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 47usize) , };
            let ruleset = __rustylr_generated_ruleset![(47usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 20usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(51usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 51usize) , };
            let ruleset = __rustylr_generated_ruleset![(51usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 17usize , (__rustylr_bracegroup , 2usize) , (__rustylr_bracketgroup , 3usize) , (__rustylr_caret , 4usize) , (__rustylr_colon , 5usize) , (__rustylr_equal , 6usize) , (__rustylr_exclamation , 7usize) , (__rustylr_ident , 8usize) , (__rustylr_literal , 9usize) , (__rustylr_minus , 10usize) , (__rustylr_nonegroup , 11usize) , (__rustylr_otherpunct , 12usize) , (__rustylr_parengroup , 13usize) , (__rustylr_percent , 14usize) , (__rustylr_pipe , 15usize) , (__rustylr_plus , 16usize) , (__rustylr_question , 17usize) , (__rustylr_star , 18usize) , };
            let shift_goto_map_nonterm =
                __rustylr_generated_shift_nonterm! { 1usize , (_RustyLRGenerated6 , 22usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 1usize , (_rustylr_generated_terminals_2 , 30usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (30usize, 1usize),
                (31usize, 0usize),
                (32usize, 0usize),
                (33usize, 0usize),
                (34usize, 0usize),
                (35usize, 0usize),
                (36usize, 0usize),
                (37usize, 0usize),
                (38usize, 0usize),
                (39usize, 0usize),
                (40usize, 0usize),
                (41usize, 0usize),
                (42usize, 0usize),
                (43usize, 0usize),
                (44usize, 0usize),
                (45usize, 0usize),
                (46usize, 0usize),
                (47usize, 0usize),
                (49usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 49usize) , };
            let ruleset = __rustylr_generated_ruleset![(49usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 18usize , (_rustylr_generated_terminals_0 , 48usize) , };
            let ruleset = __rustylr_generated_ruleset![(48usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 17usize , (__rustylr_bracegroup , 2usize) , (__rustylr_bracketgroup , 3usize) , (__rustylr_caret , 4usize) , (__rustylr_colon , 5usize) , (__rustylr_equal , 6usize) , (__rustylr_exclamation , 7usize) , (__rustylr_ident , 8usize) , (__rustylr_literal , 9usize) , (__rustylr_minus , 10usize) , (__rustylr_nonegroup , 11usize) , (__rustylr_otherpunct , 12usize) , (__rustylr_parengroup , 13usize) , (__rustylr_percent , 14usize) , (__rustylr_pipe , 15usize) , (__rustylr_plus , 16usize) , (__rustylr_question , 17usize) , (__rustylr_star , 18usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (RustCode , 25usize) , (_RustyLRGenerated5 , 21usize) , (_RustyLRGenerated6 , 23usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (30usize, 0usize),
                (31usize, 0usize),
                (32usize, 0usize),
                (33usize, 0usize),
                (34usize, 0usize),
                (35usize, 0usize),
                (36usize, 0usize),
                (37usize, 0usize),
                (38usize, 0usize),
                (39usize, 0usize),
                (40usize, 0usize),
                (41usize, 0usize),
                (42usize, 0usize),
                (43usize, 0usize),
                (44usize, 0usize),
                (45usize, 0usize),
                (46usize, 0usize),
                (47usize, 0usize),
                (48usize, 0usize),
                (49usize, 0usize),
                (58usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 26usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(58usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 58usize) , };
            let ruleset = __rustylr_generated_ruleset![(58usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_parengroup , 28usize) , };
            let shift_goto_map_nonterm =
                __rustylr_generated_shift_nonterm! { 1usize , (RuleType , 29usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 1usize , (_rustylr_generated_terminals_3 , 2usize) , };
            let ruleset =
                __rustylr_generated_ruleset![(0usize, 1usize), (1usize, 0usize), (2usize, 0usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 1usize , (_rustylr_generated_terminals_3 , 1usize) , };
            let ruleset = __rustylr_generated_ruleset![(1usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_colon , 30usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(0usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 2usize , (__rustylr_ident , 31usize) , (__rustylr_lbracket , 34usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 7usize , (Pattern , 51usize) , (RuleLine , 52usize) , (RuleLines , 53usize) , (TerminalSet , 50usize) , (TokenMapped , 56usize) , (_RustyLRGenerated0 , 57usize) , (_RustyLRGenerated1 , 60usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 3usize , (_rustylr_generated_terminals_4 , 9usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (0usize, 3usize),
                (3usize, 0usize),
                (4usize, 0usize),
                (5usize, 0usize),
                (6usize, 0usize),
                (7usize, 0usize),
                (8usize, 0usize),
                (9usize, 0usize),
                (10usize, 0usize),
                (11usize, 0usize),
                (14usize, 0usize),
                (21usize, 0usize),
                (22usize, 0usize),
                (23usize, 0usize),
                (24usize, 0usize),
                (25usize, 0usize),
                (26usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_equal , 32usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 9usize , (_rustylr_generated_terminals_5 , 21usize) , };
            let ruleset = __rustylr_generated_ruleset![(11usize, 1usize), (21usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 2usize , (__rustylr_ident , 33usize) , (__rustylr_lbracket , 34usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 2usize , (Pattern , 45usize) , (TerminalSet , 50usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (11usize, 2usize),
                (14usize, 0usize),
                (21usize, 0usize),
                (22usize, 0usize),
                (23usize, 0usize),
                (24usize, 0usize),
                (25usize, 0usize),
                (26usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 9usize , (_rustylr_generated_terminals_5 , 21usize) , };
            let ruleset = __rustylr_generated_ruleset![(21usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_caret , 35usize) , };
            let shift_goto_map_nonterm =
                __rustylr_generated_shift_nonterm! { 1usize , (_RustyLRGenerated2 , 36usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_6 , 16usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (14usize, 1usize),
                (15usize, 0usize),
                (16usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_6 , 15usize) , };
            let ruleset = __rustylr_generated_ruleset![(15usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_ident , 37usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (TerminalSetItem , 40usize) , (_RustyLRGenerated3 , 41usize) , (_RustyLRGenerated4 , 43usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 1usize , (_rustylr_generated_terminals_7 , 20usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (12usize, 0usize),
                (13usize, 0usize),
                (14usize, 2usize),
                (17usize, 0usize),
                (18usize, 0usize),
                (19usize, 0usize),
                (20usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_minus , 38usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_6 , 12usize) , };
            let ruleset = __rustylr_generated_ruleset![(12usize, 1usize), (13usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_ident , 39usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(13usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_6 , 13usize) , };
            let ruleset = __rustylr_generated_ruleset![(13usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_6 , 17usize) , };
            let ruleset = __rustylr_generated_ruleset![(17usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_rbracket , 42usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(14usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 9usize , (_rustylr_generated_terminals_5 , 14usize) , };
            let ruleset = __rustylr_generated_ruleset![(14usize, 4usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_ident , 37usize) , };
            let shift_goto_map_nonterm =
                __rustylr_generated_shift_nonterm! { 1usize , (TerminalSetItem , 44usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 1usize , (_rustylr_generated_terminals_7 , 19usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (12usize, 0usize),
                (13usize, 0usize),
                (18usize, 1usize),
                (19usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_6 , 18usize) , };
            let ruleset = __rustylr_generated_ruleset![(18usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 4usize , (__rustylr_exclamation , 46usize) , (__rustylr_plus , 47usize) , (__rustylr_question , 48usize) , (__rustylr_star , 49usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 5usize , (_rustylr_generated_terminals_8 , 11usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (11usize, 3usize),
                (22usize, 1usize),
                (23usize, 1usize),
                (24usize, 1usize),
                (25usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 9usize , (_rustylr_generated_terminals_5 , 25usize) , };
            let ruleset = __rustylr_generated_ruleset![(25usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 9usize , (_rustylr_generated_terminals_5 , 22usize) , };
            let ruleset = __rustylr_generated_ruleset![(22usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 9usize , (_rustylr_generated_terminals_5 , 24usize) , };
            let ruleset = __rustylr_generated_ruleset![(24usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 9usize , (_rustylr_generated_terminals_5 , 23usize) , };
            let ruleset = __rustylr_generated_ruleset![(23usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 9usize , (_rustylr_generated_terminals_5 , 26usize) , };
            let ruleset = __rustylr_generated_ruleset![(26usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 4usize , (__rustylr_exclamation , 46usize) , (__rustylr_plus , 47usize) , (__rustylr_question , 48usize) , (__rustylr_star , 49usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 5usize , (_rustylr_generated_terminals_8 , 10usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (10usize, 1usize),
                (22usize, 1usize),
                (23usize, 1usize),
                (24usize, 1usize),
                (25usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_9 , 4usize) , };
            let ruleset = __rustylr_generated_ruleset![(4usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 2usize , (__rustylr_pipe , 54usize) , (__rustylr_semicolon , 62usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(0usize, 4usize), (3usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 2usize , (__rustylr_ident , 31usize) , (__rustylr_lbracket , 34usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 6usize , (Pattern , 51usize) , (RuleLine , 55usize) , (TerminalSet , 50usize) , (TokenMapped , 56usize) , (_RustyLRGenerated0 , 57usize) , (_RustyLRGenerated1 , 60usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 3usize , (_rustylr_generated_terminals_4 , 9usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (3usize, 2usize),
                (5usize, 0usize),
                (6usize, 0usize),
                (7usize, 0usize),
                (8usize, 0usize),
                (9usize, 0usize),
                (10usize, 0usize),
                (11usize, 0usize),
                (14usize, 0usize),
                (21usize, 0usize),
                (22usize, 0usize),
                (23usize, 0usize),
                (24usize, 0usize),
                (25usize, 0usize),
                (26usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_9 , 3usize) , };
            let ruleset = __rustylr_generated_ruleset![(3usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 5usize , (_rustylr_generated_terminals_8 , 6usize) , };
            let ruleset = __rustylr_generated_ruleset![(6usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_bracegroup , 58usize) , };
            let shift_goto_map_nonterm =
                __rustylr_generated_shift_nonterm! { 1usize , (Action , 59usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_9 , 28usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (5usize, 1usize),
                (27usize, 0usize),
                (28usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_9 , 27usize) , };
            let ruleset = __rustylr_generated_ruleset![(27usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_9 , 5usize) , };
            let ruleset = __rustylr_generated_ruleset![(5usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 2usize , (__rustylr_ident , 31usize) , (__rustylr_lbracket , 34usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (Pattern , 51usize) , (TerminalSet , 50usize) , (TokenMapped , 61usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 3usize , (_rustylr_generated_terminals_4 , 8usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (7usize, 1usize),
                (8usize, 1usize),
                (10usize, 0usize),
                (11usize, 0usize),
                (14usize, 0usize),
                (21usize, 0usize),
                (22usize, 0usize),
                (23usize, 0usize),
                (24usize, 0usize),
                (25usize, 0usize),
                (26usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 5usize , (_rustylr_generated_terminals_8 , 7usize) , };
            let ruleset = __rustylr_generated_ruleset![(7usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 0usize) , };
            let ruleset = __rustylr_generated_ruleset![(0usize, 5usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_10 , 54usize) , };
            let ruleset = __rustylr_generated_ruleset![(54usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 17usize , (__rustylr_bracegroup , 2usize) , (__rustylr_bracketgroup , 3usize) , (__rustylr_caret , 4usize) , (__rustylr_colon , 5usize) , (__rustylr_equal , 6usize) , (__rustylr_exclamation , 7usize) , (__rustylr_ident , 8usize) , (__rustylr_literal , 9usize) , (__rustylr_minus , 10usize) , (__rustylr_nonegroup , 11usize) , (__rustylr_otherpunct , 12usize) , (__rustylr_parengroup , 13usize) , (__rustylr_percent , 14usize) , (__rustylr_pipe , 15usize) , (__rustylr_plus , 16usize) , (__rustylr_question , 17usize) , (__rustylr_star , 18usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (RustCode , 65usize) , (_RustyLRGenerated5 , 21usize) , (_RustyLRGenerated6 , 23usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (30usize, 0usize),
                (31usize, 0usize),
                (32usize, 0usize),
                (33usize, 0usize),
                (34usize, 0usize),
                (35usize, 0usize),
                (36usize, 0usize),
                (37usize, 0usize),
                (38usize, 0usize),
                (39usize, 0usize),
                (40usize, 0usize),
                (41usize, 0usize),
                (42usize, 0usize),
                (43usize, 0usize),
                (44usize, 0usize),
                (45usize, 0usize),
                (46usize, 0usize),
                (47usize, 0usize),
                (48usize, 0usize),
                (49usize, 0usize),
                (59usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 66usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(59usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 59usize) , };
            let ruleset = __rustylr_generated_ruleset![(59usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_10 , 55usize) , };
            let ruleset = __rustylr_generated_ruleset![(55usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_ident , 69usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(50usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 70usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(50usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 50usize) , };
            let ruleset = __rustylr_generated_ruleset![(50usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_ident , 72usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(29usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 17usize , (__rustylr_bracegroup , 2usize) , (__rustylr_bracketgroup , 3usize) , (__rustylr_caret , 4usize) , (__rustylr_colon , 5usize) , (__rustylr_equal , 6usize) , (__rustylr_exclamation , 7usize) , (__rustylr_ident , 8usize) , (__rustylr_literal , 9usize) , (__rustylr_minus , 10usize) , (__rustylr_nonegroup , 11usize) , (__rustylr_otherpunct , 12usize) , (__rustylr_parengroup , 13usize) , (__rustylr_percent , 14usize) , (__rustylr_pipe , 15usize) , (__rustylr_plus , 16usize) , (__rustylr_question , 17usize) , (__rustylr_star , 18usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (RustCode , 73usize) , (_RustyLRGenerated5 , 21usize) , (_RustyLRGenerated6 , 23usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (29usize, 2usize),
                (30usize, 0usize),
                (31usize, 0usize),
                (32usize, 0usize),
                (33usize, 0usize),
                (34usize, 0usize),
                (35usize, 0usize),
                (36usize, 0usize),
                (37usize, 0usize),
                (38usize, 0usize),
                (39usize, 0usize),
                (40usize, 0usize),
                (41usize, 0usize),
                (42usize, 0usize),
                (43usize, 0usize),
                (44usize, 0usize),
                (45usize, 0usize),
                (46usize, 0usize),
                (47usize, 0usize),
                (48usize, 0usize),
                (49usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 74usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(29usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 29usize) , };
            let ruleset = __rustylr_generated_ruleset![(29usize, 4usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 17usize , (__rustylr_bracegroup , 2usize) , (__rustylr_bracketgroup , 3usize) , (__rustylr_caret , 4usize) , (__rustylr_colon , 5usize) , (__rustylr_equal , 6usize) , (__rustylr_exclamation , 7usize) , (__rustylr_ident , 8usize) , (__rustylr_literal , 9usize) , (__rustylr_minus , 10usize) , (__rustylr_nonegroup , 11usize) , (__rustylr_otherpunct , 12usize) , (__rustylr_parengroup , 13usize) , (__rustylr_percent , 14usize) , (__rustylr_pipe , 15usize) , (__rustylr_plus , 16usize) , (__rustylr_question , 17usize) , (__rustylr_star , 18usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (RustCode , 76usize) , (_RustyLRGenerated5 , 21usize) , (_RustyLRGenerated6 , 23usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (30usize, 0usize),
                (31usize, 0usize),
                (32usize, 0usize),
                (33usize, 0usize),
                (34usize, 0usize),
                (35usize, 0usize),
                (36usize, 0usize),
                (37usize, 0usize),
                (38usize, 0usize),
                (39usize, 0usize),
                (40usize, 0usize),
                (41usize, 0usize),
                (42usize, 0usize),
                (43usize, 0usize),
                (44usize, 0usize),
                (45usize, 0usize),
                (46usize, 0usize),
                (47usize, 0usize),
                (48usize, 0usize),
                (49usize, 0usize),
                (52usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 77usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(52usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 52usize) , };
            let ruleset = __rustylr_generated_ruleset![(52usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 17usize , (__rustylr_bracegroup , 2usize) , (__rustylr_bracketgroup , 3usize) , (__rustylr_caret , 4usize) , (__rustylr_colon , 5usize) , (__rustylr_equal , 6usize) , (__rustylr_exclamation , 7usize) , (__rustylr_ident , 8usize) , (__rustylr_literal , 9usize) , (__rustylr_minus , 10usize) , (__rustylr_nonegroup , 11usize) , (__rustylr_otherpunct , 12usize) , (__rustylr_parengroup , 13usize) , (__rustylr_percent , 14usize) , (__rustylr_pipe , 15usize) , (__rustylr_plus , 16usize) , (__rustylr_question , 17usize) , (__rustylr_star , 18usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (RustCode , 79usize) , (_RustyLRGenerated5 , 21usize) , (_RustyLRGenerated6 , 23usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (30usize, 0usize),
                (31usize, 0usize),
                (32usize, 0usize),
                (33usize, 0usize),
                (34usize, 0usize),
                (35usize, 0usize),
                (36usize, 0usize),
                (37usize, 0usize),
                (38usize, 0usize),
                (39usize, 0usize),
                (40usize, 0usize),
                (41usize, 0usize),
                (42usize, 0usize),
                (43usize, 0usize),
                (44usize, 0usize),
                (45usize, 0usize),
                (46usize, 0usize),
                (47usize, 0usize),
                (48usize, 0usize),
                (49usize, 0usize),
                (53usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 80usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(53usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 53usize) , };
            let ruleset = __rustylr_generated_ruleset![(53usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 67usize) , };
            let ruleset = __rustylr_generated_ruleset![(67usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 75usize) , };
            let ruleset = __rustylr_generated_ruleset![(75usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 11usize , (__rustylr_eof , 84usize) , (__rustylr_eofdef , 1usize) , (__rustylr_errortype , 24usize) , (__rustylr_ident , 27usize) , (__rustylr_left , 63usize) , (__rustylr_moduleprefix , 64usize) , (__rustylr_right , 67usize) , (__rustylr_start , 68usize) , (__rustylr_token , 71usize) , (__rustylr_tokentype , 75usize) , (__rustylr_userdata , 78usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 10usize , (EofDef , 85usize) , (ErrorDef , 86usize) , (ModulePrefixDef , 87usize) , (ReduceDef , 88usize) , (ReduceType , 89usize) , (Rule , 98usize) , (StartDef , 99usize) , (TokenDef , 100usize) , (TokenTypeDef , 101usize) , (UserDataDef , 102usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (0usize, 0usize),
                (29usize, 0usize),
                (50usize, 0usize),
                (51usize, 0usize),
                (52usize, 0usize),
                (53usize, 0usize),
                (54usize, 0usize),
                (55usize, 0usize),
                (56usize, 0usize),
                (57usize, 0usize),
                (58usize, 0usize),
                (59usize, 0usize),
                (60usize, 1usize),
                (62usize, 1usize),
                (64usize, 1usize),
                (66usize, 1usize),
                (68usize, 1usize),
                (70usize, 1usize),
                (72usize, 1usize),
                (74usize, 1usize),
                (76usize, 1usize),
                (78usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(78usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 66usize) , };
            let ruleset = __rustylr_generated_ruleset![(66usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 74usize) , };
            let ruleset = __rustylr_generated_ruleset![(74usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 76usize) , };
            let ruleset = __rustylr_generated_ruleset![(76usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 72usize) , };
            let ruleset = __rustylr_generated_ruleset![(72usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 2usize , (__rustylr_ident , 90usize) , (__rustylr_lbracket , 92usize) , };
            let shift_goto_map_nonterm =
                __rustylr_generated_shift_nonterm! { 1usize , (TerminalSet , 96usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![
                (14usize, 0usize),
                (56usize, 1usize),
                (57usize, 1usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 91usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(56usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 56usize) , };
            let ruleset = __rustylr_generated_ruleset![(56usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_caret , 35usize) , };
            let shift_goto_map_nonterm =
                __rustylr_generated_shift_nonterm! { 1usize , (_RustyLRGenerated2 , 93usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 2usize , (_rustylr_generated_terminals_6 , 16usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (14usize, 1usize),
                (15usize, 0usize),
                (16usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_ident , 37usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 3usize , (TerminalSetItem , 40usize) , (_RustyLRGenerated3 , 94usize) , (_RustyLRGenerated4 , 43usize) , };
            let reduce_map = __rustylr_generated_reduce_map! { 1usize , (_rustylr_generated_terminals_7 , 20usize) , };
            let ruleset = __rustylr_generated_ruleset![
                (12usize, 0usize),
                (13usize, 0usize),
                (14usize, 2usize),
                (17usize, 0usize),
                (18usize, 0usize),
                (19usize, 0usize),
                (20usize, 0usize),
            ];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_rbracket , 95usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(14usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 1usize , (_rustylr_generated_terminals_2 , 14usize) , };
            let ruleset = __rustylr_generated_ruleset![(14usize, 4usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term =
                __rustylr_generated_shift_term! { 1usize , (__rustylr_semicolon , 97usize) , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 0usize , };
            let ruleset = __rustylr_generated_ruleset![(57usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 57usize) , };
            let ruleset = __rustylr_generated_ruleset![(57usize, 3usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 60usize) , };
            let ruleset = __rustylr_generated_ruleset![(60usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 64usize) , };
            let ruleset = __rustylr_generated_ruleset![(64usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 62usize) , };
            let ruleset = __rustylr_generated_ruleset![(62usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 68usize) , };
            let ruleset = __rustylr_generated_ruleset![(68usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 70usize) , };
            let ruleset = __rustylr_generated_ruleset![(70usize, 2usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 77usize) , };
            let ruleset = __rustylr_generated_ruleset![(77usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 73usize) , };
            let ruleset = __rustylr_generated_ruleset![(73usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 61usize) , };
            let ruleset = __rustylr_generated_ruleset![(61usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 65usize) , };
            let ruleset = __rustylr_generated_ruleset![(65usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 63usize) , };
            let ruleset = __rustylr_generated_ruleset![(63usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 69usize) , };
            let ruleset = __rustylr_generated_ruleset![(69usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        {
            let shift_goto_map_term = __rustylr_generated_shift_term! { 0usize , };
            let shift_goto_map_nonterm = __rustylr_generated_shift_nonterm! { 0usize , };
            let reduce_map = __rustylr_generated_reduce_map! { 11usize , (_rustylr_generated_terminals_1 , 71usize) , };
            let ruleset = __rustylr_generated_ruleset![(71usize, 1usize),];
            states.push(GrammarState {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            });
        }
        Self { rules, states }
    }
    #[doc = r" give lookahead token to parser, and check if there is any reduce action"]
    fn lookahead(
        &self,
        context: &mut GrammarContext,
        term: &Lexed,
    ) -> Result<(), GrammarParseError> {
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(reduce_rule) = state.reduce(term) {
            let rule = &self.rules[reduce_rule];
            context
                .state_stack
                .truncate(context.state_stack.len() - rule.rule.len());
            context
                .reduce(self.rules[reduce_rule].rule.len(), reduce_rule)
                .map_err(GrammarParseError::ReduceAction)?;
            self.feed_nonterm(context, &rule.name)?;
            self.lookahead(context, term)?;
        }
        Ok(())
    }
    #[doc = r" feed one terminal to parser, and update state stack"]
    pub fn feed(&self, context: &mut GrammarContext, term: Lexed) -> Result<(), GrammarParseError> {
        self.lookahead(context, &term)?;
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(next_state_id) = state.shift_goto_term(&term) {
            context.state_stack.push(next_state_id);
            context.push(term);
            Ok(())
        } else {
            let error = GrammarInvalidTerminalError {
                term,
                expected: state.expected().into_iter().cloned().collect(),
            };
            Err(GrammarParseError::InvalidTerminal(error))
        }
    }
    #[doc = r" feed one non-terminal to parser, and update state stack"]
    fn feed_nonterm(
        &self,
        context: &mut GrammarContext,
        nonterm: &GrammarNonTerminals,
    ) -> Result<(), GrammarParseError> {
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(next_state_id) = state.shift_goto_nonterm(nonterm) {
            context.state_stack.push(next_state_id);
            Ok(())
        } else {
            unreachable!("Invalid NonTerminal: {}", nonterm);
        }
    }
    pub fn begin(&self) -> GrammarContext {
        GrammarContext::new()
    }
}
impl ::rusty_lr_core::GetParser<Lexed, GrammarNonTerminals> for GrammarParser {
    fn get_rules(&self) -> &[GrammarRule] {
        &self.rules
    }
    fn get_states(&self) -> &[GrammarState] {
        &self.states
    }
}
// ==============================Generated Codes End===============================
