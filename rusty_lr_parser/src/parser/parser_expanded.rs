// This file was generated by rustylr 1.1.3
//
// Input file: ../rusty_lr_parser/src/parser/parser.rs
// Output file: out.tab.rs
// ================================User Codes Begin================================
use crate::parser::args::GrammarArgs;
use crate::parser::args::IdentOrLiteral;
use crate::parser::args::PatternArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::args::TerminalOrTerminalSet;
use crate::parser::lexer::Lexed;
use crate::terminalset::TerminalSet;
use crate::terminalset::TerminalSetItem;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Literal;
use proc_macro2::Punct;
use proc_macro2::Spacing;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use rusty_lr_core::ReduceType;
use std::boxed::Box;
macro_rules ! punct (($ l : literal) => { Punct :: new ($ l , Spacing :: Alone) } ;) ;
// =================================User Codes End=================================
/*
====================================Grammar=====================================
Rule -> ident RuleType colon RuleLines semicolon
RuleType -> parengroup
RuleType ->
RuleLines -> RuleLines pipe RuleLine
RuleLines -> RuleLine
RuleLine -> TokenMapped* PrecDef? Action
PrecDef -> prec IdentOrLiteral
TokenMapped -> Pattern
TokenMapped -> ident equal Pattern
TerminalSetItem -> ident
TerminalSetItem -> ident minus ident
TerminalSetItem -> literal
TerminalSetItem -> literal minus literal
TerminalSet -> lbracket caret? TerminalSetItem* rbracket
Pattern -> ident
Pattern -> Pattern plus
Pattern -> Pattern star
Pattern -> Pattern question
Pattern -> Pattern exclamation
Pattern -> TerminalSet
Pattern -> Pattern slash Pattern
Pattern -> lparen Pattern+ rparen
Pattern -> literal
Pattern -> Pattern minus Pattern
Action -> bracegroup
Action ->
TokenDef -> token ident RustCode semicolon
RustCode -> [^semicolon]+
StartDef -> start ident semicolon
EofDef -> eofdef RustCode semicolon
TokenTypeDef -> tokentype RustCode semicolon
UserDataDef -> userdata RustCode semicolon
TerminalOrTerminalSet -> TerminalSet
TerminalOrTerminalSet -> ident
TerminalOrTerminalSet -> literal
IdentOrLiteral -> ident
IdentOrLiteral -> literal
ReduceType -> left
ReduceType -> right
ReduceDef -> ReduceType IdentOrLiteral+ semicolon
ErrorDef -> errortype RustCode semicolon
ModulePrefixDef -> moduleprefix RustCode semicolon
Glr -> glr semicolon
Lalr -> lalr semicolon
Precedence -> precedence IdentOrLiteral+ semicolon
NoOptim -> nooptim semicolon
GrammarLine -> Rule
GrammarLine -> TokenDef
GrammarLine -> StartDef
GrammarLine -> EofDef
GrammarLine -> TokenTypeDef
GrammarLine -> UserDataDef
GrammarLine -> ReduceDef
GrammarLine -> ErrorDef
GrammarLine -> ModulePrefixDef
GrammarLine -> Lalr
GrammarLine -> Glr
GrammarLine -> Precedence
GrammarLine -> NoOptim
Grammar -> GrammarLine+
TokenMapped+ -> TokenMapped
TokenMapped+ -> TokenMapped+ TokenMapped
TokenMapped* -> TokenMapped+
TokenMapped* ->
PrecDef? -> PrecDef
PrecDef? ->
caret? -> caret
caret? ->
TerminalSetItem+ -> TerminalSetItem
TerminalSetItem+ -> TerminalSetItem+ TerminalSetItem
TerminalSetItem* -> TerminalSetItem+
TerminalSetItem* ->
Pattern+ -> Pattern
Pattern+ -> Pattern+ Pattern
[^semicolon] -> ident
[^semicolon] -> colon
[^semicolon] -> pipe
[^semicolon] -> [percent, <Others>]
[^semicolon] -> equal
[^semicolon] -> plus
[^semicolon] -> star
[^semicolon] -> question
[^semicolon] -> caret
[^semicolon] -> minus
[^semicolon] -> exclamation
[^semicolon] -> slash
[^semicolon] -> literal
[^semicolon] -> parengroup
[^semicolon] -> bracegroup
[^semicolon] -> lparen
[^semicolon] -> rparen
[^semicolon] -> lbracket
[^semicolon] -> rbracket
[^semicolon] -> left
[^semicolon] -> right
[^semicolon] -> token
[^semicolon] -> start
[^semicolon] -> eofdef
[^semicolon] -> tokentype
[^semicolon] -> userdata
[^semicolon] -> errortype
[^semicolon] -> moduleprefix
[^semicolon] -> lalr
[^semicolon] -> glr
[^semicolon] -> prec
[^semicolon] -> precedence
[^semicolon] -> nooptim
[^semicolon]+ -> [^semicolon]
[^semicolon]+ -> [^semicolon]+ [^semicolon]
IdentOrLiteral+ -> IdentOrLiteral
IdentOrLiteral+ -> IdentOrLiteral+ IdentOrLiteral
GrammarLine+ -> GrammarLine
GrammarLine+ -> GrammarLine GrammarLine+
Augmented -> Grammar eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for `Context`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarContext = ::rusty_lr_core::lr::Context<GrammarStack>;
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarRule = ::rusty_lr_core::ProductionRule<usize, GrammarNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarState = ::rusty_lr_core::lr::State<usize, GrammarNonTerminals>;
#[doc = r" type alias for `ParseError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarParseError = ::rusty_lr_core::lr::ParseError<
    Lexed,
    GrammarNonTerminals,
    ::rusty_lr_core::DefaultReduceActionError,
>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarInvalidTerminalError =
    ::rusty_lr_core::lr::InvalidTerminalError<Lexed, GrammarNonTerminals>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum GrammarNonTerminals {
    Rule,
    RuleType,
    RuleLines,
    RuleLine,
    PrecDef,
    TokenMapped,
    TerminalSetItem,
    TerminalSet,
    Pattern,
    Action,
    TokenDef,
    RustCode,
    StartDef,
    EofDef,
    TokenTypeDef,
    UserDataDef,
    TerminalOrTerminalSet,
    IdentOrLiteral,
    ReduceType,
    ReduceDef,
    ErrorDef,
    ModulePrefixDef,
    Glr,
    Lalr,
    Precedence,
    NoOptim,
    GrammarLine,
    Grammar,
    _TokenMappedPlus28,
    _TokenMappedStar29,
    _PrecDefQuestion30,
    _caretQuestion31,
    _TerminalSetItemPlus32,
    _TerminalSetItemStar33,
    _PatternPlus34,
    _TermSet35,
    __TermSet35Plus36,
    _IdentOrLiteralPlus37,
    _GrammarLinePlus38,
    Augmented,
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrammarNonTerminals::Rule => write!(f, "{}", "Rule"),
            GrammarNonTerminals::RuleType => write!(f, "{}", "RuleType"),
            GrammarNonTerminals::RuleLines => write!(f, "{}", "RuleLines"),
            GrammarNonTerminals::RuleLine => write!(f, "{}", "RuleLine"),
            GrammarNonTerminals::PrecDef => write!(f, "{}", "PrecDef"),
            GrammarNonTerminals::TokenMapped => write!(f, "{}", "TokenMapped"),
            GrammarNonTerminals::TerminalSetItem => write!(f, "{}", "TerminalSetItem"),
            GrammarNonTerminals::TerminalSet => write!(f, "{}", "TerminalSet"),
            GrammarNonTerminals::Pattern => write!(f, "{}", "Pattern"),
            GrammarNonTerminals::Action => write!(f, "{}", "Action"),
            GrammarNonTerminals::TokenDef => write!(f, "{}", "TokenDef"),
            GrammarNonTerminals::RustCode => write!(f, "{}", "RustCode"),
            GrammarNonTerminals::StartDef => write!(f, "{}", "StartDef"),
            GrammarNonTerminals::EofDef => write!(f, "{}", "EofDef"),
            GrammarNonTerminals::TokenTypeDef => write!(f, "{}", "TokenTypeDef"),
            GrammarNonTerminals::UserDataDef => write!(f, "{}", "UserDataDef"),
            GrammarNonTerminals::TerminalOrTerminalSet => write!(f, "{}", "TerminalOrTerminalSet"),
            GrammarNonTerminals::IdentOrLiteral => write!(f, "{}", "IdentOrLiteral"),
            GrammarNonTerminals::ReduceType => write!(f, "{}", "ReduceType"),
            GrammarNonTerminals::ReduceDef => write!(f, "{}", "ReduceDef"),
            GrammarNonTerminals::ErrorDef => write!(f, "{}", "ErrorDef"),
            GrammarNonTerminals::ModulePrefixDef => write!(f, "{}", "ModulePrefixDef"),
            GrammarNonTerminals::Glr => write!(f, "{}", "Glr"),
            GrammarNonTerminals::Lalr => write!(f, "{}", "Lalr"),
            GrammarNonTerminals::Precedence => write!(f, "{}", "Precedence"),
            GrammarNonTerminals::NoOptim => write!(f, "{}", "NoOptim"),
            GrammarNonTerminals::GrammarLine => write!(f, "{}", "GrammarLine"),
            GrammarNonTerminals::Grammar => write!(f, "{}", "Grammar"),
            GrammarNonTerminals::_TokenMappedPlus28 => write!(f, "{}", "TokenMapped+"),
            GrammarNonTerminals::_TokenMappedStar29 => write!(f, "{}", "TokenMapped*"),
            GrammarNonTerminals::_PrecDefQuestion30 => write!(f, "{}", "PrecDef?"),
            GrammarNonTerminals::_caretQuestion31 => write!(f, "{}", "caret?"),
            GrammarNonTerminals::_TerminalSetItemPlus32 => write!(f, "{}", "TerminalSetItem+"),
            GrammarNonTerminals::_TerminalSetItemStar33 => write!(f, "{}", "TerminalSetItem*"),
            GrammarNonTerminals::_PatternPlus34 => write!(f, "{}", "Pattern+"),
            GrammarNonTerminals::_TermSet35 => write!(f, "{}", "[^semicolon]"),
            GrammarNonTerminals::__TermSet35Plus36 => write!(f, "{}", "[^semicolon]+"),
            GrammarNonTerminals::_IdentOrLiteralPlus37 => write!(f, "{}", "IdentOrLiteral+"),
            GrammarNonTerminals::_GrammarLinePlus38 => write!(f, "{}", "GrammarLine+"),
            GrammarNonTerminals::Augmented => write!(f, "{}", "Augmented"),
        }
    }
}
impl std::fmt::Debug for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrammarNonTerminals::Rule => write!(f, "{}", "Rule"),
            GrammarNonTerminals::RuleType => write!(f, "{}", "RuleType"),
            GrammarNonTerminals::RuleLines => write!(f, "{}", "RuleLines"),
            GrammarNonTerminals::RuleLine => write!(f, "{}", "RuleLine"),
            GrammarNonTerminals::PrecDef => write!(f, "{}", "PrecDef"),
            GrammarNonTerminals::TokenMapped => write!(f, "{}", "TokenMapped"),
            GrammarNonTerminals::TerminalSetItem => write!(f, "{}", "TerminalSetItem"),
            GrammarNonTerminals::TerminalSet => write!(f, "{}", "TerminalSet"),
            GrammarNonTerminals::Pattern => write!(f, "{}", "Pattern"),
            GrammarNonTerminals::Action => write!(f, "{}", "Action"),
            GrammarNonTerminals::TokenDef => write!(f, "{}", "TokenDef"),
            GrammarNonTerminals::RustCode => write!(f, "{}", "RustCode"),
            GrammarNonTerminals::StartDef => write!(f, "{}", "StartDef"),
            GrammarNonTerminals::EofDef => write!(f, "{}", "EofDef"),
            GrammarNonTerminals::TokenTypeDef => write!(f, "{}", "TokenTypeDef"),
            GrammarNonTerminals::UserDataDef => write!(f, "{}", "UserDataDef"),
            GrammarNonTerminals::TerminalOrTerminalSet => write!(f, "{}", "TerminalOrTerminalSet"),
            GrammarNonTerminals::IdentOrLiteral => write!(f, "{}", "IdentOrLiteral"),
            GrammarNonTerminals::ReduceType => write!(f, "{}", "ReduceType"),
            GrammarNonTerminals::ReduceDef => write!(f, "{}", "ReduceDef"),
            GrammarNonTerminals::ErrorDef => write!(f, "{}", "ErrorDef"),
            GrammarNonTerminals::ModulePrefixDef => write!(f, "{}", "ModulePrefixDef"),
            GrammarNonTerminals::Glr => write!(f, "{}", "Glr"),
            GrammarNonTerminals::Lalr => write!(f, "{}", "Lalr"),
            GrammarNonTerminals::Precedence => write!(f, "{}", "Precedence"),
            GrammarNonTerminals::NoOptim => write!(f, "{}", "NoOptim"),
            GrammarNonTerminals::GrammarLine => write!(f, "{}", "GrammarLine"),
            GrammarNonTerminals::Grammar => write!(f, "{}", "Grammar"),
            GrammarNonTerminals::_TokenMappedPlus28 => write!(f, "{}", "TokenMapped+"),
            GrammarNonTerminals::_TokenMappedStar29 => write!(f, "{}", "TokenMapped*"),
            GrammarNonTerminals::_PrecDefQuestion30 => write!(f, "{}", "PrecDef?"),
            GrammarNonTerminals::_caretQuestion31 => write!(f, "{}", "caret?"),
            GrammarNonTerminals::_TerminalSetItemPlus32 => write!(f, "{}", "TerminalSetItem+"),
            GrammarNonTerminals::_TerminalSetItemStar33 => write!(f, "{}", "TerminalSetItem*"),
            GrammarNonTerminals::_PatternPlus34 => write!(f, "{}", "Pattern+"),
            GrammarNonTerminals::_TermSet35 => write!(f, "{}", "[^semicolon]"),
            GrammarNonTerminals::__TermSet35Plus36 => write!(f, "{}", "[^semicolon]+"),
            GrammarNonTerminals::_IdentOrLiteralPlus37 => write!(f, "{}", "IdentOrLiteral+"),
            GrammarNonTerminals::_GrammarLinePlus38 => write!(f, "{}", "GrammarLine+"),
            GrammarNonTerminals::Augmented => write!(f, "{}", "Augmented"),
        }
    }
}
impl ::rusty_lr_core::NonTerminal<Lexed> for GrammarNonTerminals {
    fn is_auto_generated(&self) -> bool {
        match self {
            GrammarNonTerminals::Rule => false,
            GrammarNonTerminals::RuleType => false,
            GrammarNonTerminals::RuleLines => false,
            GrammarNonTerminals::RuleLine => false,
            GrammarNonTerminals::PrecDef => false,
            GrammarNonTerminals::TokenMapped => false,
            GrammarNonTerminals::TerminalSetItem => false,
            GrammarNonTerminals::TerminalSet => false,
            GrammarNonTerminals::Pattern => false,
            GrammarNonTerminals::Action => false,
            GrammarNonTerminals::TokenDef => false,
            GrammarNonTerminals::RustCode => false,
            GrammarNonTerminals::StartDef => false,
            GrammarNonTerminals::EofDef => false,
            GrammarNonTerminals::TokenTypeDef => false,
            GrammarNonTerminals::UserDataDef => false,
            GrammarNonTerminals::TerminalOrTerminalSet => false,
            GrammarNonTerminals::IdentOrLiteral => false,
            GrammarNonTerminals::ReduceType => false,
            GrammarNonTerminals::ReduceDef => false,
            GrammarNonTerminals::ErrorDef => false,
            GrammarNonTerminals::ModulePrefixDef => false,
            GrammarNonTerminals::Glr => false,
            GrammarNonTerminals::Lalr => false,
            GrammarNonTerminals::Precedence => false,
            GrammarNonTerminals::NoOptim => false,
            GrammarNonTerminals::GrammarLine => false,
            GrammarNonTerminals::Grammar => false,
            GrammarNonTerminals::_TokenMappedPlus28 => true,
            GrammarNonTerminals::_TokenMappedStar29 => true,
            GrammarNonTerminals::_PrecDefQuestion30 => true,
            GrammarNonTerminals::_caretQuestion31 => true,
            GrammarNonTerminals::_TerminalSetItemPlus32 => true,
            GrammarNonTerminals::_TerminalSetItemStar33 => true,
            GrammarNonTerminals::_PatternPlus34 => true,
            GrammarNonTerminals::_TermSet35 => true,
            GrammarNonTerminals::__TermSet35Plus36 => true,
            GrammarNonTerminals::_IdentOrLiteralPlus37 => true,
            GrammarNonTerminals::_GrammarLinePlus38 => true,
            GrammarNonTerminals::Augmented => true,
        }
    }
    fn is_augmented(&self) -> bool {
        match self {
            GrammarNonTerminals::Rule => false,
            GrammarNonTerminals::RuleType => false,
            GrammarNonTerminals::RuleLines => false,
            GrammarNonTerminals::RuleLine => false,
            GrammarNonTerminals::PrecDef => false,
            GrammarNonTerminals::TokenMapped => false,
            GrammarNonTerminals::TerminalSetItem => false,
            GrammarNonTerminals::TerminalSet => false,
            GrammarNonTerminals::Pattern => false,
            GrammarNonTerminals::Action => false,
            GrammarNonTerminals::TokenDef => false,
            GrammarNonTerminals::RustCode => false,
            GrammarNonTerminals::StartDef => false,
            GrammarNonTerminals::EofDef => false,
            GrammarNonTerminals::TokenTypeDef => false,
            GrammarNonTerminals::UserDataDef => false,
            GrammarNonTerminals::TerminalOrTerminalSet => false,
            GrammarNonTerminals::IdentOrLiteral => false,
            GrammarNonTerminals::ReduceType => false,
            GrammarNonTerminals::ReduceDef => false,
            GrammarNonTerminals::ErrorDef => false,
            GrammarNonTerminals::ModulePrefixDef => false,
            GrammarNonTerminals::Glr => false,
            GrammarNonTerminals::Lalr => false,
            GrammarNonTerminals::Precedence => false,
            GrammarNonTerminals::NoOptim => false,
            GrammarNonTerminals::GrammarLine => false,
            GrammarNonTerminals::Grammar => false,
            GrammarNonTerminals::_TokenMappedPlus28 => false,
            GrammarNonTerminals::_TokenMappedStar29 => false,
            GrammarNonTerminals::_PrecDefQuestion30 => false,
            GrammarNonTerminals::_caretQuestion31 => false,
            GrammarNonTerminals::_TerminalSetItemPlus32 => false,
            GrammarNonTerminals::_TerminalSetItemStar33 => false,
            GrammarNonTerminals::_PatternPlus34 => false,
            GrammarNonTerminals::_TermSet35 => false,
            GrammarNonTerminals::__TermSet35Plus36 => false,
            GrammarNonTerminals::_IdentOrLiteralPlus37 => false,
            GrammarNonTerminals::_GrammarLinePlus38 => false,
            GrammarNonTerminals::Augmented => true,
        }
    }
}
#[doc = r" struct that holds internal parser data,"]
#[doc = r" including data stack for each non-terminal,"]
#[doc = r" and state stack for DFA"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types
)]
pub struct GrammarStack {
    __rustylr_generated_terminal_stack: Vec<Lexed>,
    __rustylr_generated_stack_1: Vec<RuleDefArgs>,
    __rustylr_generated_stack_2: Vec<Option<Group>>,
    __rustylr_generated_stack_3: Vec<Vec<RuleLineArgs>>,
    __rustylr_generated_stack_4: Vec<RuleLineArgs>,
    __rustylr_generated_stack_5: Vec<IdentOrLiteral>,
    __rustylr_generated_stack_6: Vec<(Option<Ident>, PatternArgs)>,
    __rustylr_generated_stack_7: Vec<TerminalSetItem>,
    __rustylr_generated_stack_8: Vec<TerminalSet>,
    __rustylr_generated_stack_9: Vec<PatternArgs>,
    __rustylr_generated_stack_10: Vec<(Ident, TokenStream)>,
    __rustylr_generated_stack_11: Vec<TokenStream>,
    __rustylr_generated_stack_12: Vec<Ident>,
    __rustylr_generated_stack_13: Vec<(Span, TokenStream)>,
    __rustylr_generated_stack_14: Vec<TerminalOrTerminalSet>,
    __rustylr_generated_stack_15: Vec<ReduceType>,
    __rustylr_generated_stack_16: Vec<(ReduceType, Vec<IdentOrLiteral>)>,
    __rustylr_generated_stack_17: Vec<Vec<IdentOrLiteral>>,
    __rustylr_generated_stack_18: Vec<Vec<(Option<Ident>, PatternArgs)>>,
    __rustylr_generated_stack_19: Vec<Option<IdentOrLiteral>>,
    __rustylr_generated_stack_20: Vec<Option<Lexed>>,
    __rustylr_generated_stack_21: Vec<Vec<TerminalSetItem>>,
    __rustylr_generated_stack_22: Vec<Vec<PatternArgs>>,
    __rustylr_generated_stack_23: Vec<Vec<Lexed>>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types,
    dead_code
)]
impl GrammarStack {
    fn reduce_Rule_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        let mut colon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleType = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_1.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("Rule-Ident");
            };
            if let Lexed::Colon(colon) = colon {
                let span = colon.span();
                if let Some(fisrt) = RuleLines.first_mut() {
                    fisrt.separator_span = span;
                }
            } else {
                unreachable!("Rule-Colon2");
            }
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.stream()),
                rule_lines: RuleLines,
            }
        });
        Ok(())
    }
    fn reduce_RuleType_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut parengroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::ParenGroup(group) = parengroup {
                group
            } else {
                unreachable!("RuleType - Group");
            }
        });
        Ok(())
    }
    fn reduce_RuleType_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_RuleLines_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        let mut pipe = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        self.__rustylr_generated_stack_3.push({
            if let Lexed::Pipe(punct) = pipe {
                RuleLine.separator_span = punct.span();
                RuleLines.push(RuleLine);
            }
            RuleLines
        });
        Ok(())
    }
    fn reduce_RuleLines_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        self.__rustylr_generated_stack_3.push({ vec![RuleLine] });
        Ok(())
    }
    fn reduce_RuleLine_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Action = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut PrecDef = self.__rustylr_generated_stack_19.pop().unwrap();
        let mut TokenMapped = self.__rustylr_generated_stack_18.pop().unwrap();
        self.__rustylr_generated_stack_4.push({
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
                separator_span: Span::call_site(),
                precedence: PrecDef,
            }
        });
        Ok(())
    }
    fn reduce_PrecDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut IdentOrLiteral = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_terminal_stack.pop();
        self.__rustylr_generated_stack_5.push(IdentOrLiteral);
        Ok(())
    }
    fn reduce_TokenMapped_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_6.push({ (None, Pattern) });
        Ok(())
    }
    fn reduce_TokenMapped_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut equal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            if let Lexed::Ident(ident) = ident {
                (Some(ident), Pattern)
            } else {
                unreachable!("Token-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            TerminalSetItem::Terminal(ident)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let first = if let Lexed::Ident(first) = first {
                first
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            let last = if let Lexed::Ident(last) = last {
                last
            } else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::Range(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("TerminalSetItem-Literal");
            };
            TerminalSetItem::Literal(literal)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let Lexed::Literal(first) = first else {
                unreachable!("TerminalSetItem-Range1");
            };
            let Lexed::Literal(last) = last else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::LiteralRange(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSet_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSetItem = self.__rustylr_generated_stack_21.pop().unwrap();
        let mut caret = self.__rustylr_generated_stack_20.pop().unwrap();
        let mut lbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            let open_span = if let Lexed::LBracket(lbracket) = lbracket {
                lbracket
            } else {
                unreachable!("TerminalSet-Open");
            };
            let close_span = if let Lexed::RBracket(rbracket) = rbracket {
                rbracket
            } else {
                unreachable!("TerminalSet-Close");
            };
            TerminalSet {
                negate: caret.is_some(),
                items: TerminalSetItem,
                open_span,
                close_span,
            }
        });
        Ok(())
    }
    fn reduce_Pattern_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Ident(ident) = ident {
                PatternArgs::Ident(ident)
            } else {
                unreachable!("Pattern-Ident");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut plus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Plus(plus) = plus {
                PatternArgs::Plus(Box::new(Pattern), plus.span())
            } else {
                unreachable!("Pattern-Plus");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut star = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Star(star) = star {
                PatternArgs::Star(Box::new(Pattern), star.span())
            } else {
                unreachable!("Pattern-Star");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut question = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Question(question) = question {
                PatternArgs::Question(Box::new(Pattern), question.span())
            } else {
                unreachable!("Pattern-Question");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut exclamation = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Exclamation(exclamation) = exclamation {
                PatternArgs::Exclamation(Box::new(Pattern), exclamation.span())
            } else {
                unreachable!("Pattern-Exclamation");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_9
            .push({ PatternArgs::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_Pattern_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut lh = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut slash = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut p1 = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9
            .push({ PatternArgs::Lookaheads(Box::new(p1), Box::new(lh)) });
        Ok(())
    }
    fn reduce_Pattern_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rparen = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_22.pop().unwrap();
        let mut lparen = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            let open = if let Lexed::LParen(lparen) = lparen {
                lparen
            } else {
                unreachable!("Pattern-Group-Open");
            };
            let close = if let Lexed::RParen(rparen) = rparen {
                rparen
            } else {
                unreachable!("Pattern-Group-Close");
            };
            PatternArgs::Group(Pattern, open, close)
        });
        Ok(())
    }
    fn reduce_Pattern_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("Pattern-Literal");
            };
            PatternArgs::Literal(literal)
        });
        Ok(())
    }
    fn reduce_Pattern_9(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut p2 = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut p1 = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_9
            .push({ PatternArgs::Minus(Box::new(p1), Box::new(p2)) });
        Ok(())
    }
    fn reduce_Action_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut bracegroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::BraceGroup(group) = bracegroup {
                group
            } else {
                unreachable!("Action0");
            }
        });
        Ok(())
    }
    fn reduce_Action_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_TokenDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut token = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_10.push({
            if let Lexed::Ident(ident) = ident {
                (ident, RustCode)
            } else {
                unreachable!("TokenDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_RustCode_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut t = self.__rustylr_generated_stack_23.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                token.append_to_stream(&mut tokens);
            }
            tokens
        });
        Ok(())
    }
    fn reduce_StartDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut start = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12.push({
            if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("StartDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_EofDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut eofdef = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (eofdef.span(), RustCode) });
        Ok(())
    }
    fn reduce_TokenTypeDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut tokentype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (tokentype.span(), RustCode) });
        Ok(())
    }
    fn reduce_UserDataDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut userdata = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (userdata.span(), RustCode) });
        Ok(())
    }
    fn reduce_TerminalOrTerminalSet_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_14
            .push({ TerminalOrTerminalSet::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_TerminalOrTerminalSet_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14.push({
            if let Lexed::Ident(ident) = ident {
                TerminalOrTerminalSet::Ident(ident)
            } else {
                unreachable!("TerminalOrTerminalSet-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TerminalOrTerminalSet_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("TerminalOrTerminalSet-Literal");
            };
            TerminalOrTerminalSet::Literal(literal)
        });
        Ok(())
    }
    fn reduce_IdentOrLiteral_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_5.push({
            let Lexed::Ident(ident) = ident else {
                unreachable!("IdentOrLiteral-Ident");
            };
            IdentOrLiteral::Ident(ident)
        });
        Ok(())
    }
    fn reduce_IdentOrLiteral_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_5.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("IdentOrLiteral-Literal");
            };
            IdentOrLiteral::Literal(literal)
        });
        Ok(())
    }
    fn reduce_ReduceType_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut left = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_15.push({ ReduceType::Left });
        Ok(())
    }
    fn reduce_ReduceType_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut right = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_15
            .push({ ReduceType::Right });
        Ok(())
    }
    fn reduce_ReduceDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut IdentOrLiteral = self.__rustylr_generated_stack_17.pop().unwrap();
        let mut reducetype = self.__rustylr_generated_stack_15.pop().unwrap();
        self.__rustylr_generated_stack_16
            .push({ (reducetype, IdentOrLiteral) });
        Ok(())
    }
    fn reduce_ErrorDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut errortype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (errortype.span(), RustCode) });
        Ok(())
    }
    fn reduce_ModulePrefixDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut moduleprefix = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ (moduleprefix.span(), RustCode) });
        Ok(())
    }
    fn reduce_Glr_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut glr = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_Lalr_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut lalr = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_Precedence_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut IdentOrLiteral = self.__rustylr_generated_stack_17.pop().unwrap();
        let mut precedence = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17.push({ IdentOrLiteral });
        Ok(())
    }
    fn reduce_NoOptim_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut nooptim = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_GrammarLine_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Rule = self.__rustylr_generated_stack_1.pop().unwrap();
        {
            data.rules.push(Rule);
        }
        Ok(())
    }
    fn reduce_GrammarLine_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenDef = self.__rustylr_generated_stack_10.pop().unwrap();
        {
            data.terminals.push(TokenDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut StartDef = self.__rustylr_generated_stack_12.pop().unwrap();
        {
            data.start_rule_name.push(StartDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut EofDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.eof.push(EofDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenTypeDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.token_typename.push(TokenTypeDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut UserDataDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.userdata_typename.push(UserDataDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ReduceDef = self.__rustylr_generated_stack_16.pop().unwrap();
        {
            data.precedences.push(ReduceDef.1.clone());
            data.reduce_types.push(ReduceDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ErrorDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.error_typename.push(ErrorDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ModulePrefixDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.module_prefix.push(ModulePrefixDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_9(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.lalr = true;
        }
        Ok(())
    }
    fn reduce_GrammarLine_10(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.glr = true;
        }
        Ok(())
    }
    fn reduce_GrammarLine_11(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Precedence = self.__rustylr_generated_stack_17.pop().unwrap();
        {
            data.precedences.push(Precedence);
        }
        Ok(())
    }
    fn reduce_GrammarLine_12(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.no_optim = true;
        }
        Ok(())
    }
    fn reduce_Grammar_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__TokenMappedPlus28_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        self.__rustylr_generated_stack_18.push({ vec![A] });
        Ok(())
    }
    fn reduce__TokenMappedPlus28_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_18.pop().unwrap();
        self.__rustylr_generated_stack_18.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TokenMappedStar29_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_18.pop().unwrap();
        self.__rustylr_generated_stack_18.push({ Ap });
        Ok(())
    }
    fn reduce__TokenMappedStar29_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_18.push({ vec![] });
        Ok(())
    }
    fn reduce__PrecDefQuestion30_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_19.push({ Some(A) });
        Ok(())
    }
    fn reduce__PrecDefQuestion30_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_19.push({ None });
        Ok(())
    }
    fn reduce__caretQuestion31_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_20.push({ Some(A) });
        Ok(())
    }
    fn reduce__caretQuestion31_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_20.push({ None });
        Ok(())
    }
    fn reduce__TerminalSetItemPlus32_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        self.__rustylr_generated_stack_21.push({ vec![A] });
        Ok(())
    }
    fn reduce__TerminalSetItemPlus32_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_21.pop().unwrap();
        self.__rustylr_generated_stack_21.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TerminalSetItemStar33_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_21.pop().unwrap();
        self.__rustylr_generated_stack_21.push({ Ap });
        Ok(())
    }
    fn reduce__TerminalSetItemStar33_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_21.push({ vec![] });
        Ok(())
    }
    fn reduce__PatternPlus34_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_9.pop().unwrap();
        self.__rustylr_generated_stack_22.push({ vec![A] });
        Ok(())
    }
    fn reduce__PatternPlus34_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_22.pop().unwrap();
        self.__rustylr_generated_stack_22.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TermSet35_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_9(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_10(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_11(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_12(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_13(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_14(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_15(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_16(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_17(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_18(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_19(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_20(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_21(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_22(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_23(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_24(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_25(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_26(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_27(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_28(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_29(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_30(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_31(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TermSet35_32(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce___TermSet35Plus36_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_23.push({ vec![A] });
        Ok(())
    }
    fn reduce___TermSet35Plus36_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_23.pop().unwrap();
        self.__rustylr_generated_stack_23.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__IdentOrLiteralPlus37_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_17.push({ vec![A] });
        Ok(())
    }
    fn reduce__IdentOrLiteralPlus37_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_5.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_17.pop().unwrap();
        self.__rustylr_generated_stack_17.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__GrammarLinePlus38_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__GrammarLinePlus38_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce_Augmented_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_terminal_stack.pop();
        Ok(())
    }
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types,
    dead_code
)]
impl ::rusty_lr_core::lr::Stack for GrammarStack {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type ReduceActionError = ::rusty_lr_core::DefaultReduceActionError;
    type UserData = GrammarArgs;
    type StartType = ();
    fn new() -> Self {
        Self {
            __rustylr_generated_terminal_stack: Vec::new(),
            __rustylr_generated_stack_1: Vec::new(),
            __rustylr_generated_stack_2: Vec::new(),
            __rustylr_generated_stack_3: Vec::new(),
            __rustylr_generated_stack_4: Vec::new(),
            __rustylr_generated_stack_5: Vec::new(),
            __rustylr_generated_stack_6: Vec::new(),
            __rustylr_generated_stack_7: Vec::new(),
            __rustylr_generated_stack_8: Vec::new(),
            __rustylr_generated_stack_9: Vec::new(),
            __rustylr_generated_stack_10: Vec::new(),
            __rustylr_generated_stack_11: Vec::new(),
            __rustylr_generated_stack_12: Vec::new(),
            __rustylr_generated_stack_13: Vec::new(),
            __rustylr_generated_stack_14: Vec::new(),
            __rustylr_generated_stack_15: Vec::new(),
            __rustylr_generated_stack_16: Vec::new(),
            __rustylr_generated_stack_17: Vec::new(),
            __rustylr_generated_stack_18: Vec::new(),
            __rustylr_generated_stack_19: Vec::new(),
            __rustylr_generated_stack_20: Vec::new(),
            __rustylr_generated_stack_21: Vec::new(),
            __rustylr_generated_stack_22: Vec::new(),
            __rustylr_generated_stack_23: Vec::new(),
        }
    }
    fn push(&mut self, term: Self::Term) {
        self.__rustylr_generated_terminal_stack.push(term);
    }
    fn reduce(
        &mut self,
        rustylr_macro_generated_ruleid__: usize,
        user_data: &mut Self::UserData,
        lookahead: &Self::Term,
    ) -> Result<(), Self::ReduceActionError> {
        match rustylr_macro_generated_ruleid__ {
            0usize => self.reduce_Rule_0(lookahead, user_data),
            1usize => self.reduce_RuleType_0(lookahead, user_data),
            2usize => self.reduce_RuleType_1(lookahead, user_data),
            3usize => self.reduce_RuleLines_0(lookahead, user_data),
            4usize => self.reduce_RuleLines_1(lookahead, user_data),
            5usize => self.reduce_RuleLine_0(lookahead, user_data),
            6usize => self.reduce_PrecDef_0(lookahead, user_data),
            7usize => self.reduce_TokenMapped_0(lookahead, user_data),
            8usize => self.reduce_TokenMapped_1(lookahead, user_data),
            9usize => self.reduce_TerminalSetItem_0(lookahead, user_data),
            10usize => self.reduce_TerminalSetItem_1(lookahead, user_data),
            11usize => self.reduce_TerminalSetItem_2(lookahead, user_data),
            12usize => self.reduce_TerminalSetItem_3(lookahead, user_data),
            13usize => self.reduce_TerminalSet_0(lookahead, user_data),
            14usize => self.reduce_Pattern_0(lookahead, user_data),
            15usize => self.reduce_Pattern_1(lookahead, user_data),
            16usize => self.reduce_Pattern_2(lookahead, user_data),
            17usize => self.reduce_Pattern_3(lookahead, user_data),
            18usize => self.reduce_Pattern_4(lookahead, user_data),
            19usize => self.reduce_Pattern_5(lookahead, user_data),
            20usize => self.reduce_Pattern_6(lookahead, user_data),
            21usize => self.reduce_Pattern_7(lookahead, user_data),
            22usize => self.reduce_Pattern_8(lookahead, user_data),
            23usize => self.reduce_Pattern_9(lookahead, user_data),
            24usize => self.reduce_Action_0(lookahead, user_data),
            25usize => self.reduce_Action_1(lookahead, user_data),
            26usize => self.reduce_TokenDef_0(lookahead, user_data),
            27usize => self.reduce_RustCode_0(lookahead, user_data),
            28usize => self.reduce_StartDef_0(lookahead, user_data),
            29usize => self.reduce_EofDef_0(lookahead, user_data),
            30usize => self.reduce_TokenTypeDef_0(lookahead, user_data),
            31usize => self.reduce_UserDataDef_0(lookahead, user_data),
            32usize => self.reduce_TerminalOrTerminalSet_0(lookahead, user_data),
            33usize => self.reduce_TerminalOrTerminalSet_1(lookahead, user_data),
            34usize => self.reduce_TerminalOrTerminalSet_2(lookahead, user_data),
            35usize => self.reduce_IdentOrLiteral_0(lookahead, user_data),
            36usize => self.reduce_IdentOrLiteral_1(lookahead, user_data),
            37usize => self.reduce_ReduceType_0(lookahead, user_data),
            38usize => self.reduce_ReduceType_1(lookahead, user_data),
            39usize => self.reduce_ReduceDef_0(lookahead, user_data),
            40usize => self.reduce_ErrorDef_0(lookahead, user_data),
            41usize => self.reduce_ModulePrefixDef_0(lookahead, user_data),
            42usize => self.reduce_Glr_0(lookahead, user_data),
            43usize => self.reduce_Lalr_0(lookahead, user_data),
            44usize => self.reduce_Precedence_0(lookahead, user_data),
            45usize => self.reduce_NoOptim_0(lookahead, user_data),
            46usize => self.reduce_GrammarLine_0(lookahead, user_data),
            47usize => self.reduce_GrammarLine_1(lookahead, user_data),
            48usize => self.reduce_GrammarLine_2(lookahead, user_data),
            49usize => self.reduce_GrammarLine_3(lookahead, user_data),
            50usize => self.reduce_GrammarLine_4(lookahead, user_data),
            51usize => self.reduce_GrammarLine_5(lookahead, user_data),
            52usize => self.reduce_GrammarLine_6(lookahead, user_data),
            53usize => self.reduce_GrammarLine_7(lookahead, user_data),
            54usize => self.reduce_GrammarLine_8(lookahead, user_data),
            55usize => self.reduce_GrammarLine_9(lookahead, user_data),
            56usize => self.reduce_GrammarLine_10(lookahead, user_data),
            57usize => self.reduce_GrammarLine_11(lookahead, user_data),
            58usize => self.reduce_GrammarLine_12(lookahead, user_data),
            59usize => self.reduce_Grammar_0(lookahead, user_data),
            60usize => self.reduce__TokenMappedPlus28_0(lookahead, user_data),
            61usize => self.reduce__TokenMappedPlus28_1(lookahead, user_data),
            62usize => self.reduce__TokenMappedStar29_0(lookahead, user_data),
            63usize => self.reduce__TokenMappedStar29_1(lookahead, user_data),
            64usize => self.reduce__PrecDefQuestion30_0(lookahead, user_data),
            65usize => self.reduce__PrecDefQuestion30_1(lookahead, user_data),
            66usize => self.reduce__caretQuestion31_0(lookahead, user_data),
            67usize => self.reduce__caretQuestion31_1(lookahead, user_data),
            68usize => self.reduce__TerminalSetItemPlus32_0(lookahead, user_data),
            69usize => self.reduce__TerminalSetItemPlus32_1(lookahead, user_data),
            70usize => self.reduce__TerminalSetItemStar33_0(lookahead, user_data),
            71usize => self.reduce__TerminalSetItemStar33_1(lookahead, user_data),
            72usize => self.reduce__PatternPlus34_0(lookahead, user_data),
            73usize => self.reduce__PatternPlus34_1(lookahead, user_data),
            74usize => self.reduce__TermSet35_0(lookahead, user_data),
            75usize => self.reduce__TermSet35_1(lookahead, user_data),
            76usize => self.reduce__TermSet35_2(lookahead, user_data),
            77usize => self.reduce__TermSet35_3(lookahead, user_data),
            78usize => self.reduce__TermSet35_4(lookahead, user_data),
            79usize => self.reduce__TermSet35_5(lookahead, user_data),
            80usize => self.reduce__TermSet35_6(lookahead, user_data),
            81usize => self.reduce__TermSet35_7(lookahead, user_data),
            82usize => self.reduce__TermSet35_8(lookahead, user_data),
            83usize => self.reduce__TermSet35_9(lookahead, user_data),
            84usize => self.reduce__TermSet35_10(lookahead, user_data),
            85usize => self.reduce__TermSet35_11(lookahead, user_data),
            86usize => self.reduce__TermSet35_12(lookahead, user_data),
            87usize => self.reduce__TermSet35_13(lookahead, user_data),
            88usize => self.reduce__TermSet35_14(lookahead, user_data),
            89usize => self.reduce__TermSet35_15(lookahead, user_data),
            90usize => self.reduce__TermSet35_16(lookahead, user_data),
            91usize => self.reduce__TermSet35_17(lookahead, user_data),
            92usize => self.reduce__TermSet35_18(lookahead, user_data),
            93usize => self.reduce__TermSet35_19(lookahead, user_data),
            94usize => self.reduce__TermSet35_20(lookahead, user_data),
            95usize => self.reduce__TermSet35_21(lookahead, user_data),
            96usize => self.reduce__TermSet35_22(lookahead, user_data),
            97usize => self.reduce__TermSet35_23(lookahead, user_data),
            98usize => self.reduce__TermSet35_24(lookahead, user_data),
            99usize => self.reduce__TermSet35_25(lookahead, user_data),
            100usize => self.reduce__TermSet35_26(lookahead, user_data),
            101usize => self.reduce__TermSet35_27(lookahead, user_data),
            102usize => self.reduce__TermSet35_28(lookahead, user_data),
            103usize => self.reduce__TermSet35_29(lookahead, user_data),
            104usize => self.reduce__TermSet35_30(lookahead, user_data),
            105usize => self.reduce__TermSet35_31(lookahead, user_data),
            106usize => self.reduce__TermSet35_32(lookahead, user_data),
            107usize => self.reduce___TermSet35Plus36_0(lookahead, user_data),
            108usize => self.reduce___TermSet35Plus36_1(lookahead, user_data),
            109usize => self.reduce__IdentOrLiteralPlus37_0(lookahead, user_data),
            110usize => self.reduce__IdentOrLiteralPlus37_1(lookahead, user_data),
            111usize => self.reduce__GrammarLinePlus38_0(lookahead, user_data),
            112usize => self.reduce__GrammarLinePlus38_1(lookahead, user_data),
            113usize => self.reduce_Augmented_0(lookahead, user_data),
            _ => {
                unreachable!("Invalid Rule: {}", rustylr_macro_generated_ruleid__);
            }
        }
    }
    #[allow(clippy::unused_unit)]
    fn pop_start(&mut self) -> Self::StartType {
        ()
    }
}
#[doc = r" A struct that holds the entire parser table and production rules."]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarParser {
    #[doc = r" production rules"]
    pub rules: Vec<GrammarRule>,
    #[doc = r" states"]
    pub states: Vec<GrammarState>,
    #[doc = r" terminal classes"]
    pub classes: Vec<Vec<Lexed>>,
    #[doc = r" term to class map"]
    pub term_class_map: ::rusty_lr_core::HashMap<Lexed, usize>,
    #[doc = r" class id for terminal not matched with any in grammar"]
    pub other_class_id: usize,
}
impl ::rusty_lr_core::lr::Parser for GrammarParser {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type TermRet<'a> = &'a Lexed;
    fn get_rules(&self) -> &[GrammarRule] {
        &self.rules
    }
    fn get_states(&self) -> &[GrammarState] {
        &self.states
    }
    fn get_terminals<'a>(
        &'a self,
        i: usize,
    ) -> Option<impl IntoIterator<Item = Self::TermRet<'a>> + 'a> {
        self.classes.get(i)
    }
    fn to_terminal_class(&self, terminal: &Self::Term) -> usize {
        self.term_class_map
            .get(terminal)
            .copied()
            .unwrap_or(self.other_class_id)
    }
}
#[doc = r" A struct that holds the whole parser table."]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarParser {
    #[doc = r" Calculates the states and parser tables from the grammar."]
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let mut builder = ::rusty_lr_core::builder::Grammar::new();
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(11usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(9usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(12usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(10usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(8usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(13usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(11usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(9usize), 1usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(12usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(10usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(8usize), 0usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(13usize), 2usize);
        builder.add_rule(
            GrammarNonTerminals::Rule,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
                ::rusty_lr_core::Token::Term(29usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(0usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::RuleType,
            vec![::rusty_lr_core::Token::Term(32usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(32usize)),
        );
        builder.add_rule(GrammarNonTerminals::RuleType, vec![], None, None);
        builder.add_rule(
            GrammarNonTerminals::RuleLines,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(5usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(5usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::RuleLines,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::RuleLine,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::RuleLine,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedStar29),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PrecDefQuestion30),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),
            ],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::PrecDef,
            vec![
                ::rusty_lr_core::Token::Term(7usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(7usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TokenMapped,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::TokenMapped,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(30usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(0usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(0usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(8usize),
                ::rusty_lr_core::Token::Term(0usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(0usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![::rusty_lr_core::Token::Term(2usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(2usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![
                ::rusty_lr_core::Token::Term(2usize),
                ::rusty_lr_core::Token::Term(8usize),
                ::rusty_lr_core::Token::Term(2usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(2usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSet,
            vec![
                ::rusty_lr_core::Token::Term(4usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_caretQuestion31),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemStar33),
                ::rusty_lr_core::Token::Term(15usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(4usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(0usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(10usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(11usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(11usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(12usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(12usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(13usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(13usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(9usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(9usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::Term(3usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternPlus34),
                ::rusty_lr_core::Token::Term(14usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(3usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::Term(2usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(2usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(8usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(8usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Action,
            vec![::rusty_lr_core::Token::Term(6usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(6usize)),
        );
        builder.add_rule(GrammarNonTerminals::Action, vec![], None, None);
        builder.add_rule(
            GrammarNonTerminals::TokenDef,
            vec![
                ::rusty_lr_core::Token::Term(18usize),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(18usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::RustCode,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::__TermSet35Plus36,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::StartDef,
            vec![
                ::rusty_lr_core::Token::Term(19usize),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(19usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::EofDef,
            vec![
                ::rusty_lr_core::Token::Term(20usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(20usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TokenTypeDef,
            vec![
                ::rusty_lr_core::Token::Term(21usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(21usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::UserDataDef,
            vec![
                ::rusty_lr_core::Token::Term(22usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(22usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalOrTerminalSet,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalOrTerminalSet,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(0usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalOrTerminalSet,
            vec![::rusty_lr_core::Token::Term(2usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(2usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::IdentOrLiteral,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(0usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::IdentOrLiteral,
            vec![::rusty_lr_core::Token::Term(2usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(2usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceType,
            vec![::rusty_lr_core::Token::Term(16usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(16usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceType,
            vec![::rusty_lr_core::Token::Term(17usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(17usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceDef,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus37),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(33usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::ErrorDef,
            vec![
                ::rusty_lr_core::Token::Term(23usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(23usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::ModulePrefixDef,
            vec![
                ::rusty_lr_core::Token::Term(24usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(24usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Glr,
            vec![
                ::rusty_lr_core::Token::Term(27usize),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(27usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Lalr,
            vec![
                ::rusty_lr_core::Token::Term(26usize),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(26usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::Precedence,
            vec![
                ::rusty_lr_core::Token::Term(25usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus37),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(25usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::NoOptim,
            vec![
                ::rusty_lr_core::Token::Term(28usize),
                ::rusty_lr_core::Token::Term(33usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(28usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule)],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenDef,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::StartDef,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef)],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenTypeDef,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::UserDataDef,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ReduceDef,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ErrorDef,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ModulePrefixDef,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Lalr)],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Glr)],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Precedence,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::NoOptim,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::Grammar,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_GrammarLinePlus38,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedPlus28,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenMapped,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedPlus28,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedPlus28),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),
            ],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedStar29,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TokenMappedPlus28,
            )],
            None,
            None,
        );
        builder.add_rule(GrammarNonTerminals::_TokenMappedStar29, vec![], None, None);
        builder.add_rule(
            GrammarNonTerminals::_PrecDefQuestion30,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::PrecDef,
            )],
            None,
            None,
        );
        builder.add_rule(GrammarNonTerminals::_PrecDefQuestion30, vec![], None, None);
        builder.add_rule(
            GrammarNonTerminals::_caretQuestion31,
            vec![::rusty_lr_core::Token::Term(31usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(31usize)),
        );
        builder.add_rule(GrammarNonTerminals::_caretQuestion31, vec![], None, None);
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemPlus32,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSetItem,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemPlus32,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemPlus32),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),
            ],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemStar33,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TerminalSetItemPlus32,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemStar33,
            vec![],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_PatternPlus34,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_PatternPlus34,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternPlus34),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(0usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(29usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(29usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(5usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(5usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(1usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(1usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(30usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(30usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(10usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(11usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(11usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(12usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(12usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(31usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(31usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(8usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(8usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(13usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(9usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(9usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(2usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(2usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(32usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(32usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(6usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(6usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(3usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(3usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(14usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(14usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(4usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(4usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(15usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(15usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(16usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(16usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(17usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(17usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(18usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(18usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(19usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(19usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(20usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(20usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(21usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(21usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(22usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(22usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(23usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(23usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(24usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(24usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(26usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(26usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(27usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(27usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(7usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(7usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(25usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(25usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet35,
            vec![::rusty_lr_core::Token::Term(28usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(28usize)),
        );
        builder.add_rule(
            GrammarNonTerminals::__TermSet35Plus36,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TermSet35,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::__TermSet35Plus36,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__TermSet35Plus36),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TermSet35),
            ],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_IdentOrLiteralPlus37,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::IdentOrLiteral,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_IdentOrLiteralPlus37,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus37),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),
            ],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_GrammarLinePlus38,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::GrammarLine,
            )],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::_GrammarLinePlus38,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::GrammarLine),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_GrammarLinePlus38),
            ],
            None,
            None,
        );
        builder.add_rule(
            GrammarNonTerminals::Augmented,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                ::rusty_lr_core::Token::Term(34usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(34usize)),
        );
        let Ok(states) = builder.build(GrammarNonTerminals::Augmented) else {
            unreachable!("Failed to build LR parser")
        };
        let states = states.states;
        let rules = builder.rules.into_iter().map(|rule| rule.rule).collect();
        let states: Vec<_> = states
            .into_iter()
            .map(|state| state.into_lr_state(|x| x, |x| x))
            .collect();
        let mut terminals_class_map: ::rusty_lr_core::HashMap<Lexed, usize> = Default::default();
        terminals_class_map.insert(Lexed::Ident(Ident::new("id", Span::call_site())), 0usize);
        terminals_class_map.insert(Lexed::Colon(punct!(':')), 29usize);
        terminals_class_map.insert(Lexed::Semicolon(punct!(';')), 33usize);
        terminals_class_map.insert(Lexed::Pipe(punct!('|')), 5usize);
        terminals_class_map.insert(Lexed::Equal(punct!('=')), 30usize);
        terminals_class_map.insert(Lexed::Plus(punct!('+')), 10usize);
        terminals_class_map.insert(Lexed::Star(punct!('*')), 11usize);
        terminals_class_map.insert(Lexed::Question(punct!('?')), 12usize);
        terminals_class_map.insert(Lexed::Caret(punct!('^')), 31usize);
        terminals_class_map.insert(Lexed::Minus(punct!('-')), 8usize);
        terminals_class_map.insert(Lexed::Exclamation(punct!('!')), 13usize);
        terminals_class_map.insert(Lexed::Slash(punct!('/')), 9usize);
        terminals_class_map.insert(Lexed::Literal(Literal::usize_suffixed(0)), 2usize);
        terminals_class_map.insert(Lexed::ParenGroup(None), 32usize);
        terminals_class_map.insert(Lexed::BraceGroup(None), 6usize);
        terminals_class_map.insert(Lexed::LParen(Span::call_site()), 3usize);
        terminals_class_map.insert(Lexed::RParen(Span::call_site()), 14usize);
        terminals_class_map.insert(Lexed::LBracket(Span::call_site()), 4usize);
        terminals_class_map.insert(Lexed::RBracket(Span::call_site()), 15usize);
        terminals_class_map.insert(
            Lexed::Left(punct!('%'), Ident::new("id", Span::call_site())),
            16usize,
        );
        terminals_class_map.insert(
            Lexed::Right(punct!('%'), Ident::new("id", Span::call_site())),
            17usize,
        );
        terminals_class_map.insert(
            Lexed::Token(punct!('%'), Ident::new("id", Span::call_site())),
            18usize,
        );
        terminals_class_map.insert(
            Lexed::Start(punct!('%'), Ident::new("id", Span::call_site())),
            19usize,
        );
        terminals_class_map.insert(
            Lexed::EofDef(punct!('%'), Ident::new("id", Span::call_site())),
            20usize,
        );
        terminals_class_map.insert(
            Lexed::TokenType(punct!('%'), Ident::new("id", Span::call_site())),
            21usize,
        );
        terminals_class_map.insert(
            Lexed::UserData(punct!('%'), Ident::new("id", Span::call_site())),
            22usize,
        );
        terminals_class_map.insert(
            Lexed::ErrorType(punct!('%'), Ident::new("id", Span::call_site())),
            23usize,
        );
        terminals_class_map.insert(
            Lexed::ModulePrefix(punct!('%'), Ident::new("id", Span::call_site())),
            24usize,
        );
        terminals_class_map.insert(
            Lexed::Lalr(punct!('%'), Ident::new("id", Span::call_site())),
            26usize,
        );
        terminals_class_map.insert(
            Lexed::Glr(punct!('%'), Ident::new("id", Span::call_site())),
            27usize,
        );
        terminals_class_map.insert(
            Lexed::Prec(punct!('%'), Ident::new("id", Span::call_site())),
            7usize,
        );
        terminals_class_map.insert(
            Lexed::Precedence(punct!('%'), Ident::new("id", Span::call_site())),
            25usize,
        );
        terminals_class_map.insert(
            Lexed::NoOptim(punct!('%'), Ident::new("id", Span::call_site())),
            28usize,
        );
        terminals_class_map.insert(Lexed::Eof, 34usize);
        let terminal_classes = vec![
            vec![Lexed::Ident(Ident::new("id", Span::call_site()))],
            vec![],
            vec![Lexed::Literal(Literal::usize_suffixed(0))],
            vec![Lexed::LParen(Span::call_site())],
            vec![Lexed::LBracket(Span::call_site())],
            vec![Lexed::Pipe(punct!('|'))],
            vec![Lexed::BraceGroup(None)],
            vec![Lexed::Prec(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::Minus(punct!('-'))],
            vec![Lexed::Slash(punct!('/'))],
            vec![Lexed::Plus(punct!('+'))],
            vec![Lexed::Star(punct!('*'))],
            vec![Lexed::Question(punct!('?'))],
            vec![Lexed::Exclamation(punct!('!'))],
            vec![Lexed::RParen(Span::call_site())],
            vec![Lexed::RBracket(Span::call_site())],
            vec![Lexed::Left(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::Right(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::Token(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::Start(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::EofDef(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::TokenType(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::UserData(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::ErrorType(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::ModulePrefix(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::Precedence(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::Lalr(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::Glr(punct!('%'), Ident::new("id", Span::call_site()))],
            vec![Lexed::NoOptim(
                punct!('%'),
                Ident::new("id", Span::call_site()),
            )],
            vec![Lexed::Colon(punct!(':'))],
            vec![Lexed::Equal(punct!('='))],
            vec![Lexed::Caret(punct!('^'))],
            vec![Lexed::ParenGroup(None)],
            vec![Lexed::Semicolon(punct!(';'))],
            vec![Lexed::Eof],
        ];
        Self {
            rules,
            states,
            classes: terminal_classes,
            term_class_map: terminals_class_map,
            other_class_id: 1usize,
        }
    }
}
// ==============================Generated Codes End===============================
