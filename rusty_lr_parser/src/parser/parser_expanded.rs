// This file was generated by rustylr 0.11.0
//
// Input file: ../rusty_lr_parser/src/parser/parser.rs
// Output file: parser_expanded.rs
// ================================User Codes Begin================================
use crate::parser::args::GrammarArgs;
use crate::parser::args::PatternArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::args::TerminalSetOrIdent;
use crate::parser::lexer::Lexed;
use crate::terminalset::TerminalSet;
use crate::terminalset::TerminalSetItem;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Punct;
use proc_macro2::Spacing;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use rusty_lr_core::ReduceType;
use std::boxed::Box;
macro_rules ! punct (($ l : literal) => { Punct :: new ($ l , Spacing :: Alone) } ;) ;
// =================================User Codes End=================================
/*
====================================Grammar=====================================
Rule -> ident RuleType colon RuleLines semicolon
RuleType -> parengroup
RuleType ->
RuleLines -> RuleLines pipe RuleLine
RuleLines -> RuleLine
RuleLine -> _TokenMapped_Star1 Action
_TokenMapped_Plus0 -> TokenMapped
_TokenMapped_Plus0 -> _TokenMapped_Plus0 TokenMapped
_TokenMapped_Star1 -> _TokenMapped_Plus0
_TokenMapped_Star1 ->
TokenMapped -> Pattern
TokenMapped -> ident equal Pattern
TerminalSetItem -> ident
TerminalSetItem -> ident minus ident
TerminalSet -> lbracket _caret_Option2 _TerminalSetItem_Star4 rbracket
_caret_Option2 -> caret
_caret_Option2 ->
_TerminalSetItem_Plus3 -> TerminalSetItem
_TerminalSetItem_Plus3 -> _TerminalSetItem_Plus3 TerminalSetItem
_TerminalSetItem_Star4 -> _TerminalSetItem_Plus3
_TerminalSetItem_Star4 ->
Pattern -> ident
Pattern -> Pattern plus
Pattern -> Pattern star
Pattern -> Pattern question
Pattern -> Pattern exclamation
Pattern -> TerminalSet
Pattern -> Pattern slash TerminalSetOrIdent
Pattern -> lparen _Pattern_Plus5 rparen
_Pattern_Plus5 -> Pattern
_Pattern_Plus5 -> _Pattern_Plus5 Pattern
Action -> bracegroup
Action ->
TokenDef -> token ident RustCode semicolon
RustCode -> __TerminalSet6_Plus7
_TerminalSet6 -> bracegroup
_TerminalSet6 -> bracketgroup
_TerminalSet6 -> caret
_TerminalSet6 -> colon
_TerminalSet6 -> equal
_TerminalSet6 -> exclamation
_TerminalSet6 -> ident
_TerminalSet6 -> literal
_TerminalSet6 -> minus
_TerminalSet6 -> nonegroup
_TerminalSet6 -> otherpunct
_TerminalSet6 -> parengroup
_TerminalSet6 -> percent
_TerminalSet6 -> pipe
_TerminalSet6 -> plus
_TerminalSet6 -> question
_TerminalSet6 -> slash
_TerminalSet6 -> star
__TerminalSet6_Plus7 -> _TerminalSet6
__TerminalSet6_Plus7 -> __TerminalSet6_Plus7 _TerminalSet6
StartDef -> start ident semicolon
EofDef -> eofdef RustCode semicolon
TokenTypeDef -> tokentype RustCode semicolon
UserDataDef -> userdata RustCode semicolon
TerminalSetOrIdent -> TerminalSet
TerminalSetOrIdent -> ident
ReduceType -> left
ReduceType -> right
ReduceDef -> ReduceType TerminalSetOrIdent semicolon
ErrorDef -> errortype RustCode semicolon
ModulePrefixDef -> moduleprefix RustCode semicolon
DeriveDef -> derive RustCode semicolon
GrammarLine -> Rule
GrammarLine -> TokenDef
GrammarLine -> StartDef
GrammarLine -> EofDef
GrammarLine -> TokenTypeDef
GrammarLine -> UserDataDef
GrammarLine -> ReduceDef
GrammarLine -> ErrorDef
GrammarLine -> ModulePrefixDef
GrammarLine -> DeriveDef
Grammar -> _GrammarLine_Plus8
_GrammarLine_Plus8 -> GrammarLine
_GrammarLine_Plus8 -> GrammarLine _GrammarLine_Plus8
Augmented -> Grammar eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarRule = ::rusty_lr_core::ProductionRule<Lexed, GrammarNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarState = ::rusty_lr_core::State<Lexed, GrammarNonTerminals>;
#[doc = r" type alias for `ParseError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarParseError =
    ::rusty_lr_core::ParseError<Lexed, ::rusty_lr_core::DefaultReduceActionError>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarInvalidTerminalError = ::rusty_lr_core::InvalidTerminalError<Lexed>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types)]
#[derive(
    Debug,
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum GrammarNonTerminals {
    Rule,
    RuleType,
    RuleLines,
    RuleLine,
    _TokenMapped_Plus0,
    _TokenMapped_Star1,
    TokenMapped,
    TerminalSetItem,
    TerminalSet,
    _caret_Option2,
    _TerminalSetItem_Plus3,
    _TerminalSetItem_Star4,
    Pattern,
    _Pattern_Plus5,
    Action,
    TokenDef,
    RustCode,
    _TerminalSet6,
    __TerminalSet6_Plus7,
    StartDef,
    EofDef,
    TokenTypeDef,
    UserDataDef,
    TerminalSetOrIdent,
    ReduceType,
    ReduceDef,
    ErrorDef,
    ModulePrefixDef,
    DeriveDef,
    GrammarLine,
    Grammar,
    _GrammarLine_Plus8,
    Augmented,
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrammarNonTerminals::Rule => write!(f, "Rule"),
            GrammarNonTerminals::RuleType => write!(f, "RuleType"),
            GrammarNonTerminals::RuleLines => write!(f, "RuleLines"),
            GrammarNonTerminals::RuleLine => write!(f, "RuleLine"),
            GrammarNonTerminals::_TokenMapped_Plus0 => write!(f, "_TokenMapped_Plus0"),
            GrammarNonTerminals::_TokenMapped_Star1 => write!(f, "_TokenMapped_Star1"),
            GrammarNonTerminals::TokenMapped => write!(f, "TokenMapped"),
            GrammarNonTerminals::TerminalSetItem => write!(f, "TerminalSetItem"),
            GrammarNonTerminals::TerminalSet => write!(f, "TerminalSet"),
            GrammarNonTerminals::_caret_Option2 => write!(f, "_caret_Option2"),
            GrammarNonTerminals::_TerminalSetItem_Plus3 => write!(f, "_TerminalSetItem_Plus3"),
            GrammarNonTerminals::_TerminalSetItem_Star4 => write!(f, "_TerminalSetItem_Star4"),
            GrammarNonTerminals::Pattern => write!(f, "Pattern"),
            GrammarNonTerminals::_Pattern_Plus5 => write!(f, "_Pattern_Plus5"),
            GrammarNonTerminals::Action => write!(f, "Action"),
            GrammarNonTerminals::TokenDef => write!(f, "TokenDef"),
            GrammarNonTerminals::RustCode => write!(f, "RustCode"),
            GrammarNonTerminals::_TerminalSet6 => write!(f, "_TerminalSet6"),
            GrammarNonTerminals::__TerminalSet6_Plus7 => write!(f, "__TerminalSet6_Plus7"),
            GrammarNonTerminals::StartDef => write!(f, "StartDef"),
            GrammarNonTerminals::EofDef => write!(f, "EofDef"),
            GrammarNonTerminals::TokenTypeDef => write!(f, "TokenTypeDef"),
            GrammarNonTerminals::UserDataDef => write!(f, "UserDataDef"),
            GrammarNonTerminals::TerminalSetOrIdent => write!(f, "TerminalSetOrIdent"),
            GrammarNonTerminals::ReduceType => write!(f, "ReduceType"),
            GrammarNonTerminals::ReduceDef => write!(f, "ReduceDef"),
            GrammarNonTerminals::ErrorDef => write!(f, "ErrorDef"),
            GrammarNonTerminals::ModulePrefixDef => write!(f, "ModulePrefixDef"),
            GrammarNonTerminals::DeriveDef => write!(f, "DeriveDef"),
            GrammarNonTerminals::GrammarLine => write!(f, "GrammarLine"),
            GrammarNonTerminals::Grammar => write!(f, "Grammar"),
            GrammarNonTerminals::_GrammarLine_Plus8 => write!(f, "_GrammarLine_Plus8"),
            GrammarNonTerminals::Augmented => write!(f, "Augmented"),
        }
    }
}
#[doc = r" struct that holds internal parser data,"]
#[doc = r" including data stack for each non-terminal,"]
#[doc = r" and state stack for DFA"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarContext {
    #[doc = r" state stack, user must not modify this"]
    pub state_stack: Vec<usize>,
    __rustylr_generated_terminal_stack: Vec<Lexed>,
    __rustylr_generated_stack_1: Vec<RuleDefArgs>,
    __rustylr_generated_stack_2: Vec<Option<Group>>,
    __rustylr_generated_stack_3: Vec<Vec<RuleLineArgs>>,
    __rustylr_generated_stack_4: Vec<RuleLineArgs>,
    __rustylr_generated_stack_5: Vec<Vec<(Option<Ident>, PatternArgs)>>,
    __rustylr_generated_stack_6: Vec<(Option<Ident>, PatternArgs)>,
    __rustylr_generated_stack_7: Vec<TerminalSetItem>,
    __rustylr_generated_stack_8: Vec<TerminalSet>,
    __rustylr_generated_stack_9: Vec<Option<Lexed>>,
    __rustylr_generated_stack_10: Vec<Vec<TerminalSetItem>>,
    __rustylr_generated_stack_11: Vec<PatternArgs>,
    __rustylr_generated_stack_12: Vec<Vec<PatternArgs>>,
    __rustylr_generated_stack_13: Vec<(Ident, TokenStream)>,
    __rustylr_generated_stack_14: Vec<TokenStream>,
    __rustylr_generated_stack_15: Vec<Vec<Lexed>>,
    __rustylr_generated_stack_16: Vec<Ident>,
    __rustylr_generated_stack_17: Vec<(Span, TokenStream)>,
    __rustylr_generated_stack_18: Vec<TerminalSetOrIdent>,
    __rustylr_generated_stack_19: Vec<ReduceType>,
    __rustylr_generated_stack_20: Vec<(TerminalSetOrIdent, ReduceType)>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl GrammarContext {
    pub fn new() -> Self {
        Self {
            state_stack: vec![0],
            __rustylr_generated_terminal_stack: Vec::new(),
            __rustylr_generated_stack_1: Vec::new(),
            __rustylr_generated_stack_2: Vec::new(),
            __rustylr_generated_stack_3: Vec::new(),
            __rustylr_generated_stack_4: Vec::new(),
            __rustylr_generated_stack_5: Vec::new(),
            __rustylr_generated_stack_6: Vec::new(),
            __rustylr_generated_stack_7: Vec::new(),
            __rustylr_generated_stack_8: Vec::new(),
            __rustylr_generated_stack_9: Vec::new(),
            __rustylr_generated_stack_10: Vec::new(),
            __rustylr_generated_stack_11: Vec::new(),
            __rustylr_generated_stack_12: Vec::new(),
            __rustylr_generated_stack_13: Vec::new(),
            __rustylr_generated_stack_14: Vec::new(),
            __rustylr_generated_stack_15: Vec::new(),
            __rustylr_generated_stack_16: Vec::new(),
            __rustylr_generated_stack_17: Vec::new(),
            __rustylr_generated_stack_18: Vec::new(),
            __rustylr_generated_stack_19: Vec::new(),
            __rustylr_generated_stack_20: Vec::new(),
        }
    }
    fn reduce_Rule_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        let mut colon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleType = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_1.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("Rule-Ident");
            };
            if let Lexed::Colon(colon) = colon {
                let span = colon.span();
                if let Some(fisrt) = RuleLines.first_mut() {
                    fisrt.separator_span = span;
                }
            } else {
                unreachable!("Rule-Colon2");
            }
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.stream()),
                rule_lines: RuleLines,
            }
        });
        Ok(())
    }
    fn reduce_RuleType_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut parengroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::ParenGroup(group) = parengroup {
                group
            } else {
                unreachable!("RuleType - Group");
            }
        });
        Ok(())
    }
    fn reduce_RuleType_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_RuleLines_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        let mut pipe = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        self.__rustylr_generated_stack_3.push({
            if let Lexed::Pipe(punct) = pipe {
                RuleLine.separator_span = punct.span();
                RuleLines.push(RuleLine);
            }
            RuleLines
        });
        Ok(())
    }
    fn reduce_RuleLines_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        self.__rustylr_generated_stack_3.push({ vec![RuleLine] });
        Ok(())
    }
    fn reduce_RuleLine_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Action = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut TokenMapped = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_4.push({
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
                separator_span: Span::call_site(),
            }
        });
        Ok(())
    }
    fn reduce__TokenMapped_Plus0_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        self.__rustylr_generated_stack_5.push({ vec![A] });
        Ok(())
    }
    fn reduce__TokenMapped_Plus0_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_5.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TokenMapped_Star1_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_5.push({ Ap });
        Ok(())
    }
    fn reduce__TokenMapped_Star1_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_5.push({ vec![] });
        Ok(())
    }
    fn reduce_TokenMapped_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_6.push({ (None, Pattern) });
        Ok(())
    }
    fn reduce_TokenMapped_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut equal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            if let Lexed::Ident(ident) = ident {
                (Some(ident), Pattern)
            } else {
                unreachable!("Token-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            TerminalSetItem::Terminal(ident)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let first = if let Lexed::Ident(first) = first {
                first
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            let last = if let Lexed::Ident(last) = last {
                last
            } else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::Range(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSet_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSetItem = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut caret = self.__rustylr_generated_stack_9.pop().unwrap();
        let mut lbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            let open_span = if let Lexed::LBracket(lbracket) = lbracket {
                lbracket
            } else {
                unreachable!("TerminalSet-Open");
            };
            let close_span = if let Lexed::RBracket(rbracket) = rbracket {
                rbracket
            } else {
                unreachable!("TerminalSet-Close");
            };
            TerminalSet {
                negate: caret.is_some(),
                items: TerminalSetItem,
                open_span,
                close_span,
            }
        });
        Ok(())
    }
    fn reduce__caret_Option2_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({ Some(A) });
        Ok(())
    }
    fn reduce__caret_Option2_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_9.push({ None });
        Ok(())
    }
    fn reduce__TerminalSetItem_Plus3_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        self.__rustylr_generated_stack_10.push({ vec![A] });
        Ok(())
    }
    fn reduce__TerminalSetItem_Plus3_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_7.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_10.pop().unwrap();
        self.__rustylr_generated_stack_10.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TerminalSetItem_Star4_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_10.pop().unwrap();
        self.__rustylr_generated_stack_10.push({ Ap });
        Ok(())
    }
    fn reduce__TerminalSetItem_Star4_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_10.push({ vec![] });
        Ok(())
    }
    fn reduce_Pattern_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Ident(ident) = ident {
                PatternArgs::Ident(ident)
            } else {
                unreachable!("Pattern-Ident");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut plus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Plus(plus) = plus {
                PatternArgs::Plus(Box::new(Pattern), plus.span())
            } else {
                unreachable!("Pattern-Plus");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_2(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut star = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Star(star) = star {
                PatternArgs::Star(Box::new(Pattern), star.span())
            } else {
                unreachable!("Pattern-Star");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_3(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut question = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Question(question) = question {
                PatternArgs::Question(Box::new(Pattern), question.span())
            } else {
                unreachable!("Pattern-Question");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_4(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut exclamation = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Exclamation(exclamation) = exclamation {
                PatternArgs::Exclamation(Box::new(Pattern), exclamation.span())
            } else {
                unreachable!("Pattern-Exclamation");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_5(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_11
            .push({ PatternArgs::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_Pattern_6(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSetOrIdent = self.__rustylr_generated_stack_18.pop().unwrap();
        let mut slash = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_11
            .push({ PatternArgs::Lookaheads(Box::new(Pattern), TerminalSetOrIdent) });
        Ok(())
    }
    fn reduce_Pattern_7(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rparen = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_12.pop().unwrap();
        let mut lparen = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            let open = if let Lexed::LParen(lparen) = lparen {
                lparen
            } else {
                unreachable!("Pattern-Group-Open");
            };
            let close = if let Lexed::RParen(rparen) = rparen {
                rparen
            } else {
                unreachable!("Pattern-Group-Close");
            };
            PatternArgs::Group(Pattern, open, close)
        });
        Ok(())
    }
    fn reduce__Pattern_Plus5_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_11.pop().unwrap();
        self.__rustylr_generated_stack_12.push({ vec![A] });
        Ok(())
    }
    fn reduce__Pattern_Plus5_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_11.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_12.pop().unwrap();
        self.__rustylr_generated_stack_12.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce_Action_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut bracegroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::BraceGroup(group) = bracegroup {
                group
            } else {
                unreachable!("Action0");
            }
        });
        Ok(())
    }
    fn reduce_Action_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_TokenDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_14.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut token = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13.push({
            if let Lexed::Ident(ident) = ident {
                (ident, RustCode)
            } else {
                unreachable!("TokenDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_RustCode_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut t = self.__rustylr_generated_stack_15.pop().unwrap();
        self.__rustylr_generated_stack_14.push({
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                token.append_to_stream(&mut tokens);
            }
            tokens
        });
        Ok(())
    }
    fn reduce__TerminalSet6_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_2(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_3(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_4(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_5(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_6(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_7(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_8(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_9(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_10(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_11(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_12(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_13(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_14(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_15(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_16(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet6_17(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce___TerminalSet6_Plus7_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_15.push({ vec![A] });
        Ok(())
    }
    fn reduce___TerminalSet6_Plus7_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_15.pop().unwrap();
        self.__rustylr_generated_stack_15.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce_StartDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut start = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_16.push({
            if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("StartDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_EofDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_14.pop().unwrap();
        let mut eofdef = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17
            .push({ (eofdef.span(), RustCode) });
        Ok(())
    }
    fn reduce_TokenTypeDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_14.pop().unwrap();
        let mut tokentype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17
            .push({ (tokentype.span(), RustCode) });
        Ok(())
    }
    fn reduce_UserDataDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_14.pop().unwrap();
        let mut userdata = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17
            .push({ (userdata.span(), RustCode) });
        Ok(())
    }
    fn reduce_TerminalSetOrIdent_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSet = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_18
            .push({ TerminalSetOrIdent::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_TerminalSetOrIdent_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_18.push({
            if let Lexed::Ident(ident) = ident {
                TerminalSetOrIdent::Ident(ident)
            } else {
                unreachable!("TerminalSetOrIdent-Ident");
            }
        });
        Ok(())
    }
    fn reduce_ReduceType_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut left = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_19.push({ ReduceType::Left });
        Ok(())
    }
    fn reduce_ReduceType_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut right = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_19
            .push({ ReduceType::Right });
        Ok(())
    }
    fn reduce_ReduceDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSetOrIdent = self.__rustylr_generated_stack_18.pop().unwrap();
        let mut reducetype = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_20
            .push({ (TerminalSetOrIdent, reducetype) });
        Ok(())
    }
    fn reduce_ErrorDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_14.pop().unwrap();
        let mut errortype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17
            .push({ (errortype.span(), RustCode) });
        Ok(())
    }
    fn reduce_ModulePrefixDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_14.pop().unwrap();
        let mut moduleprefix = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17
            .push({ (moduleprefix.span(), RustCode) });
        Ok(())
    }
    fn reduce_DeriveDef_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_14.pop().unwrap();
        let mut derive = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14.push({ RustCode });
        Ok(())
    }
    fn reduce_GrammarLine_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Rule = self.__rustylr_generated_stack_1.pop().unwrap();
        {
            data.rules.push(Rule);
        }
        Ok(())
    }
    fn reduce_GrammarLine_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenDef = self.__rustylr_generated_stack_13.pop().unwrap();
        {
            data.terminals.push(TokenDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_2(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut StartDef = self.__rustylr_generated_stack_16.pop().unwrap();
        {
            data.start_rule_name.push(StartDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_3(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut EofDef = self.__rustylr_generated_stack_17.pop().unwrap();
        {
            data.eof.push(EofDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_4(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenTypeDef = self.__rustylr_generated_stack_17.pop().unwrap();
        {
            data.token_typename.push(TokenTypeDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_5(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut UserDataDef = self.__rustylr_generated_stack_17.pop().unwrap();
        {
            data.userdata_typename.push(UserDataDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_6(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ReduceDef = self.__rustylr_generated_stack_20.pop().unwrap();
        {
            data.reduce_types.push(ReduceDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_7(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ErrorDef = self.__rustylr_generated_stack_17.pop().unwrap();
        {
            data.error_typename.push(ErrorDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_8(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ModulePrefixDef = self.__rustylr_generated_stack_17.pop().unwrap();
        {
            data.module_prefix.push(ModulePrefixDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_9(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut DeriveDef = self.__rustylr_generated_stack_14.pop().unwrap();
        {
            data.derives.push(DeriveDef);
        }
        Ok(())
    }
    fn reduce_Grammar_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__GrammarLine_Plus8_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__GrammarLine_Plus8_1(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce_Augmented_0(
        &mut self,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_terminal_stack.pop();
        Ok(())
    }
    #[doc = r" reduce items in stack, this function is called automatically by parser"]
    pub fn reduce(
        &mut self,
        rulelen: usize,
        rustylr_macro_generated_ruleid__: usize,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        match rustylr_macro_generated_ruleid__ {
            0usize => {
                self.reduce_Rule_0(data)?;
            }
            1usize => {
                self.reduce_RuleType_0(data)?;
            }
            2usize => {
                self.reduce_RuleType_1(data)?;
            }
            3usize => {
                self.reduce_RuleLines_0(data)?;
            }
            4usize => {
                self.reduce_RuleLines_1(data)?;
            }
            5usize => {
                self.reduce_RuleLine_0(data)?;
            }
            6usize => {
                self.reduce__TokenMapped_Plus0_0(data)?;
            }
            7usize => {
                self.reduce__TokenMapped_Plus0_1(data)?;
            }
            8usize => {
                self.reduce__TokenMapped_Star1_0(data)?;
            }
            9usize => {
                self.reduce__TokenMapped_Star1_1(data)?;
            }
            10usize => {
                self.reduce_TokenMapped_0(data)?;
            }
            11usize => {
                self.reduce_TokenMapped_1(data)?;
            }
            12usize => {
                self.reduce_TerminalSetItem_0(data)?;
            }
            13usize => {
                self.reduce_TerminalSetItem_1(data)?;
            }
            14usize => {
                self.reduce_TerminalSet_0(data)?;
            }
            15usize => {
                self.reduce__caret_Option2_0(data)?;
            }
            16usize => {
                self.reduce__caret_Option2_1(data)?;
            }
            17usize => {
                self.reduce__TerminalSetItem_Plus3_0(data)?;
            }
            18usize => {
                self.reduce__TerminalSetItem_Plus3_1(data)?;
            }
            19usize => {
                self.reduce__TerminalSetItem_Star4_0(data)?;
            }
            20usize => {
                self.reduce__TerminalSetItem_Star4_1(data)?;
            }
            21usize => {
                self.reduce_Pattern_0(data)?;
            }
            22usize => {
                self.reduce_Pattern_1(data)?;
            }
            23usize => {
                self.reduce_Pattern_2(data)?;
            }
            24usize => {
                self.reduce_Pattern_3(data)?;
            }
            25usize => {
                self.reduce_Pattern_4(data)?;
            }
            26usize => {
                self.reduce_Pattern_5(data)?;
            }
            27usize => {
                self.reduce_Pattern_6(data)?;
            }
            28usize => {
                self.reduce_Pattern_7(data)?;
            }
            29usize => {
                self.reduce__Pattern_Plus5_0(data)?;
            }
            30usize => {
                self.reduce__Pattern_Plus5_1(data)?;
            }
            31usize => {
                self.reduce_Action_0(data)?;
            }
            32usize => {
                self.reduce_Action_1(data)?;
            }
            33usize => {
                self.reduce_TokenDef_0(data)?;
            }
            34usize => {
                self.reduce_RustCode_0(data)?;
            }
            35usize => {
                self.reduce__TerminalSet6_0(data)?;
            }
            36usize => {
                self.reduce__TerminalSet6_1(data)?;
            }
            37usize => {
                self.reduce__TerminalSet6_2(data)?;
            }
            38usize => {
                self.reduce__TerminalSet6_3(data)?;
            }
            39usize => {
                self.reduce__TerminalSet6_4(data)?;
            }
            40usize => {
                self.reduce__TerminalSet6_5(data)?;
            }
            41usize => {
                self.reduce__TerminalSet6_6(data)?;
            }
            42usize => {
                self.reduce__TerminalSet6_7(data)?;
            }
            43usize => {
                self.reduce__TerminalSet6_8(data)?;
            }
            44usize => {
                self.reduce__TerminalSet6_9(data)?;
            }
            45usize => {
                self.reduce__TerminalSet6_10(data)?;
            }
            46usize => {
                self.reduce__TerminalSet6_11(data)?;
            }
            47usize => {
                self.reduce__TerminalSet6_12(data)?;
            }
            48usize => {
                self.reduce__TerminalSet6_13(data)?;
            }
            49usize => {
                self.reduce__TerminalSet6_14(data)?;
            }
            50usize => {
                self.reduce__TerminalSet6_15(data)?;
            }
            51usize => {
                self.reduce__TerminalSet6_16(data)?;
            }
            52usize => {
                self.reduce__TerminalSet6_17(data)?;
            }
            53usize => {
                self.reduce___TerminalSet6_Plus7_0(data)?;
            }
            54usize => {
                self.reduce___TerminalSet6_Plus7_1(data)?;
            }
            55usize => {
                self.reduce_StartDef_0(data)?;
            }
            56usize => {
                self.reduce_EofDef_0(data)?;
            }
            57usize => {
                self.reduce_TokenTypeDef_0(data)?;
            }
            58usize => {
                self.reduce_UserDataDef_0(data)?;
            }
            59usize => {
                self.reduce_TerminalSetOrIdent_0(data)?;
            }
            60usize => {
                self.reduce_TerminalSetOrIdent_1(data)?;
            }
            61usize => {
                self.reduce_ReduceType_0(data)?;
            }
            62usize => {
                self.reduce_ReduceType_1(data)?;
            }
            63usize => {
                self.reduce_ReduceDef_0(data)?;
            }
            64usize => {
                self.reduce_ErrorDef_0(data)?;
            }
            65usize => {
                self.reduce_ModulePrefixDef_0(data)?;
            }
            66usize => {
                self.reduce_DeriveDef_0(data)?;
            }
            67usize => {
                self.reduce_GrammarLine_0(data)?;
            }
            68usize => {
                self.reduce_GrammarLine_1(data)?;
            }
            69usize => {
                self.reduce_GrammarLine_2(data)?;
            }
            70usize => {
                self.reduce_GrammarLine_3(data)?;
            }
            71usize => {
                self.reduce_GrammarLine_4(data)?;
            }
            72usize => {
                self.reduce_GrammarLine_5(data)?;
            }
            73usize => {
                self.reduce_GrammarLine_6(data)?;
            }
            74usize => {
                self.reduce_GrammarLine_7(data)?;
            }
            75usize => {
                self.reduce_GrammarLine_8(data)?;
            }
            76usize => {
                self.reduce_GrammarLine_9(data)?;
            }
            77usize => {
                self.reduce_Grammar_0(data)?;
            }
            78usize => {
                self.reduce__GrammarLine_Plus8_0(data)?;
            }
            79usize => {
                self.reduce__GrammarLine_Plus8_1(data)?;
            }
            80usize => {
                self.reduce_Augmented_0(data)?;
            }
            _ => {
                unreachable!("Invalid Rule: {}", rustylr_macro_generated_ruleid__);
            }
        }
        Ok(())
    }
    #[doc = r" pop value from start rule"]
    #[inline]
    pub fn accept(&mut self) {}
    #[doc = r" push terminal symbol to stack, this function is called automatically by parser"]
    #[inline]
    pub fn push(&mut self, term: Lexed) {
        self.__rustylr_generated_terminal_stack.push(term);
    }
}
impl ::rusty_lr_core::GetContext<Lexed, GrammarNonTerminals> for GrammarContext {
    fn get_state_stack(&self) -> &[usize] {
        &self.state_stack
    }
}
#[doc = r" struct that holds parser data, DFA tables"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
#[derive(Clone)]
pub struct GrammarParser {
    #[doc = r" production rules"]
    pub rules: Vec<GrammarRule>,
    #[doc = r" states"]
    pub states: Vec<GrammarState>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarParser {
    #[doc = r" feed one terminal to parser, and update state stack"]
    pub fn feed(
        &self,
        context: &mut GrammarContext,
        term: Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), GrammarParseError> {
        self.lookahead(context, &term, data)?;
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(next_state_id) = state.shift_goto_term(&term) {
            context.state_stack.push(next_state_id);
            context.push(term);
            Ok(())
        } else {
            let error = GrammarInvalidTerminalError {
                term,
                expected: state.expected().into_iter().cloned().collect(),
            };
            Err(GrammarParseError::InvalidTerminal(error))
        }
    }
    #[doc = r" Create new context for parsing"]
    #[inline]
    pub fn begin(&self) -> GrammarContext {
        GrammarContext::new()
    }
    #[doc = r" give lookahead token to parser, and check if there is any reduce action"]
    fn lookahead(
        &self,
        context: &mut GrammarContext,
        term: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), GrammarParseError> {
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(reduce_rule) = state.reduce(term) {
            let rule = &self.rules[reduce_rule];
            context
                .state_stack
                .truncate(context.state_stack.len() - rule.rule.len());
            context
                .reduce(self.rules[reduce_rule].rule.len(), reduce_rule, data)
                .map_err(GrammarParseError::ReduceAction)?;
            self.feed_nonterm(context, &rule.name)?;
            self.lookahead(context, term, data)?;
        }
        Ok(())
    }
    #[doc = r" feed one non-terminal to parser, and update state stack"]
    fn feed_nonterm(
        &self,
        context: &mut GrammarContext,
        nonterm: &GrammarNonTerminals,
    ) -> Result<(), GrammarParseError> {
        let state = &self.states[*context.state_stack.last().unwrap()];
        if let Some(next_state_id) = state.shift_goto_nonterm(nonterm) {
            context.state_stack.push(next_state_id);
        } else {
            unreachable!("Invalid NonTerminal: {}", nonterm);
        }
        Ok(())
    }
    #[doc = r" Create new parser instance."]
    #[doc = r" Parser can be reused with different context, for multiple parsing."]
    pub fn new() -> Self {
        let __rustylr_terminals = vec![
            Lexed::Ident(Ident::new("id", Span::call_site())),
            Lexed::Colon(punct!(':')),
            Lexed::Semicolon(punct!(';')),
            Lexed::Pipe(punct!('|')),
            Lexed::Percent(punct!('%')),
            Lexed::Equal(punct!('=')),
            Lexed::Plus(punct!('+')),
            Lexed::Star(punct!('*')),
            Lexed::Question(punct!('?')),
            Lexed::Caret(punct!('^')),
            Lexed::Minus(punct!('-')),
            Lexed::Exclamation(punct!('!')),
            Lexed::Slash(punct!('/')),
            Lexed::OtherPunct(punct!('.')),
            Lexed::Literal(None),
            Lexed::ParenGroup(None),
            Lexed::BraceGroup(None),
            Lexed::BracketGroup(None),
            Lexed::NoneGroup(None),
            Lexed::LParen(Span::call_site()),
            Lexed::RParen(Span::call_site()),
            Lexed::LBrace(Span::call_site()),
            Lexed::RBrace(Span::call_site()),
            Lexed::LBracket(Span::call_site()),
            Lexed::RBracket(Span::call_site()),
            Lexed::Left(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Right(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Token(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Start(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::EofDef(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::TokenType(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::UserData(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::ErrorType(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::ModulePrefix(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Derive(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Eof,
        ];
        const RUSTYLR_RULES_TOKENS: &[&[::rusty_lr_core::Token<u16, GrammarNonTerminals>]] = &[
            &[
                ::rusty_lr_core::Token::Term(0u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
                ::rusty_lr_core::Token::Term(1u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[::rusty_lr_core::Token::Term(15u16)],
            &[],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(3u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::RuleLine,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMapped_Star1),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenMapped,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMapped_Plus0),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TokenMapped_Plus0,
            )],
            &[],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            &[
                ::rusty_lr_core::Token::Term(0u16),
                ::rusty_lr_core::Token::Term(5u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            &[::rusty_lr_core::Token::Term(0u16)],
            &[
                ::rusty_lr_core::Token::Term(0u16),
                ::rusty_lr_core::Token::Term(10u16),
                ::rusty_lr_core::Token::Term(0u16),
            ],
            &[
                ::rusty_lr_core::Token::Term(23u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_caret_Option2),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItem_Star4),
                ::rusty_lr_core::Token::Term(24u16),
            ],
            &[::rusty_lr_core::Token::Term(9u16)],
            &[],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSetItem,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItem_Plus3),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TerminalSetItem_Plus3,
            )],
            &[],
            &[::rusty_lr_core::Token::Term(0u16)],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(6u16),
            ],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(7u16),
            ],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(8u16),
            ],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(11u16),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(12u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetOrIdent),
            ],
            &[
                ::rusty_lr_core::Token::Term(19u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_Pattern_Plus5),
                ::rusty_lr_core::Token::Term(20u16),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_Pattern_Plus5),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            &[::rusty_lr_core::Token::Term(16u16)],
            &[],
            &[
                ::rusty_lr_core::Token::Term(27u16),
                ::rusty_lr_core::Token::Term(0u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::__TerminalSet6_Plus7,
            )],
            &[::rusty_lr_core::Token::Term(16u16)],
            &[::rusty_lr_core::Token::Term(17u16)],
            &[::rusty_lr_core::Token::Term(9u16)],
            &[::rusty_lr_core::Token::Term(1u16)],
            &[::rusty_lr_core::Token::Term(5u16)],
            &[::rusty_lr_core::Token::Term(11u16)],
            &[::rusty_lr_core::Token::Term(0u16)],
            &[::rusty_lr_core::Token::Term(14u16)],
            &[::rusty_lr_core::Token::Term(10u16)],
            &[::rusty_lr_core::Token::Term(18u16)],
            &[::rusty_lr_core::Token::Term(13u16)],
            &[::rusty_lr_core::Token::Term(15u16)],
            &[::rusty_lr_core::Token::Term(4u16)],
            &[::rusty_lr_core::Token::Term(3u16)],
            &[::rusty_lr_core::Token::Term(6u16)],
            &[::rusty_lr_core::Token::Term(8u16)],
            &[::rusty_lr_core::Token::Term(12u16)],
            &[::rusty_lr_core::Token::Term(7u16)],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TerminalSet6,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__TerminalSet6_Plus7),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSet6),
            ],
            &[
                ::rusty_lr_core::Token::Term(28u16),
                ::rusty_lr_core::Token::Term(0u16),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[
                ::rusty_lr_core::Token::Term(29u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[
                ::rusty_lr_core::Token::Term(30u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[
                ::rusty_lr_core::Token::Term(31u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            &[::rusty_lr_core::Token::Term(0u16)],
            &[::rusty_lr_core::Token::Term(25u16)],
            &[::rusty_lr_core::Token::Term(26u16)],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetOrIdent),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[
                ::rusty_lr_core::Token::Term(32u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[
                ::rusty_lr_core::Token::Term(33u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[
                ::rusty_lr_core::Token::Term(34u16),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2u16),
            ],
            &[::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule)],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::StartDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef)],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenTypeDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::UserDataDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ReduceDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ErrorDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ModulePrefixDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::DeriveDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_GrammarLine_Plus8,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::GrammarLine,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::GrammarLine),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_GrammarLine_Plus8),
            ],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                ::rusty_lr_core::Token::Term(35u16),
            ],
        ];
        const RUSTYLR_RULES_NAME: &[GrammarNonTerminals] = &[
            GrammarNonTerminals::Rule,
            GrammarNonTerminals::RuleType,
            GrammarNonTerminals::RuleType,
            GrammarNonTerminals::RuleLines,
            GrammarNonTerminals::RuleLines,
            GrammarNonTerminals::RuleLine,
            GrammarNonTerminals::_TokenMapped_Plus0,
            GrammarNonTerminals::_TokenMapped_Plus0,
            GrammarNonTerminals::_TokenMapped_Star1,
            GrammarNonTerminals::_TokenMapped_Star1,
            GrammarNonTerminals::TokenMapped,
            GrammarNonTerminals::TokenMapped,
            GrammarNonTerminals::TerminalSetItem,
            GrammarNonTerminals::TerminalSetItem,
            GrammarNonTerminals::TerminalSet,
            GrammarNonTerminals::_caret_Option2,
            GrammarNonTerminals::_caret_Option2,
            GrammarNonTerminals::_TerminalSetItem_Plus3,
            GrammarNonTerminals::_TerminalSetItem_Plus3,
            GrammarNonTerminals::_TerminalSetItem_Star4,
            GrammarNonTerminals::_TerminalSetItem_Star4,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::_Pattern_Plus5,
            GrammarNonTerminals::_Pattern_Plus5,
            GrammarNonTerminals::Action,
            GrammarNonTerminals::Action,
            GrammarNonTerminals::TokenDef,
            GrammarNonTerminals::RustCode,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::_TerminalSet6,
            GrammarNonTerminals::__TerminalSet6_Plus7,
            GrammarNonTerminals::__TerminalSet6_Plus7,
            GrammarNonTerminals::StartDef,
            GrammarNonTerminals::EofDef,
            GrammarNonTerminals::TokenTypeDef,
            GrammarNonTerminals::UserDataDef,
            GrammarNonTerminals::TerminalSetOrIdent,
            GrammarNonTerminals::TerminalSetOrIdent,
            GrammarNonTerminals::ReduceType,
            GrammarNonTerminals::ReduceType,
            GrammarNonTerminals::ReduceDef,
            GrammarNonTerminals::ErrorDef,
            GrammarNonTerminals::ModulePrefixDef,
            GrammarNonTerminals::DeriveDef,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::Grammar,
            GrammarNonTerminals::_GrammarLine_Plus8,
            GrammarNonTerminals::_GrammarLine_Plus8,
            GrammarNonTerminals::Augmented,
        ];
        let rules: Vec<GrammarRule> = RUSTYLR_RULES_NAME
            .iter()
            .zip(RUSTYLR_RULES_TOKENS.iter())
            .map(|(name, tokens)| GrammarRule {
                name: *name,
                rule: tokens
                    .iter()
                    .map(|token| match token {
                        ::rusty_lr_core::Token::Term(term) => ::rusty_lr_core::Token::Term(
                            __rustylr_terminals[*term as usize].clone(),
                        ),
                        ::rusty_lr_core::Token::NonTerm(nonterm) => {
                            ::rusty_lr_core::Token::NonTerm(*nonterm)
                        }
                    })
                    .collect(),
            })
            .collect();
        const RUSTYLR_REDUCE_TERMINALS_CACHE: &[&[u16]] = &[
            &[
                0u16, 1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 8u16, 9u16, 10u16, 11u16, 12u16,
                13u16, 14u16, 15u16, 16u16, 17u16, 18u16,
            ],
            &[
                0u16, 25u16, 26u16, 27u16, 28u16, 29u16, 30u16, 31u16, 32u16, 33u16, 34u16, 35u16,
            ],
            &[2u16],
            &[1u16],
            &[2u16, 3u16, 16u16],
            &[
                0u16, 2u16, 3u16, 6u16, 7u16, 8u16, 11u16, 12u16, 16u16, 19u16, 23u16,
            ],
            &[0u16, 24u16],
            &[24u16],
            &[0u16, 6u16, 7u16, 8u16, 11u16, 12u16, 19u16, 20u16, 23u16],
            &[0u16, 19u16, 20u16, 23u16],
            &[0u16, 2u16, 3u16, 16u16, 19u16, 23u16],
            &[2u16, 3u16],
            &[0u16, 23u16],
            &[35u16],
        ];
        const RUSTYLR_RULESET_SHIFTED0_CACHE: &[&[u16]] = &[
            &[
                0u16, 33u16, 55u16, 56u16, 57u16, 58u16, 61u16, 62u16, 63u16, 64u16, 65u16, 66u16,
                67u16, 68u16, 69u16, 70u16, 71u16, 72u16, 73u16, 74u16, 75u16, 76u16, 77u16, 78u16,
                79u16, 80u16,
            ],
            &[
                34u16, 35u16, 36u16, 37u16, 38u16, 39u16, 40u16, 41u16, 42u16, 43u16, 44u16, 45u16,
                46u16, 47u16, 48u16, 49u16, 50u16, 51u16, 52u16, 53u16, 54u16,
            ],
            &[],
            &[
                35u16, 36u16, 37u16, 38u16, 39u16, 40u16, 41u16, 42u16, 43u16, 44u16, 45u16, 46u16,
                47u16, 48u16, 49u16, 50u16, 51u16, 52u16,
            ],
            &[1u16, 2u16],
            &[
                3u16, 4u16, 5u16, 6u16, 7u16, 8u16, 9u16, 10u16, 11u16, 14u16, 21u16, 22u16, 23u16,
                24u16, 25u16, 26u16, 27u16, 28u16,
            ],
            &[
                14u16, 21u16, 22u16, 23u16, 24u16, 25u16, 26u16, 27u16, 28u16,
            ],
            &[15u16, 16u16],
            &[12u16, 13u16, 17u16, 18u16, 19u16, 20u16],
            &[12u16, 13u16],
            &[
                14u16, 21u16, 22u16, 23u16, 24u16, 25u16, 26u16, 27u16, 28u16, 29u16, 30u16,
            ],
            &[14u16, 59u16, 60u16],
            &[
                5u16, 6u16, 7u16, 8u16, 9u16, 10u16, 11u16, 14u16, 21u16, 22u16, 23u16, 24u16,
                25u16, 26u16, 27u16, 28u16,
            ],
            &[
                10u16, 11u16, 14u16, 21u16, 22u16, 23u16, 24u16, 25u16, 26u16, 27u16, 28u16,
            ],
            &[31u16, 32u16],
            &[
                0u16, 33u16, 55u16, 56u16, 57u16, 58u16, 61u16, 62u16, 63u16, 64u16, 65u16, 66u16,
                67u16, 68u16, 69u16, 70u16, 71u16, 72u16, 73u16, 74u16, 75u16, 76u16, 78u16, 79u16,
            ],
        ];
        const RUSTYLR_SHIFT_TERM_MAP: &[&[(u16, u16)]] = &[
            &[
                (0u16, 31u16),
                (25u16, 93u16),
                (26u16, 97u16),
                (27u16, 101u16),
                (28u16, 98u16),
                (29u16, 25u16),
                (30u16, 105u16),
                (31u16, 108u16),
                (32u16, 28u16),
                (33u16, 94u16),
                (34u16, 1u16),
            ],
            &[
                (0u16, 8u16),
                (1u16, 5u16),
                (3u16, 15u16),
                (4u16, 14u16),
                (5u16, 6u16),
                (6u16, 16u16),
                (7u16, 19u16),
                (8u16, 17u16),
                (9u16, 4u16),
                (10u16, 10u16),
                (11u16, 7u16),
                (12u16, 18u16),
                (13u16, 12u16),
                (14u16, 9u16),
                (15u16, 13u16),
                (16u16, 2u16),
                (17u16, 3u16),
                (18u16, 11u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(2u16, 21u16)],
            &[],
            &[],
            &[
                (0u16, 8u16),
                (1u16, 5u16),
                (3u16, 15u16),
                (4u16, 14u16),
                (5u16, 6u16),
                (6u16, 16u16),
                (7u16, 19u16),
                (8u16, 17u16),
                (9u16, 4u16),
                (10u16, 10u16),
                (11u16, 7u16),
                (12u16, 18u16),
                (13u16, 12u16),
                (14u16, 9u16),
                (15u16, 13u16),
                (16u16, 2u16),
                (17u16, 3u16),
                (18u16, 11u16),
            ],
            &[],
            &[
                (0u16, 8u16),
                (1u16, 5u16),
                (3u16, 15u16),
                (4u16, 14u16),
                (5u16, 6u16),
                (6u16, 16u16),
                (7u16, 19u16),
                (8u16, 17u16),
                (9u16, 4u16),
                (10u16, 10u16),
                (11u16, 7u16),
                (12u16, 18u16),
                (13u16, 12u16),
                (14u16, 9u16),
                (15u16, 13u16),
                (16u16, 2u16),
                (17u16, 3u16),
                (18u16, 11u16),
            ],
            &[(2u16, 27u16)],
            &[],
            &[
                (0u16, 8u16),
                (1u16, 5u16),
                (3u16, 15u16),
                (4u16, 14u16),
                (5u16, 6u16),
                (6u16, 16u16),
                (7u16, 19u16),
                (8u16, 17u16),
                (9u16, 4u16),
                (10u16, 10u16),
                (11u16, 7u16),
                (12u16, 18u16),
                (13u16, 12u16),
                (14u16, 9u16),
                (15u16, 13u16),
                (16u16, 2u16),
                (17u16, 3u16),
                (18u16, 11u16),
            ],
            &[(2u16, 30u16)],
            &[],
            &[(15u16, 32u16)],
            &[],
            &[(1u16, 34u16)],
            &[(0u16, 35u16), (19u16, 49u16), (23u16, 38u16)],
            &[(5u16, 36u16)],
            &[(0u16, 37u16), (19u16, 49u16), (23u16, 38u16)],
            &[],
            &[(9u16, 39u16)],
            &[],
            &[(0u16, 41u16)],
            &[(10u16, 42u16)],
            &[(0u16, 43u16)],
            &[],
            &[],
            &[(0u16, 41u16)],
            &[],
            &[(24u16, 48u16)],
            &[],
            &[(0u16, 50u16), (19u16, 55u16), (23u16, 51u16)],
            &[],
            &[(9u16, 39u16)],
            &[(0u16, 41u16)],
            &[(24u16, 54u16)],
            &[],
            &[(0u16, 50u16), (19u16, 55u16), (23u16, 51u16)],
            &[
                (6u16, 58u16),
                (7u16, 64u16),
                (8u16, 59u16),
                (11u16, 57u16),
                (12u16, 60u16),
            ],
            &[],
            &[],
            &[],
            &[(0u16, 61u16), (23u16, 51u16)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (0u16, 50u16),
                (19u16, 55u16),
                (20u16, 67u16),
                (23u16, 51u16),
            ],
            &[],
            &[
                (6u16, 58u16),
                (7u16, 64u16),
                (8u16, 59u16),
                (11u16, 57u16),
                (12u16, 60u16),
            ],
            &[
                (0u16, 50u16),
                (19u16, 55u16),
                (20u16, 70u16),
                (23u16, 51u16),
            ],
            &[],
            &[
                (6u16, 73u16),
                (7u16, 79u16),
                (8u16, 74u16),
                (11u16, 72u16),
                (12u16, 75u16),
            ],
            &[],
            &[],
            &[],
            &[(0u16, 76u16), (23u16, 38u16)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (6u16, 73u16),
                (7u16, 79u16),
                (8u16, 74u16),
                (11u16, 72u16),
                (12u16, 75u16),
            ],
            &[],
            &[(2u16, 92u16), (3u16, 84u16)],
            &[(0u16, 35u16), (19u16, 49u16), (23u16, 38u16)],
            &[],
            &[],
            &[(0u16, 35u16), (19u16, 49u16), (23u16, 38u16)],
            &[],
            &[(16u16, 90u16)],
            &[],
            &[],
            &[],
            &[],
            &[
                (0u16, 8u16),
                (1u16, 5u16),
                (3u16, 15u16),
                (4u16, 14u16),
                (5u16, 6u16),
                (6u16, 16u16),
                (7u16, 19u16),
                (8u16, 17u16),
                (9u16, 4u16),
                (10u16, 10u16),
                (11u16, 7u16),
                (12u16, 18u16),
                (13u16, 12u16),
                (14u16, 9u16),
                (15u16, 13u16),
                (16u16, 2u16),
                (17u16, 3u16),
                (18u16, 11u16),
            ],
            &[(2u16, 96u16)],
            &[],
            &[],
            &[(0u16, 99u16)],
            &[(2u16, 100u16)],
            &[],
            &[(0u16, 102u16)],
            &[
                (0u16, 8u16),
                (1u16, 5u16),
                (3u16, 15u16),
                (4u16, 14u16),
                (5u16, 6u16),
                (6u16, 16u16),
                (7u16, 19u16),
                (8u16, 17u16),
                (9u16, 4u16),
                (10u16, 10u16),
                (11u16, 7u16),
                (12u16, 18u16),
                (13u16, 12u16),
                (14u16, 9u16),
                (15u16, 13u16),
                (16u16, 2u16),
                (17u16, 3u16),
                (18u16, 11u16),
            ],
            &[(2u16, 104u16)],
            &[],
            &[
                (0u16, 8u16),
                (1u16, 5u16),
                (3u16, 15u16),
                (4u16, 14u16),
                (5u16, 6u16),
                (6u16, 16u16),
                (7u16, 19u16),
                (8u16, 17u16),
                (9u16, 4u16),
                (10u16, 10u16),
                (11u16, 7u16),
                (12u16, 18u16),
                (13u16, 12u16),
                (14u16, 9u16),
                (15u16, 13u16),
                (16u16, 2u16),
                (17u16, 3u16),
                (18u16, 11u16),
            ],
            &[(2u16, 107u16)],
            &[],
            &[
                (0u16, 8u16),
                (1u16, 5u16),
                (3u16, 15u16),
                (4u16, 14u16),
                (5u16, 6u16),
                (6u16, 16u16),
                (7u16, 19u16),
                (8u16, 17u16),
                (9u16, 4u16),
                (10u16, 10u16),
                (11u16, 7u16),
                (12u16, 18u16),
                (13u16, 12u16),
                (14u16, 9u16),
                (15u16, 13u16),
                (16u16, 2u16),
                (17u16, 3u16),
                (18u16, 11u16),
            ],
            &[(2u16, 110u16)],
            &[],
            &[],
            &[],
            &[],
            &[(35u16, 115u16)],
            &[],
            &[
                (0u16, 31u16),
                (25u16, 93u16),
                (26u16, 97u16),
                (27u16, 101u16),
                (28u16, 98u16),
                (29u16, 25u16),
                (30u16, 105u16),
                (31u16, 108u16),
                (32u16, 28u16),
                (33u16, 94u16),
                (34u16, 1u16),
            ],
            &[],
            &[],
            &[(0u16, 120u16), (23u16, 121u16)],
            &[],
            &[(9u16, 39u16)],
            &[(0u16, 41u16)],
            &[(24u16, 124u16)],
            &[],
            &[],
            &[(2u16, 127u16)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
        ];
        const RUSTYLR_SHIFT_NONTERM_MAP: &[&[(GrammarNonTerminals, u16)]] = &[
            &[
                (GrammarNonTerminals::DeriveDef, 111u16),
                (GrammarNonTerminals::EofDef, 112u16),
                (GrammarNonTerminals::ErrorDef, 113u16),
                (GrammarNonTerminals::Grammar, 114u16),
                (GrammarNonTerminals::GrammarLine, 116u16),
                (GrammarNonTerminals::ModulePrefixDef, 117u16),
                (GrammarNonTerminals::ReduceDef, 118u16),
                (GrammarNonTerminals::ReduceType, 119u16),
                (GrammarNonTerminals::Rule, 128u16),
                (GrammarNonTerminals::StartDef, 129u16),
                (GrammarNonTerminals::TokenDef, 130u16),
                (GrammarNonTerminals::TokenTypeDef, 131u16),
                (GrammarNonTerminals::UserDataDef, 132u16),
                (GrammarNonTerminals::_GrammarLine_Plus8, 134u16),
            ],
            &[
                (GrammarNonTerminals::RustCode, 20u16),
                (GrammarNonTerminals::_TerminalSet6, 22u16),
                (GrammarNonTerminals::__TerminalSet6_Plus7, 23u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(GrammarNonTerminals::_TerminalSet6, 24u16)],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 26u16),
                (GrammarNonTerminals::_TerminalSet6, 22u16),
                (GrammarNonTerminals::__TerminalSet6_Plus7, 23u16),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 29u16),
                (GrammarNonTerminals::_TerminalSet6, 22u16),
                (GrammarNonTerminals::__TerminalSet6_Plus7, 23u16),
            ],
            &[],
            &[],
            &[(GrammarNonTerminals::RuleType, 33u16)],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 81u16),
                (GrammarNonTerminals::RuleLine, 82u16),
                (GrammarNonTerminals::RuleLines, 83u16),
                (GrammarNonTerminals::TerminalSet, 80u16),
                (GrammarNonTerminals::TokenMapped, 86u16),
                (GrammarNonTerminals::_TokenMapped_Plus0, 87u16),
                (GrammarNonTerminals::_TokenMapped_Star1, 89u16),
            ],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 71u16),
                (GrammarNonTerminals::TerminalSet, 80u16),
            ],
            &[],
            &[(GrammarNonTerminals::_caret_Option2, 40u16)],
            &[],
            &[
                (GrammarNonTerminals::TerminalSetItem, 44u16),
                (GrammarNonTerminals::_TerminalSetItem_Plus3, 45u16),
                (GrammarNonTerminals::_TerminalSetItem_Star4, 47u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[(GrammarNonTerminals::TerminalSetItem, 46u16)],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 56u16),
                (GrammarNonTerminals::TerminalSet, 65u16),
                (GrammarNonTerminals::_Pattern_Plus5, 69u16),
            ],
            &[],
            &[(GrammarNonTerminals::_caret_Option2, 52u16)],
            &[
                (GrammarNonTerminals::TerminalSetItem, 44u16),
                (GrammarNonTerminals::_TerminalSetItem_Plus3, 45u16),
                (GrammarNonTerminals::_TerminalSetItem_Star4, 53u16),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 56u16),
                (GrammarNonTerminals::TerminalSet, 65u16),
                (GrammarNonTerminals::_Pattern_Plus5, 66u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::TerminalSet, 62u16),
                (GrammarNonTerminals::TerminalSetOrIdent, 63u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 68u16),
                (GrammarNonTerminals::TerminalSet, 65u16),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 68u16),
                (GrammarNonTerminals::TerminalSet, 65u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::TerminalSet, 77u16),
                (GrammarNonTerminals::TerminalSetOrIdent, 78u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 81u16),
                (GrammarNonTerminals::RuleLine, 85u16),
                (GrammarNonTerminals::TerminalSet, 80u16),
                (GrammarNonTerminals::TokenMapped, 86u16),
                (GrammarNonTerminals::_TokenMapped_Plus0, 87u16),
                (GrammarNonTerminals::_TokenMapped_Star1, 89u16),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 81u16),
                (GrammarNonTerminals::TerminalSet, 80u16),
                (GrammarNonTerminals::TokenMapped, 88u16),
            ],
            &[],
            &[(GrammarNonTerminals::Action, 91u16)],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 95u16),
                (GrammarNonTerminals::_TerminalSet6, 22u16),
                (GrammarNonTerminals::__TerminalSet6_Plus7, 23u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 103u16),
                (GrammarNonTerminals::_TerminalSet6, 22u16),
                (GrammarNonTerminals::__TerminalSet6_Plus7, 23u16),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 106u16),
                (GrammarNonTerminals::_TerminalSet6, 22u16),
                (GrammarNonTerminals::__TerminalSet6_Plus7, 23u16),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 109u16),
                (GrammarNonTerminals::_TerminalSet6, 22u16),
                (GrammarNonTerminals::__TerminalSet6_Plus7, 23u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::DeriveDef, 111u16),
                (GrammarNonTerminals::EofDef, 112u16),
                (GrammarNonTerminals::ErrorDef, 113u16),
                (GrammarNonTerminals::GrammarLine, 116u16),
                (GrammarNonTerminals::ModulePrefixDef, 117u16),
                (GrammarNonTerminals::ReduceDef, 118u16),
                (GrammarNonTerminals::ReduceType, 119u16),
                (GrammarNonTerminals::Rule, 128u16),
                (GrammarNonTerminals::StartDef, 129u16),
                (GrammarNonTerminals::TokenDef, 130u16),
                (GrammarNonTerminals::TokenTypeDef, 131u16),
                (GrammarNonTerminals::UserDataDef, 132u16),
                (GrammarNonTerminals::_GrammarLine_Plus8, 133u16),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::TerminalSet, 125u16),
                (GrammarNonTerminals::TerminalSetOrIdent, 126u16),
            ],
            &[],
            &[(GrammarNonTerminals::_caret_Option2, 122u16)],
            &[
                (GrammarNonTerminals::TerminalSetItem, 44u16),
                (GrammarNonTerminals::_TerminalSetItem_Plus3, 45u16),
                (GrammarNonTerminals::_TerminalSetItem_Star4, 123u16),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
        ];
        const RUSTYLR_REDUCE_MAP: &[&[(u16, u16)]] = &[
            &[],
            &[],
            &[(0u16, 35u16)],
            &[(0u16, 36u16)],
            &[(0u16, 37u16)],
            &[(0u16, 38u16)],
            &[(0u16, 39u16)],
            &[(0u16, 40u16)],
            &[(0u16, 41u16)],
            &[(0u16, 42u16)],
            &[(0u16, 43u16)],
            &[(0u16, 44u16)],
            &[(0u16, 45u16)],
            &[(0u16, 46u16)],
            &[(0u16, 47u16)],
            &[(0u16, 48u16)],
            &[(0u16, 49u16)],
            &[(0u16, 50u16)],
            &[(0u16, 51u16)],
            &[(0u16, 52u16)],
            &[],
            &[(1u16, 66u16)],
            &[(0u16, 53u16)],
            &[(2u16, 34u16)],
            &[(0u16, 54u16)],
            &[],
            &[],
            &[(1u16, 56u16)],
            &[],
            &[],
            &[(1u16, 64u16)],
            &[(3u16, 2u16)],
            &[(3u16, 1u16)],
            &[],
            &[(4u16, 9u16)],
            &[(5u16, 21u16)],
            &[],
            &[(5u16, 21u16)],
            &[(6u16, 16u16)],
            &[(6u16, 15u16)],
            &[(7u16, 20u16)],
            &[(6u16, 12u16)],
            &[],
            &[(6u16, 13u16)],
            &[(6u16, 17u16)],
            &[(7u16, 19u16)],
            &[(6u16, 18u16)],
            &[],
            &[(5u16, 14u16)],
            &[],
            &[(8u16, 21u16)],
            &[(6u16, 16u16)],
            &[(7u16, 20u16)],
            &[],
            &[(8u16, 14u16)],
            &[],
            &[(9u16, 29u16)],
            &[(8u16, 25u16)],
            &[(8u16, 22u16)],
            &[(8u16, 24u16)],
            &[],
            &[(8u16, 60u16)],
            &[(8u16, 59u16)],
            &[(8u16, 27u16)],
            &[(8u16, 23u16)],
            &[(8u16, 26u16)],
            &[],
            &[(8u16, 28u16)],
            &[(9u16, 30u16)],
            &[],
            &[(5u16, 28u16)],
            &[(10u16, 11u16)],
            &[(5u16, 25u16)],
            &[(5u16, 22u16)],
            &[(5u16, 24u16)],
            &[],
            &[(5u16, 60u16)],
            &[(5u16, 59u16)],
            &[(5u16, 27u16)],
            &[(5u16, 23u16)],
            &[(5u16, 26u16)],
            &[(10u16, 10u16)],
            &[(11u16, 4u16)],
            &[],
            &[(4u16, 9u16)],
            &[(11u16, 3u16)],
            &[(10u16, 6u16)],
            &[(4u16, 8u16)],
            &[(10u16, 7u16)],
            &[(11u16, 32u16)],
            &[(11u16, 31u16)],
            &[(11u16, 5u16)],
            &[(1u16, 0u16)],
            &[(12u16, 61u16)],
            &[],
            &[],
            &[(1u16, 65u16)],
            &[(12u16, 62u16)],
            &[],
            &[],
            &[(1u16, 55u16)],
            &[],
            &[],
            &[],
            &[(1u16, 33u16)],
            &[],
            &[],
            &[(1u16, 57u16)],
            &[],
            &[],
            &[(1u16, 58u16)],
            &[(1u16, 76u16)],
            &[(1u16, 70u16)],
            &[(1u16, 74u16)],
            &[],
            &[],
            &[(13u16, 78u16)],
            &[(1u16, 75u16)],
            &[(1u16, 73u16)],
            &[],
            &[(2u16, 60u16)],
            &[(6u16, 16u16)],
            &[(7u16, 20u16)],
            &[],
            &[(2u16, 14u16)],
            &[(2u16, 59u16)],
            &[],
            &[(1u16, 63u16)],
            &[(1u16, 67u16)],
            &[(1u16, 69u16)],
            &[(1u16, 68u16)],
            &[(1u16, 71u16)],
            &[(1u16, 72u16)],
            &[(13u16, 79u16)],
            &[(13u16, 77u16)],
        ];
        const RUSTYLR_RULESET_MAP: &[&[(u16, u16)]] = &[
            &[],
            &[(66u16, 1u16)],
            &[(35u16, 1u16)],
            &[(36u16, 1u16)],
            &[(37u16, 1u16)],
            &[(38u16, 1u16)],
            &[(39u16, 1u16)],
            &[(40u16, 1u16)],
            &[(41u16, 1u16)],
            &[(42u16, 1u16)],
            &[(43u16, 1u16)],
            &[(44u16, 1u16)],
            &[(45u16, 1u16)],
            &[(46u16, 1u16)],
            &[(47u16, 1u16)],
            &[(48u16, 1u16)],
            &[(49u16, 1u16)],
            &[(50u16, 1u16)],
            &[(51u16, 1u16)],
            &[(52u16, 1u16)],
            &[(66u16, 2u16)],
            &[(66u16, 3u16)],
            &[(53u16, 1u16)],
            &[(34u16, 1u16), (54u16, 1u16)],
            &[(54u16, 2u16)],
            &[(56u16, 1u16)],
            &[(56u16, 2u16)],
            &[(56u16, 3u16)],
            &[(64u16, 1u16)],
            &[(64u16, 2u16)],
            &[(64u16, 3u16)],
            &[(0u16, 1u16)],
            &[(1u16, 1u16)],
            &[(0u16, 2u16)],
            &[(0u16, 3u16)],
            &[(11u16, 1u16), (21u16, 1u16)],
            &[(11u16, 2u16)],
            &[(21u16, 1u16)],
            &[(14u16, 1u16)],
            &[(15u16, 1u16)],
            &[(14u16, 2u16)],
            &[(12u16, 1u16), (13u16, 1u16)],
            &[(13u16, 2u16)],
            &[(13u16, 3u16)],
            &[(17u16, 1u16)],
            &[(18u16, 1u16), (19u16, 1u16)],
            &[(18u16, 2u16)],
            &[(14u16, 3u16)],
            &[(14u16, 4u16)],
            &[(28u16, 1u16)],
            &[(21u16, 1u16)],
            &[(14u16, 1u16)],
            &[(14u16, 2u16)],
            &[(14u16, 3u16)],
            &[(14u16, 4u16)],
            &[(28u16, 1u16)],
            &[
                (22u16, 1u16),
                (23u16, 1u16),
                (24u16, 1u16),
                (25u16, 1u16),
                (27u16, 1u16),
                (29u16, 1u16),
            ],
            &[(25u16, 2u16)],
            &[(22u16, 2u16)],
            &[(24u16, 2u16)],
            &[(27u16, 2u16)],
            &[(60u16, 1u16)],
            &[(59u16, 1u16)],
            &[(27u16, 3u16)],
            &[(23u16, 2u16)],
            &[(26u16, 1u16)],
            &[(28u16, 2u16), (30u16, 1u16)],
            &[(28u16, 3u16)],
            &[
                (22u16, 1u16),
                (23u16, 1u16),
                (24u16, 1u16),
                (25u16, 1u16),
                (27u16, 1u16),
                (30u16, 2u16),
            ],
            &[(28u16, 2u16), (30u16, 1u16)],
            &[(28u16, 3u16)],
            &[
                (11u16, 3u16),
                (22u16, 1u16),
                (23u16, 1u16),
                (24u16, 1u16),
                (25u16, 1u16),
                (27u16, 1u16),
            ],
            &[(25u16, 2u16)],
            &[(22u16, 2u16)],
            &[(24u16, 2u16)],
            &[(27u16, 2u16)],
            &[(60u16, 1u16)],
            &[(59u16, 1u16)],
            &[(27u16, 3u16)],
            &[(23u16, 2u16)],
            &[(26u16, 1u16)],
            &[
                (10u16, 1u16),
                (22u16, 1u16),
                (23u16, 1u16),
                (24u16, 1u16),
                (25u16, 1u16),
                (27u16, 1u16),
            ],
            &[(4u16, 1u16)],
            &[(0u16, 4u16), (3u16, 1u16)],
            &[(3u16, 2u16)],
            &[(3u16, 3u16)],
            &[(6u16, 1u16)],
            &[(7u16, 1u16), (8u16, 1u16)],
            &[(7u16, 2u16)],
            &[(5u16, 1u16)],
            &[(31u16, 1u16)],
            &[(5u16, 2u16)],
            &[(0u16, 5u16)],
            &[(61u16, 1u16)],
            &[(65u16, 1u16)],
            &[(65u16, 2u16)],
            &[(65u16, 3u16)],
            &[(62u16, 1u16)],
            &[(55u16, 1u16)],
            &[(55u16, 2u16)],
            &[(55u16, 3u16)],
            &[(33u16, 1u16)],
            &[(33u16, 2u16)],
            &[(33u16, 3u16)],
            &[(33u16, 4u16)],
            &[(57u16, 1u16)],
            &[(57u16, 2u16)],
            &[(57u16, 3u16)],
            &[(58u16, 1u16)],
            &[(58u16, 2u16)],
            &[(58u16, 3u16)],
            &[(76u16, 1u16)],
            &[(70u16, 1u16)],
            &[(74u16, 1u16)],
            &[(80u16, 1u16)],
            &[(80u16, 2u16)],
            &[(78u16, 1u16), (79u16, 1u16)],
            &[(75u16, 1u16)],
            &[(73u16, 1u16)],
            &[(63u16, 1u16)],
            &[(60u16, 1u16)],
            &[(14u16, 1u16)],
            &[(14u16, 2u16)],
            &[(14u16, 3u16)],
            &[(14u16, 4u16)],
            &[(59u16, 1u16)],
            &[(63u16, 2u16)],
            &[(63u16, 3u16)],
            &[(67u16, 1u16)],
            &[(69u16, 1u16)],
            &[(68u16, 1u16)],
            &[(71u16, 1u16)],
            &[(72u16, 1u16)],
            &[(79u16, 2u16)],
            &[(77u16, 1u16)],
        ];
        const RUSTYLR_RULESET_SHIFTED0_MAP: &[u16] = &[
            0u16, 1u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16,
            2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 3u16, 2u16, 1u16, 2u16, 2u16,
            1u16, 2u16, 2u16, 4u16, 2u16, 2u16, 5u16, 2u16, 6u16, 2u16, 7u16, 2u16, 8u16, 2u16,
            2u16, 2u16, 2u16, 9u16, 2u16, 2u16, 2u16, 10u16, 2u16, 7u16, 8u16, 2u16, 2u16, 10u16,
            2u16, 2u16, 2u16, 2u16, 11u16, 2u16, 2u16, 2u16, 2u16, 2u16, 6u16, 2u16, 2u16, 6u16,
            2u16, 2u16, 2u16, 2u16, 2u16, 11u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16,
            12u16, 2u16, 2u16, 13u16, 2u16, 14u16, 2u16, 2u16, 2u16, 2u16, 1u16, 2u16, 2u16, 2u16,
            2u16, 2u16, 2u16, 2u16, 1u16, 2u16, 2u16, 1u16, 2u16, 2u16, 1u16, 2u16, 2u16, 2u16,
            2u16, 2u16, 2u16, 2u16, 15u16, 2u16, 2u16, 11u16, 2u16, 7u16, 8u16, 2u16, 2u16, 2u16,
            2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16, 2u16,
        ];
        let states: Vec<GrammarState> = RUSTYLR_SHIFT_TERM_MAP
            .iter()
            .zip(
                RUSTYLR_SHIFT_NONTERM_MAP.iter().zip(
                    RUSTYLR_REDUCE_MAP.iter().zip(
                        RUSTYLR_RULESET_MAP
                            .iter()
                            .zip(RUSTYLR_RULESET_SHIFTED0_MAP.iter()),
                    ),
                ),
            )
            .map(
                |(
                    shift_goto_map_term,
                    (shift_goto_map_nonterm, (reduce_map_, (ruleset, ruleset0_id))),
                )| {
                    let mut reduce_map = ::rusty_lr_core::HashMap::default();
                    for (terminal_set_id, ruleid) in reduce_map_.iter() {
                        reduce_map.extend(
                            RUSTYLR_REDUCE_TERMINALS_CACHE[*terminal_set_id as usize]
                                .iter()
                                .map(|term_idx| {
                                    (
                                        __rustylr_terminals[*term_idx as usize].clone(),
                                        *ruleid as usize,
                                    )
                                }),
                        );
                    }
                    let mut ruleset: std::collections::BTreeSet<::rusty_lr_core::ShiftedRuleRef> =
                        ruleset
                            .iter()
                            .map(|(ruleid, shifted)| ::rusty_lr_core::ShiftedRuleRef {
                                rule: *ruleid as usize,
                                shifted: *shifted as usize,
                            })
                            .collect();
                    ruleset.extend(
                        RUSTYLR_RULESET_SHIFTED0_CACHE[*ruleset0_id as usize]
                            .iter()
                            .map(|ruleid| ::rusty_lr_core::ShiftedRuleRef {
                                rule: *ruleid as usize,
                                shifted: 0,
                            }),
                    );
                    GrammarState {
                        shift_goto_map_term: shift_goto_map_term
                            .iter()
                            .map(|(term_idx, goto)| {
                                (
                                    __rustylr_terminals[*term_idx as usize].clone(),
                                    *goto as usize,
                                )
                            })
                            .collect(),
                        shift_goto_map_nonterm: shift_goto_map_nonterm
                            .iter()
                            .map(|(nonterm, goto)| (*nonterm, *goto as usize))
                            .collect(),
                        reduce_map,
                        ruleset,
                    }
                },
            )
            .collect();
        Self { rules, states }
    }
}
impl ::rusty_lr_core::GetParser<Lexed, GrammarNonTerminals> for GrammarParser {
    fn get_rules(&self) -> &[GrammarRule] {
        &self.rules
    }
    fn get_states(&self) -> &[GrammarState] {
        &self.states
    }
}
// ==============================Generated Codes End===============================
