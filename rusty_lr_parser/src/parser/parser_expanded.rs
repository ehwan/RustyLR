// This file was generated by rustylr 1.9.0
// This generated code is targeting rusty_lr version 3.17.0.
// There might be a build error if the version is not matched.
//
// Input file: ../rusty_lr_parser/src/parser/parser.rs
// Output file: out.tab.rs
// ================================User Codes Begin================================
use crate::parser::args::GrammarArgs;
use crate::parser::args::IdentOrLiteral;
use crate::parser::args::PatternArgs;
use crate::parser::args::PrecDPrecArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::lexer::Lexed;
use crate::terminalset::TerminalSet;
use crate::terminalset::TerminalSetItem;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use rusty_lr_core::ReduceType;
use std::boxed::Box;
// =================================User Codes End=================================
/*
====================================Grammar=====================================

# of terminal classes: 40
# of states: 172

Rule -> ident RuleType colon RuleLines semicolon
RuleType -> parengroup
RuleType ->
RuleLines -> RuleLines pipe RuleLine
RuleLines -> RuleLine
RuleLine -> TokenMapped* PrecDef* Action
PrecDef -> prec IdentOrLiteral
PrecDef -> dprec literal
TokenMapped -> Pattern
TokenMapped -> ident equal Pattern
TerminalSetItem -> ident
TerminalSetItem -> ident minus ident
TerminalSetItem -> literal
TerminalSetItem -> literal minus literal
TerminalSet -> lbracket caret? TerminalSetItem* rbracket
TerminalSet -> dot
Pattern -> ident
Pattern -> Pattern plus
Pattern -> Pattern star
Pattern -> Pattern question
Pattern -> Pattern exclamation
Pattern -> TerminalSet
Pattern -> Pattern slash Pattern
Pattern -> lparen Pattern+ rparen
Pattern -> literal
Pattern -> Pattern minus Pattern
Action -> bracegroup
Action ->
TokenDef -> token ident RustCode semicolon
RustCode -> [^semicolon]+
StartDef -> start ident semicolon
EofDef -> eofdef RustCode semicolon
TokenTypeDef -> tokentype RustCode semicolon
UserDataDef -> userdata RustCode semicolon
IdentOrLiteral -> ident
IdentOrLiteral -> literal
ReduceType -> left
ReduceType -> right
ReduceDef -> ReduceType IdentOrLiteral+ semicolon
ErrorDef -> errortype RustCode semicolon
ModulePrefixDef -> moduleprefix RustCode semicolon
Glr -> glr semicolon
Lalr -> lalr semicolon
Precedence -> precedence IdentOrLiteral+ semicolon
NoOptim -> nooptim semicolon
Dense -> dense semicolon
Trace -> trace ident* semicolon
Filter -> filter RustCode semicolon
GrammarLine -> Rule
GrammarLine -> TokenDef
GrammarLine -> StartDef
GrammarLine -> EofDef
GrammarLine -> TokenTypeDef
GrammarLine -> UserDataDef
GrammarLine -> ReduceDef
GrammarLine -> ErrorDef
GrammarLine -> ModulePrefixDef
GrammarLine -> Lalr
GrammarLine -> Glr
GrammarLine -> Precedence
GrammarLine -> NoOptim
GrammarLine -> Dense
GrammarLine -> Trace
GrammarLine -> Filter
Grammar -> GrammarLine+
TokenMapped+ -> TokenMapped
TokenMapped+ -> TokenMapped+ TokenMapped
TokenMapped* -> TokenMapped+
TokenMapped* ->
PrecDef+ -> PrecDef
PrecDef+ -> PrecDef+ PrecDef
PrecDef* -> PrecDef+
PrecDef* ->
caret? -> caret
caret? ->
TerminalSetItem+ -> TerminalSetItem
TerminalSetItem+ -> TerminalSetItem+ TerminalSetItem
TerminalSetItem* -> TerminalSetItem+
TerminalSetItem* ->
Pattern+ -> Pattern
Pattern+ -> Pattern+ Pattern
[^semicolon] -> ident
[^semicolon] -> colon
[^semicolon] -> pipe
[^semicolon] -> [percent, <Others>] (2 terms)
[^semicolon] -> equal
[^semicolon] -> plus
[^semicolon] -> star
[^semicolon] -> question
[^semicolon] -> caret
[^semicolon] -> minus
[^semicolon] -> exclamation
[^semicolon] -> slash
[^semicolon] -> dot
[^semicolon] -> literal
[^semicolon] -> parengroup
[^semicolon] -> bracegroup
[^semicolon] -> lparen
[^semicolon] -> rparen
[^semicolon] -> lbracket
[^semicolon] -> rbracket
[^semicolon] -> left
[^semicolon] -> right
[^semicolon] -> token
[^semicolon] -> start
[^semicolon] -> eofdef
[^semicolon] -> tokentype
[^semicolon] -> userdata
[^semicolon] -> errortype
[^semicolon] -> moduleprefix
[^semicolon] -> lalr
[^semicolon] -> glr
[^semicolon] -> prec
[^semicolon] -> precedence
[^semicolon] -> nooptim
[^semicolon] -> dense
[^semicolon] -> trace
[^semicolon] -> dprec
[^semicolon] -> filter
[^semicolon]+ -> [^semicolon]
[^semicolon]+ -> [^semicolon]+ [^semicolon]
IdentOrLiteral+ -> IdentOrLiteral
IdentOrLiteral+ -> IdentOrLiteral+ IdentOrLiteral
ident+ -> ident
ident+ -> ident+ ident
ident* -> ident+
ident* ->
GrammarLine+ -> GrammarLine
GrammarLine+ -> GrammarLine GrammarLine+
Augmented -> Grammar eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for `Context`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarContext = ::rusty_lr_core::lr::Context<GrammarTokenData>;
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarRule = ::rusty_lr_core::ProductionRule<&'static str, GrammarNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarState = ::rusty_lr_core::lr::SparseState<GrammarNonTerminals>;
#[doc = r" type alias for `ParseError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarParseError = ::rusty_lr_core::lr::ParseError<
    Lexed,
    GrammarNonTerminals,
    ::rusty_lr_core::DefaultReduceActionError,
>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarInvalidTerminalError =
    ::rusty_lr_core::lr::InvalidTerminalError<Lexed, GrammarNonTerminals>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum GrammarNonTerminals {
    Rule,
    RuleType,
    RuleLines,
    RuleLine,
    PrecDef,
    TokenMapped,
    TerminalSetItem,
    TerminalSet,
    Pattern,
    Action,
    TokenDef,
    RustCode,
    StartDef,
    EofDef,
    TokenTypeDef,
    UserDataDef,
    IdentOrLiteral,
    ReduceType,
    ReduceDef,
    ErrorDef,
    ModulePrefixDef,
    Glr,
    Lalr,
    Precedence,
    NoOptim,
    Dense,
    Trace,
    Filter,
    GrammarLine,
    Grammar,
    error,
    _TokenMappedPlus31,
    _TokenMappedStar32,
    _PrecDefPlus33,
    _PrecDefStar34,
    _caretQuestion35,
    _TerminalSetItemPlus36,
    _TerminalSetItemStar37,
    _PatternPlus38,
    _TermSet39,
    __TermSet39Plus40,
    _IdentOrLiteralPlus41,
    _identPlus42,
    _identStar43,
    _GrammarLinePlus44,
    Augmented,
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use rusty_lr_core::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl std::fmt::Debug for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use rusty_lr_core::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl ::rusty_lr_core::NonTerminal for GrammarNonTerminals {
    fn as_str(&self) -> &'static str {
        match self {
            GrammarNonTerminals::Rule => "Rule",
            GrammarNonTerminals::RuleType => "RuleType",
            GrammarNonTerminals::RuleLines => "RuleLines",
            GrammarNonTerminals::RuleLine => "RuleLine",
            GrammarNonTerminals::PrecDef => "PrecDef",
            GrammarNonTerminals::TokenMapped => "TokenMapped",
            GrammarNonTerminals::TerminalSetItem => "TerminalSetItem",
            GrammarNonTerminals::TerminalSet => "TerminalSet",
            GrammarNonTerminals::Pattern => "Pattern",
            GrammarNonTerminals::Action => "Action",
            GrammarNonTerminals::TokenDef => "TokenDef",
            GrammarNonTerminals::RustCode => "RustCode",
            GrammarNonTerminals::StartDef => "StartDef",
            GrammarNonTerminals::EofDef => "EofDef",
            GrammarNonTerminals::TokenTypeDef => "TokenTypeDef",
            GrammarNonTerminals::UserDataDef => "UserDataDef",
            GrammarNonTerminals::IdentOrLiteral => "IdentOrLiteral",
            GrammarNonTerminals::ReduceType => "ReduceType",
            GrammarNonTerminals::ReduceDef => "ReduceDef",
            GrammarNonTerminals::ErrorDef => "ErrorDef",
            GrammarNonTerminals::ModulePrefixDef => "ModulePrefixDef",
            GrammarNonTerminals::Glr => "Glr",
            GrammarNonTerminals::Lalr => "Lalr",
            GrammarNonTerminals::Precedence => "Precedence",
            GrammarNonTerminals::NoOptim => "NoOptim",
            GrammarNonTerminals::Dense => "Dense",
            GrammarNonTerminals::Trace => "Trace",
            GrammarNonTerminals::Filter => "Filter",
            GrammarNonTerminals::GrammarLine => "GrammarLine",
            GrammarNonTerminals::Grammar => "Grammar",
            GrammarNonTerminals::error => "'error'",
            GrammarNonTerminals::_TokenMappedPlus31 => "TokenMapped+",
            GrammarNonTerminals::_TokenMappedStar32 => "TokenMapped*",
            GrammarNonTerminals::_PrecDefPlus33 => "PrecDef+",
            GrammarNonTerminals::_PrecDefStar34 => "PrecDef*",
            GrammarNonTerminals::_caretQuestion35 => "caret?",
            GrammarNonTerminals::_TerminalSetItemPlus36 => "TerminalSetItem+",
            GrammarNonTerminals::_TerminalSetItemStar37 => "TerminalSetItem*",
            GrammarNonTerminals::_PatternPlus38 => "Pattern+",
            GrammarNonTerminals::_TermSet39 => "[^semicolon]",
            GrammarNonTerminals::__TermSet39Plus40 => "[^semicolon]+",
            GrammarNonTerminals::_IdentOrLiteralPlus41 => "IdentOrLiteral+",
            GrammarNonTerminals::_identPlus42 => "ident+",
            GrammarNonTerminals::_identStar43 => "ident*",
            GrammarNonTerminals::_GrammarLinePlus44 => "GrammarLine+",
            GrammarNonTerminals::Augmented => "Augmented",
        }
    }
    fn is_trace(&self) -> bool {
        match self {
            GrammarNonTerminals::Rule => false,
            GrammarNonTerminals::RuleType => false,
            GrammarNonTerminals::RuleLines => false,
            GrammarNonTerminals::RuleLine => false,
            GrammarNonTerminals::PrecDef => false,
            GrammarNonTerminals::TokenMapped => false,
            GrammarNonTerminals::TerminalSetItem => false,
            GrammarNonTerminals::TerminalSet => false,
            GrammarNonTerminals::Pattern => false,
            GrammarNonTerminals::Action => false,
            GrammarNonTerminals::TokenDef => false,
            GrammarNonTerminals::RustCode => false,
            GrammarNonTerminals::StartDef => false,
            GrammarNonTerminals::EofDef => false,
            GrammarNonTerminals::TokenTypeDef => false,
            GrammarNonTerminals::UserDataDef => false,
            GrammarNonTerminals::IdentOrLiteral => false,
            GrammarNonTerminals::ReduceType => false,
            GrammarNonTerminals::ReduceDef => false,
            GrammarNonTerminals::ErrorDef => false,
            GrammarNonTerminals::ModulePrefixDef => false,
            GrammarNonTerminals::Glr => false,
            GrammarNonTerminals::Lalr => false,
            GrammarNonTerminals::Precedence => false,
            GrammarNonTerminals::NoOptim => false,
            GrammarNonTerminals::Dense => false,
            GrammarNonTerminals::Trace => false,
            GrammarNonTerminals::Filter => false,
            GrammarNonTerminals::GrammarLine => false,
            GrammarNonTerminals::Grammar => false,
            GrammarNonTerminals::error => false,
            GrammarNonTerminals::_TokenMappedPlus31 => false,
            GrammarNonTerminals::_TokenMappedStar32 => false,
            GrammarNonTerminals::_PrecDefPlus33 => false,
            GrammarNonTerminals::_PrecDefStar34 => false,
            GrammarNonTerminals::_caretQuestion35 => false,
            GrammarNonTerminals::_TerminalSetItemPlus36 => false,
            GrammarNonTerminals::_TerminalSetItemStar37 => false,
            GrammarNonTerminals::_PatternPlus38 => false,
            GrammarNonTerminals::_TermSet39 => false,
            GrammarNonTerminals::__TermSet39Plus40 => false,
            GrammarNonTerminals::_IdentOrLiteralPlus41 => false,
            GrammarNonTerminals::_identPlus42 => false,
            GrammarNonTerminals::_identStar43 => false,
            GrammarNonTerminals::_GrammarLinePlus44 => false,
            GrammarNonTerminals::Augmented => false,
        }
    }
    fn nonterm_type(&self) -> Option<::rusty_lr_core::NonTerminalType> {
        match self {
            GrammarNonTerminals::Rule => None,
            GrammarNonTerminals::RuleType => None,
            GrammarNonTerminals::RuleLines => None,
            GrammarNonTerminals::RuleLine => None,
            GrammarNonTerminals::PrecDef => None,
            GrammarNonTerminals::TokenMapped => None,
            GrammarNonTerminals::TerminalSetItem => None,
            GrammarNonTerminals::TerminalSet => None,
            GrammarNonTerminals::Pattern => None,
            GrammarNonTerminals::Action => None,
            GrammarNonTerminals::TokenDef => None,
            GrammarNonTerminals::RustCode => None,
            GrammarNonTerminals::StartDef => None,
            GrammarNonTerminals::EofDef => None,
            GrammarNonTerminals::TokenTypeDef => None,
            GrammarNonTerminals::UserDataDef => None,
            GrammarNonTerminals::IdentOrLiteral => None,
            GrammarNonTerminals::ReduceType => None,
            GrammarNonTerminals::ReduceDef => None,
            GrammarNonTerminals::ErrorDef => None,
            GrammarNonTerminals::ModulePrefixDef => None,
            GrammarNonTerminals::Glr => None,
            GrammarNonTerminals::Lalr => None,
            GrammarNonTerminals::Precedence => None,
            GrammarNonTerminals::NoOptim => None,
            GrammarNonTerminals::Dense => None,
            GrammarNonTerminals::Trace => None,
            GrammarNonTerminals::Filter => None,
            GrammarNonTerminals::GrammarLine => None,
            GrammarNonTerminals::Grammar => None,
            GrammarNonTerminals::error => Some(::rusty_lr_core::NonTerminalType::Error),
            GrammarNonTerminals::_TokenMappedPlus31 => {
                Some(::rusty_lr_core::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_TokenMappedStar32 => Some(::rusty_lr_core::NonTerminalType::Star),
            GrammarNonTerminals::_PrecDefPlus33 => Some(::rusty_lr_core::NonTerminalType::PlusLeft),
            GrammarNonTerminals::_PrecDefStar34 => Some(::rusty_lr_core::NonTerminalType::Star),
            GrammarNonTerminals::_caretQuestion35 => {
                Some(::rusty_lr_core::NonTerminalType::Optional)
            }
            GrammarNonTerminals::_TerminalSetItemPlus36 => {
                Some(::rusty_lr_core::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_TerminalSetItemStar37 => {
                Some(::rusty_lr_core::NonTerminalType::Star)
            }
            GrammarNonTerminals::_PatternPlus38 => Some(::rusty_lr_core::NonTerminalType::PlusLeft),
            GrammarNonTerminals::_TermSet39 => Some(::rusty_lr_core::NonTerminalType::TerminalSet),
            GrammarNonTerminals::__TermSet39Plus40 => {
                Some(::rusty_lr_core::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_IdentOrLiteralPlus41 => {
                Some(::rusty_lr_core::NonTerminalType::PlusLeft)
            }
            GrammarNonTerminals::_identPlus42 => Some(::rusty_lr_core::NonTerminalType::PlusLeft),
            GrammarNonTerminals::_identStar43 => Some(::rusty_lr_core::NonTerminalType::Star),
            GrammarNonTerminals::_GrammarLinePlus44 => {
                Some(::rusty_lr_core::NonTerminalType::PlusRight)
            }
            GrammarNonTerminals::Augmented => Some(::rusty_lr_core::NonTerminalType::Augmented),
        }
    }
}
#[doc = r" enum for each non-terminal and terminal symbol, that actually hold data"]
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
pub enum GrammarTokenData {
    Terminals(Lexed),
    Empty,
    Variant2(RuleDefArgs),
    Variant3(Option<Group>),
    Variant4(Vec<RuleLineArgs>),
    Variant5(RuleLineArgs),
    Variant6(PrecDPrecArgs),
    Variant7((Option<Ident>, PatternArgs)),
    Variant8(TerminalSetItem),
    Variant9(TerminalSet),
    Variant10(PatternArgs),
    Variant11((Ident, TokenStream)),
    Variant12(TokenStream),
    Variant13(Ident),
    Variant14((Span, TokenStream)),
    Variant15(IdentOrLiteral),
    Variant16(ReduceType),
    Variant17((ReduceType, Vec<IdentOrLiteral>)),
    Variant18(Vec<IdentOrLiteral>),
    Variant19(Vec<Ident>),
    Variant20(Vec<(Option<Ident>, PatternArgs)>),
    Variant21(Vec<PrecDPrecArgs>),
    Variant22(Option<Lexed>),
    Variant23(Vec<TerminalSetItem>),
    Variant24(Vec<PatternArgs>),
    Variant25(Vec<Lexed>),
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl GrammarTokenData {
    fn reduce_Rule_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut ident) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant3(mut RuleType) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut colon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant4(mut RuleLines) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant2({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("Rule-Ident");
            };
            if let Lexed::Colon(colon) = colon {
                let span = colon.span();
                if let Some(fisrt) = RuleLines.first_mut() {
                    fisrt.separator_span = span;
                }
            } else {
                unreachable!("Rule-Colon2");
            }
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.stream()),
                rule_lines: RuleLines,
            }
        }))
    }
    fn reduce_RuleType_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut parengroup) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant3({
            if let Lexed::ParenGroup(group) = parengroup {
                Some(group)
            } else {
                unreachable!("RuleType - Group");
            }
        }))
    }
    fn reduce_RuleType_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        Ok(GrammarTokenData::Variant3({ None }))
    }
    fn reduce_RuleLines_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant4(mut RuleLines) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut pipe) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant5(mut RuleLine) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant4({
            if let Lexed::Pipe(punct) = pipe {
                RuleLine.separator_span = punct.span();
                RuleLines.push(RuleLine);
            }
            RuleLines
        }))
    }
    fn reduce_RuleLines_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant5(mut RuleLine) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant4({ vec![RuleLine] }))
    }
    fn reduce_RuleLine_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant20(mut TokenMapped) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant21(mut PrecDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant3(mut Action) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant5({
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
                separator_span: Span::call_site(),
                precs: PrecDef,
                prec: None,
                dprec: None,
            }
        }))
    }
    fn reduce_PrecDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.pop();
        let GrammarTokenData::Variant15(mut IdentOrLiteral) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant6({
            PrecDPrecArgs::Prec(IdentOrLiteral)
        }))
    }
    fn reduce_PrecDef_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.pop();
        let GrammarTokenData::Terminals(mut literal) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant6({
            let Lexed::Literal(literal) = literal else {
                unreachable!("PrecDPrecArgs-DPrec");
            };
            PrecDPrecArgs::DPrec(literal)
        }))
    }
    fn reduce_TokenMapped_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant10(mut Pattern) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant7({ (None, Pattern) }))
    }
    fn reduce_TokenMapped_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut ident) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut equal) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant10(mut Pattern) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant7({
            if let Lexed::Ident(ident) = ident {
                (Some(ident), Pattern)
            } else {
                unreachable!("Token-Ident");
            }
        }))
    }
    fn reduce_TerminalSetItem_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut ident) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant8({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            TerminalSetItem::Terminal(ident)
        }))
    }
    fn reduce_TerminalSetItem_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut first) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut minus) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut last) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant8({
            let first = if let Lexed::Ident(first) = first {
                first
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            let last = if let Lexed::Ident(last) = last {
                last
            } else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::Range(first, last)
        }))
    }
    fn reduce_TerminalSetItem_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut literal) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant8({
            let Lexed::Literal(literal) = literal else {
                unreachable!("TerminalSetItem-Literal");
            };
            TerminalSetItem::Literal(literal)
        }))
    }
    fn reduce_TerminalSetItem_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut first) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut minus) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut last) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant8({
            let Lexed::Literal(first) = first else {
                unreachable!("TerminalSetItem-Range1");
            };
            let Lexed::Literal(last) = last else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::LiteralRange(first, last)
        }))
    }
    fn reduce_TerminalSet_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut lbracket) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant22(mut caret) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant23(mut TerminalSetItem) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut rbracket) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant9({
            let open_span = if let Lexed::LBracket(lbracket) = lbracket {
                lbracket
            } else {
                unreachable!("TerminalSet-Open");
            };
            let close_span = if let Lexed::RBracket(rbracket) = rbracket {
                rbracket
            } else {
                unreachable!("TerminalSet-Close");
            };
            TerminalSet {
                negate: caret.is_some(),
                items: TerminalSetItem,
                open_span,
                close_span,
            }
        }))
    }
    fn reduce_TerminalSet_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut dot) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant9({
            let span = dot.span();
            TerminalSet {
                negate: true,
                items: vec![],
                open_span: span,
                close_span: span,
            }
        }))
    }
    fn reduce_Pattern_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut ident) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            if let Lexed::Ident(ident) = ident {
                PatternArgs::Ident(ident)
            } else {
                unreachable!("Pattern-Ident");
            }
        }))
    }
    fn reduce_Pattern_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant10(mut Pattern) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut plus) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            if let Lexed::Plus(plus) = plus {
                PatternArgs::Plus(Box::new(Pattern), plus.span())
            } else {
                unreachable!("Pattern-Plus");
            }
        }))
    }
    fn reduce_Pattern_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant10(mut Pattern) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut star) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            if let Lexed::Star(star) = star {
                PatternArgs::Star(Box::new(Pattern), star.span())
            } else {
                unreachable!("Pattern-Star");
            }
        }))
    }
    fn reduce_Pattern_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant10(mut Pattern) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut question) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            if let Lexed::Question(question) = question {
                PatternArgs::Question(Box::new(Pattern), question.span())
            } else {
                unreachable!("Pattern-Question");
            }
        }))
    }
    fn reduce_Pattern_4(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant10(mut Pattern) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut exclamation) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            if let Lexed::Exclamation(exclamation) = exclamation {
                PatternArgs::Exclamation(Box::new(Pattern), exclamation.span())
            } else {
                unreachable!("Pattern-Exclamation");
            }
        }))
    }
    fn reduce_Pattern_5(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant9(mut TerminalSet) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            PatternArgs::TerminalSet(TerminalSet)
        }))
    }
    fn reduce_Pattern_6(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant10(mut p1) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut slash) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant10(mut lh) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            PatternArgs::Lookaheads(Box::new(p1), Box::new(lh))
        }))
    }
    fn reduce_Pattern_7(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut lparen) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant24(mut Pattern) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut rparen) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            let open = if let Lexed::LParen(lparen) = lparen {
                lparen
            } else {
                unreachable!("Pattern-Group-Open");
            };
            let close = if let Lexed::RParen(rparen) = rparen {
                rparen
            } else {
                unreachable!("Pattern-Group-Close");
            };
            PatternArgs::Group(Pattern, open, close)
        }))
    }
    fn reduce_Pattern_8(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut literal) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            let Lexed::Literal(literal) = literal else {
                unreachable!("Pattern-Literal");
            };
            PatternArgs::Literal(literal)
        }))
    }
    fn reduce_Pattern_9(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant10(mut p1) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut minus) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant10(mut p2) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant10({
            PatternArgs::Minus(Box::new(p1), Box::new(p2))
        }))
    }
    fn reduce_Action_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut bracegroup) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant3({
            if let Lexed::BraceGroup(group) = bracegroup {
                Some(group)
            } else {
                unreachable!("Action0");
            }
        }))
    }
    fn reduce_Action_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        Ok(GrammarTokenData::Variant3({ None }))
    }
    fn reduce_TokenDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut token) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut ident) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant12(mut RustCode) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant11({
            if let Lexed::Ident(ident) = ident {
                (ident, RustCode)
            } else {
                unreachable!("TokenDef-Ident");
            }
        }))
    }
    fn reduce_RustCode_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant25(mut t) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant12({
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                token.append_to_stream(&mut tokens);
            }
            tokens
        }))
    }
    fn reduce_StartDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut start) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut ident) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant13({
            if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("StartDef-Ident");
            }
        }))
    }
    fn reduce_EofDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut eofdef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant12(mut RustCode) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant14({ (eofdef.span(), RustCode) }))
    }
    fn reduce_TokenTypeDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut tokentype) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant12(mut RustCode) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant14({
            (tokentype.span(), RustCode)
        }))
    }
    fn reduce_UserDataDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut userdata) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant12(mut RustCode) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant14({ (userdata.span(), RustCode) }))
    }
    fn reduce_IdentOrLiteral_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut ident) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant15({
            let Lexed::Ident(ident) = ident else {
                unreachable!("IdentOrLiteral-Ident");
            };
            IdentOrLiteral::Ident(ident)
        }))
    }
    fn reduce_IdentOrLiteral_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut literal) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant15({
            let Lexed::Literal(literal) = literal else {
                unreachable!("IdentOrLiteral-Literal");
            };
            IdentOrLiteral::Literal(literal)
        }))
    }
    fn reduce_ReduceType_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut left) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant16({ ReduceType::Left }))
    }
    fn reduce_ReduceType_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut right) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant16({ ReduceType::Right }))
    }
    fn reduce_ReduceDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant16(mut reducetype) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant18(mut IdentOrLiteral) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant17({
            (reducetype, IdentOrLiteral)
        }))
    }
    fn reduce_ErrorDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut errortype) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant12(mut RustCode) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant14({
            (errortype.span(), RustCode)
        }))
    }
    fn reduce_ModulePrefixDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut moduleprefix) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant12(mut RustCode) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant14({
            (moduleprefix.span(), RustCode)
        }))
    }
    fn reduce_Glr_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_Lalr_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_Precedence_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut precedence) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant18(mut IdentOrLiteral) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant18({ IdentOrLiteral }))
    }
    fn reduce_NoOptim_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_Dense_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_Trace_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut trace) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant25(mut ident) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut semicolon) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant19({
            ident
                .into_iter()
                .map(|t| {
                    let Lexed::Ident(ident) = t else {
                        unreachable!("Trace-Ident");
                    };
                    ident
                })
                .collect()
        }))
    }
    fn reduce_Filter_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.pop();
        let GrammarTokenData::Variant12(mut RustCode) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(GrammarTokenData::Variant12(RustCode))
    }
    fn reduce_GrammarLine_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant2(mut Rule) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.rules.push(Rule);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant11(mut TokenDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.terminals.push(TokenDef);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant13(mut StartDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.start_rule_name.push(StartDef);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant14(mut EofDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.eof.push(EofDef);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_4(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant14(mut TokenTypeDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.token_typename.push(TokenTypeDef);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_5(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant14(mut UserDataDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.userdata_typename.push(UserDataDef);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_6(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant17(mut ReduceDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.precedences.push(ReduceDef.1.clone());
            data.reduce_types.push(ReduceDef);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_7(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant14(mut ErrorDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.error_typename.push(ErrorDef);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_8(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant14(mut ModulePrefixDef) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.module_prefix.push(ModulePrefixDef);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_9(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.pop();
        {
            data.lalr = true;
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_10(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.pop();
        {
            data.glr = true;
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_11(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant18(mut Precedence) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.precedences.push(Precedence);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_12(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.pop();
        {
            data.no_optim = true;
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_13(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.pop();
        {
            data.dense = true;
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_14(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant19(mut Trace) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.traces.extend(Trace);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_GrammarLine_15(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant12(mut Filter) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        {
            data.filter = Some(Filter);
        }
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_Grammar_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(GrammarTokenData::Empty)
    }
    fn reduce__TokenMappedPlus31_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant7(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant20({ vec![A] }))
    }
    fn reduce__TokenMappedPlus31_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant20(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant7(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant20({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce__TokenMappedStar32_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant20(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant20({ Ap }))
    }
    fn reduce__TokenMappedStar32_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        Ok(GrammarTokenData::Variant20({ vec![] }))
    }
    fn reduce__PrecDefPlus33_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant6(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant21({ vec![A] }))
    }
    fn reduce__PrecDefPlus33_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant21(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant6(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant21({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce__PrecDefStar34_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant21(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant21({ Ap }))
    }
    fn reduce__PrecDefStar34_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        Ok(GrammarTokenData::Variant21({ vec![] }))
    }
    fn reduce__caretQuestion35_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant22({ Some(A) }))
    }
    fn reduce__caretQuestion35_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        Ok(GrammarTokenData::Variant22({ None }))
    }
    fn reduce__TerminalSetItemPlus36_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant8(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant23({ vec![A] }))
    }
    fn reduce__TerminalSetItemPlus36_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant23(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant8(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant23({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce__TerminalSetItemStar37_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant23(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant23({ Ap }))
    }
    fn reduce__TerminalSetItemStar37_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        Ok(GrammarTokenData::Variant23({ vec![] }))
    }
    fn reduce__PatternPlus38_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant10(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant24({ vec![A] }))
    }
    fn reduce__PatternPlus38_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant24(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant10(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant24({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce__TermSet39_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_4(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_5(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_6(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_7(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_8(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_9(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_10(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_11(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_12(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_13(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_14(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_15(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_16(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_17(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_18(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_19(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_20(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_21(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_22(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_23(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_24(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_25(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_26(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_27(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_28(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_29(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_30(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_31(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_32(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_33(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_34(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_35(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_36(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce__TermSet39_37(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut term) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Terminals(term))
    }
    fn reduce___TermSet39Plus40_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant25({ vec![A] }))
    }
    fn reduce___TermSet39Plus40_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant25(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant25({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce__IdentOrLiteralPlus41_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant15(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant18({ vec![A] }))
    }
    fn reduce__IdentOrLiteralPlus41_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant18(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Variant15(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant18({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce__identPlus42_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Terminals(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant25({ vec![A] }))
    }
    fn reduce__identPlus42_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant25(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        let GrammarTokenData::Terminals(mut A) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant25({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce__identStar43_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        let GrammarTokenData::Variant25(mut Ap) = __rustylr_args.pop().unwrap() else {
            unreachable!()
        };
        Ok(GrammarTokenData::Variant25({ Ap }))
    }
    fn reduce__identStar43_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        Ok(GrammarTokenData::Variant25({ vec![] }))
    }
    fn reduce__GrammarLinePlus44_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(GrammarTokenData::Empty)
    }
    fn reduce__GrammarLinePlus44_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(GrammarTokenData::Empty)
    }
    fn reduce_Augmented_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<GrammarTokenData, ::rusty_lr_core::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(GrammarTokenData::Empty)
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl ::rusty_lr_core::TokenData for GrammarTokenData {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type ReduceActionError = ::rusty_lr_core::DefaultReduceActionError;
    type UserData = GrammarArgs;
    type StartType = ();
    fn reduce_action(
        rule_index: usize,
        reduce_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Self::Term,
        user_data: &mut Self::UserData,
    ) -> Result<Self, Self::ReduceActionError> {
        match rule_index {
            0usize => Self::reduce_Rule_0(reduce_args, shift, lookahead, user_data),
            1usize => Self::reduce_RuleType_0(reduce_args, shift, lookahead, user_data),
            2usize => Self::reduce_RuleType_1(reduce_args, shift, lookahead, user_data),
            3usize => Self::reduce_RuleLines_0(reduce_args, shift, lookahead, user_data),
            4usize => Self::reduce_RuleLines_1(reduce_args, shift, lookahead, user_data),
            5usize => Self::reduce_RuleLine_0(reduce_args, shift, lookahead, user_data),
            6usize => Self::reduce_PrecDef_0(reduce_args, shift, lookahead, user_data),
            7usize => Self::reduce_PrecDef_1(reduce_args, shift, lookahead, user_data),
            8usize => Self::reduce_TokenMapped_0(reduce_args, shift, lookahead, user_data),
            9usize => Self::reduce_TokenMapped_1(reduce_args, shift, lookahead, user_data),
            10usize => Self::reduce_TerminalSetItem_0(reduce_args, shift, lookahead, user_data),
            11usize => Self::reduce_TerminalSetItem_1(reduce_args, shift, lookahead, user_data),
            12usize => Self::reduce_TerminalSetItem_2(reduce_args, shift, lookahead, user_data),
            13usize => Self::reduce_TerminalSetItem_3(reduce_args, shift, lookahead, user_data),
            14usize => Self::reduce_TerminalSet_0(reduce_args, shift, lookahead, user_data),
            15usize => Self::reduce_TerminalSet_1(reduce_args, shift, lookahead, user_data),
            16usize => Self::reduce_Pattern_0(reduce_args, shift, lookahead, user_data),
            17usize => Self::reduce_Pattern_1(reduce_args, shift, lookahead, user_data),
            18usize => Self::reduce_Pattern_2(reduce_args, shift, lookahead, user_data),
            19usize => Self::reduce_Pattern_3(reduce_args, shift, lookahead, user_data),
            20usize => Self::reduce_Pattern_4(reduce_args, shift, lookahead, user_data),
            21usize => Self::reduce_Pattern_5(reduce_args, shift, lookahead, user_data),
            22usize => Self::reduce_Pattern_6(reduce_args, shift, lookahead, user_data),
            23usize => Self::reduce_Pattern_7(reduce_args, shift, lookahead, user_data),
            24usize => Self::reduce_Pattern_8(reduce_args, shift, lookahead, user_data),
            25usize => Self::reduce_Pattern_9(reduce_args, shift, lookahead, user_data),
            26usize => Self::reduce_Action_0(reduce_args, shift, lookahead, user_data),
            27usize => Self::reduce_Action_1(reduce_args, shift, lookahead, user_data),
            28usize => Self::reduce_TokenDef_0(reduce_args, shift, lookahead, user_data),
            29usize => Self::reduce_RustCode_0(reduce_args, shift, lookahead, user_data),
            30usize => Self::reduce_StartDef_0(reduce_args, shift, lookahead, user_data),
            31usize => Self::reduce_EofDef_0(reduce_args, shift, lookahead, user_data),
            32usize => Self::reduce_TokenTypeDef_0(reduce_args, shift, lookahead, user_data),
            33usize => Self::reduce_UserDataDef_0(reduce_args, shift, lookahead, user_data),
            34usize => Self::reduce_IdentOrLiteral_0(reduce_args, shift, lookahead, user_data),
            35usize => Self::reduce_IdentOrLiteral_1(reduce_args, shift, lookahead, user_data),
            36usize => Self::reduce_ReduceType_0(reduce_args, shift, lookahead, user_data),
            37usize => Self::reduce_ReduceType_1(reduce_args, shift, lookahead, user_data),
            38usize => Self::reduce_ReduceDef_0(reduce_args, shift, lookahead, user_data),
            39usize => Self::reduce_ErrorDef_0(reduce_args, shift, lookahead, user_data),
            40usize => Self::reduce_ModulePrefixDef_0(reduce_args, shift, lookahead, user_data),
            41usize => Self::reduce_Glr_0(reduce_args, shift, lookahead, user_data),
            42usize => Self::reduce_Lalr_0(reduce_args, shift, lookahead, user_data),
            43usize => Self::reduce_Precedence_0(reduce_args, shift, lookahead, user_data),
            44usize => Self::reduce_NoOptim_0(reduce_args, shift, lookahead, user_data),
            45usize => Self::reduce_Dense_0(reduce_args, shift, lookahead, user_data),
            46usize => Self::reduce_Trace_0(reduce_args, shift, lookahead, user_data),
            47usize => Self::reduce_Filter_0(reduce_args, shift, lookahead, user_data),
            48usize => Self::reduce_GrammarLine_0(reduce_args, shift, lookahead, user_data),
            49usize => Self::reduce_GrammarLine_1(reduce_args, shift, lookahead, user_data),
            50usize => Self::reduce_GrammarLine_2(reduce_args, shift, lookahead, user_data),
            51usize => Self::reduce_GrammarLine_3(reduce_args, shift, lookahead, user_data),
            52usize => Self::reduce_GrammarLine_4(reduce_args, shift, lookahead, user_data),
            53usize => Self::reduce_GrammarLine_5(reduce_args, shift, lookahead, user_data),
            54usize => Self::reduce_GrammarLine_6(reduce_args, shift, lookahead, user_data),
            55usize => Self::reduce_GrammarLine_7(reduce_args, shift, lookahead, user_data),
            56usize => Self::reduce_GrammarLine_8(reduce_args, shift, lookahead, user_data),
            57usize => Self::reduce_GrammarLine_9(reduce_args, shift, lookahead, user_data),
            58usize => Self::reduce_GrammarLine_10(reduce_args, shift, lookahead, user_data),
            59usize => Self::reduce_GrammarLine_11(reduce_args, shift, lookahead, user_data),
            60usize => Self::reduce_GrammarLine_12(reduce_args, shift, lookahead, user_data),
            61usize => Self::reduce_GrammarLine_13(reduce_args, shift, lookahead, user_data),
            62usize => Self::reduce_GrammarLine_14(reduce_args, shift, lookahead, user_data),
            63usize => Self::reduce_GrammarLine_15(reduce_args, shift, lookahead, user_data),
            64usize => Self::reduce_Grammar_0(reduce_args, shift, lookahead, user_data),
            65usize => Self::reduce__TokenMappedPlus31_0(reduce_args, shift, lookahead, user_data),
            66usize => Self::reduce__TokenMappedPlus31_1(reduce_args, shift, lookahead, user_data),
            67usize => Self::reduce__TokenMappedStar32_0(reduce_args, shift, lookahead, user_data),
            68usize => Self::reduce__TokenMappedStar32_1(reduce_args, shift, lookahead, user_data),
            69usize => Self::reduce__PrecDefPlus33_0(reduce_args, shift, lookahead, user_data),
            70usize => Self::reduce__PrecDefPlus33_1(reduce_args, shift, lookahead, user_data),
            71usize => Self::reduce__PrecDefStar34_0(reduce_args, shift, lookahead, user_data),
            72usize => Self::reduce__PrecDefStar34_1(reduce_args, shift, lookahead, user_data),
            73usize => Self::reduce__caretQuestion35_0(reduce_args, shift, lookahead, user_data),
            74usize => Self::reduce__caretQuestion35_1(reduce_args, shift, lookahead, user_data),
            75usize => {
                Self::reduce__TerminalSetItemPlus36_0(reduce_args, shift, lookahead, user_data)
            }
            76usize => {
                Self::reduce__TerminalSetItemPlus36_1(reduce_args, shift, lookahead, user_data)
            }
            77usize => {
                Self::reduce__TerminalSetItemStar37_0(reduce_args, shift, lookahead, user_data)
            }
            78usize => {
                Self::reduce__TerminalSetItemStar37_1(reduce_args, shift, lookahead, user_data)
            }
            79usize => Self::reduce__PatternPlus38_0(reduce_args, shift, lookahead, user_data),
            80usize => Self::reduce__PatternPlus38_1(reduce_args, shift, lookahead, user_data),
            81usize => Self::reduce__TermSet39_0(reduce_args, shift, lookahead, user_data),
            82usize => Self::reduce__TermSet39_1(reduce_args, shift, lookahead, user_data),
            83usize => Self::reduce__TermSet39_2(reduce_args, shift, lookahead, user_data),
            84usize => Self::reduce__TermSet39_3(reduce_args, shift, lookahead, user_data),
            85usize => Self::reduce__TermSet39_4(reduce_args, shift, lookahead, user_data),
            86usize => Self::reduce__TermSet39_5(reduce_args, shift, lookahead, user_data),
            87usize => Self::reduce__TermSet39_6(reduce_args, shift, lookahead, user_data),
            88usize => Self::reduce__TermSet39_7(reduce_args, shift, lookahead, user_data),
            89usize => Self::reduce__TermSet39_8(reduce_args, shift, lookahead, user_data),
            90usize => Self::reduce__TermSet39_9(reduce_args, shift, lookahead, user_data),
            91usize => Self::reduce__TermSet39_10(reduce_args, shift, lookahead, user_data),
            92usize => Self::reduce__TermSet39_11(reduce_args, shift, lookahead, user_data),
            93usize => Self::reduce__TermSet39_12(reduce_args, shift, lookahead, user_data),
            94usize => Self::reduce__TermSet39_13(reduce_args, shift, lookahead, user_data),
            95usize => Self::reduce__TermSet39_14(reduce_args, shift, lookahead, user_data),
            96usize => Self::reduce__TermSet39_15(reduce_args, shift, lookahead, user_data),
            97usize => Self::reduce__TermSet39_16(reduce_args, shift, lookahead, user_data),
            98usize => Self::reduce__TermSet39_17(reduce_args, shift, lookahead, user_data),
            99usize => Self::reduce__TermSet39_18(reduce_args, shift, lookahead, user_data),
            100usize => Self::reduce__TermSet39_19(reduce_args, shift, lookahead, user_data),
            101usize => Self::reduce__TermSet39_20(reduce_args, shift, lookahead, user_data),
            102usize => Self::reduce__TermSet39_21(reduce_args, shift, lookahead, user_data),
            103usize => Self::reduce__TermSet39_22(reduce_args, shift, lookahead, user_data),
            104usize => Self::reduce__TermSet39_23(reduce_args, shift, lookahead, user_data),
            105usize => Self::reduce__TermSet39_24(reduce_args, shift, lookahead, user_data),
            106usize => Self::reduce__TermSet39_25(reduce_args, shift, lookahead, user_data),
            107usize => Self::reduce__TermSet39_26(reduce_args, shift, lookahead, user_data),
            108usize => Self::reduce__TermSet39_27(reduce_args, shift, lookahead, user_data),
            109usize => Self::reduce__TermSet39_28(reduce_args, shift, lookahead, user_data),
            110usize => Self::reduce__TermSet39_29(reduce_args, shift, lookahead, user_data),
            111usize => Self::reduce__TermSet39_30(reduce_args, shift, lookahead, user_data),
            112usize => Self::reduce__TermSet39_31(reduce_args, shift, lookahead, user_data),
            113usize => Self::reduce__TermSet39_32(reduce_args, shift, lookahead, user_data),
            114usize => Self::reduce__TermSet39_33(reduce_args, shift, lookahead, user_data),
            115usize => Self::reduce__TermSet39_34(reduce_args, shift, lookahead, user_data),
            116usize => Self::reduce__TermSet39_35(reduce_args, shift, lookahead, user_data),
            117usize => Self::reduce__TermSet39_36(reduce_args, shift, lookahead, user_data),
            118usize => Self::reduce__TermSet39_37(reduce_args, shift, lookahead, user_data),
            119usize => Self::reduce___TermSet39Plus40_0(reduce_args, shift, lookahead, user_data),
            120usize => Self::reduce___TermSet39Plus40_1(reduce_args, shift, lookahead, user_data),
            121usize => {
                Self::reduce__IdentOrLiteralPlus41_0(reduce_args, shift, lookahead, user_data)
            }
            122usize => {
                Self::reduce__IdentOrLiteralPlus41_1(reduce_args, shift, lookahead, user_data)
            }
            123usize => Self::reduce__identPlus42_0(reduce_args, shift, lookahead, user_data),
            124usize => Self::reduce__identPlus42_1(reduce_args, shift, lookahead, user_data),
            125usize => Self::reduce__identStar43_0(reduce_args, shift, lookahead, user_data),
            126usize => Self::reduce__identStar43_1(reduce_args, shift, lookahead, user_data),
            127usize => Self::reduce__GrammarLinePlus44_0(reduce_args, shift, lookahead, user_data),
            128usize => Self::reduce__GrammarLinePlus44_1(reduce_args, shift, lookahead, user_data),
            129usize => Self::reduce_Augmented_0(reduce_args, shift, lookahead, user_data),
            _ => {
                unreachable!("Invalid Rule: {}", rule_index);
            }
        }
    }
    fn new_error_nonterm() -> Self {
        GrammarTokenData::Empty
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl From<Lexed> for GrammarTokenData {
    fn from(token: Lexed) -> Self {
        GrammarTokenData::Terminals(token)
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl TryFrom<GrammarTokenData> for () {
    type Error = ();
    fn try_from(token: GrammarTokenData) -> Result<Self, Self::Error> {
        match token {
            GrammarTokenData::Empty => Ok(()),
            _ => Err(()),
        }
    }
}
#[doc = r" A struct that holds the entire parser table and production rules."]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarParser {
    #[doc = r" production rules"]
    pub rules: Vec<GrammarRule>,
    #[doc = r" states"]
    pub states: Vec<GrammarState>,
    #[doc = r" terminal classes"]
    pub classes: Vec<Vec<&'static str>>,
}
impl ::rusty_lr_core::lr::Parser for GrammarParser {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type State = GrammarState;
    type TerminalClassElement = &'static str;
    fn get_rules(&self) -> &[GrammarRule] {
        &self.rules
    }
    fn get_states(&self) -> &[GrammarState] {
        &self.states
    }
    fn get_terminals(
        &self,
        i: usize,
    ) -> Option<impl IntoIterator<Item = Self::TerminalClassElement> + '_> {
        self.classes.get(i).map(|class| class.iter().copied())
    }
    fn to_terminal_class(&self, terminal: &Self::Term) -> usize {
        #[allow(unreachable_patterns)]
        match terminal {
            Lexed::Ident(_) => 0usize,
            Lexed::Colon(_) => 2usize,
            Lexed::Pipe(_) => 3usize,
            Lexed::Equal(_) => 4usize,
            Lexed::Plus(_) => 5usize,
            Lexed::Star(_) => 6usize,
            Lexed::Question(_) => 7usize,
            Lexed::Exclamation(_) => 8usize,
            Lexed::Caret(_) => 9usize,
            Lexed::Minus(_) => 10usize,
            Lexed::Slash(_) => 11usize,
            Lexed::Dot(_) => 12usize,
            Lexed::Literal(_) => 13usize,
            Lexed::ParenGroup(_) => 14usize,
            Lexed::BraceGroup(_) => 15usize,
            Lexed::LParen(_) => 16usize,
            Lexed::RParen(_) => 17usize,
            Lexed::LBracket(_) => 18usize,
            Lexed::RBracket(_) => 19usize,
            Lexed::Left(_, _) => 20usize,
            Lexed::Right(_, _) => 21usize,
            Lexed::Token(_, _) => 22usize,
            Lexed::Start(_, _) => 23usize,
            Lexed::EofDef(_, _) => 24usize,
            Lexed::TokenType(_, _) => 25usize,
            Lexed::UserData(_, _) => 26usize,
            Lexed::ErrorType(_, _) => 27usize,
            Lexed::ModulePrefix(_, _) => 28usize,
            Lexed::Lalr(_, _) => 29usize,
            Lexed::Glr(_, _) => 30usize,
            Lexed::Prec(_, _) => 31usize,
            Lexed::Precedence(_, _) => 32usize,
            Lexed::NoOptim(_, _) => 33usize,
            Lexed::Dense(_, _) => 34usize,
            Lexed::Trace(_, _) => 35usize,
            Lexed::DPrec(_, _) => 36usize,
            Lexed::Filter(_, _) => 37usize,
            Lexed::Semicolon(_) => 38usize,
            Lexed::Eof => 39usize,
            _ => 1usize,
        }
    }
    fn get_error_nonterm(&self) -> Option<Self::NonTerm> {
        None
    }
}
#[doc = r" A struct that holds the whole parser table."]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarParser {
    #[doc = r" Calculates the states and parser tables from the grammar."]
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let mut builder = ::rusty_lr_core::builder::Grammar::new();
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(11usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(7usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(5usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(10usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(6usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_reduce_type(
            ::rusty_lr_core::builder::Operator::Term(8usize),
            ::rusty_lr_core::ReduceType::Left,
        );
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(11usize), 1usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(7usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(5usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(10usize), 0usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(8usize), 2usize);
        builder.add_precedence(::rusty_lr_core::builder::Operator::Term(6usize), 2usize);
        builder.add_rule(
            GrammarNonTerminals::Rule,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
                ::rusty_lr_core::Token::Term(2usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::RuleType,
            vec![::rusty_lr_core::Token::Term(14usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(GrammarNonTerminals::RuleType, vec![], None, None, 0usize);
        builder.add_rule(
            GrammarNonTerminals::RuleLines,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(3usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::RuleLines,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::RuleLine,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::RuleLine,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedStar32),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PrecDefStar34),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::PrecDef,
            vec![
                ::rusty_lr_core::Token::Term(31usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::PrecDef,
            vec![
                ::rusty_lr_core::Token::Term(36usize),
                ::rusty_lr_core::Token::Term(13usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TokenMapped,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TokenMapped,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(4usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(10usize),
                ::rusty_lr_core::Token::Term(0usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSetItem,
            vec![
                ::rusty_lr_core::Token::Term(13usize),
                ::rusty_lr_core::Token::Term(10usize),
                ::rusty_lr_core::Token::Term(13usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSet,
            vec![
                ::rusty_lr_core::Token::Term(18usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_caretQuestion35),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemStar37),
                ::rusty_lr_core::Token::Term(19usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TerminalSet,
            vec![::rusty_lr_core::Token::Term(12usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(5usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(5usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(6usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(6usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(7usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(7usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(8usize),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(8usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(11usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(11usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::Term(16usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternPlus38),
                ::rusty_lr_core::Token::Term(17usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Pattern,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(10usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Action,
            vec![::rusty_lr_core::Token::Term(15usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(GrammarNonTerminals::Action, vec![], None, None, 0usize);
        builder.add_rule(
            GrammarNonTerminals::TokenDef,
            vec![
                ::rusty_lr_core::Token::Term(22usize),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::RustCode,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::__TermSet39Plus40,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::StartDef,
            vec![
                ::rusty_lr_core::Token::Term(23usize),
                ::rusty_lr_core::Token::Term(0usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::EofDef,
            vec![
                ::rusty_lr_core::Token::Term(24usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::TokenTypeDef,
            vec![
                ::rusty_lr_core::Token::Term(25usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::UserDataDef,
            vec![
                ::rusty_lr_core::Token::Term(26usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::IdentOrLiteral,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::IdentOrLiteral,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceType,
            vec![::rusty_lr_core::Token::Term(20usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceType,
            vec![::rusty_lr_core::Token::Term(21usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ReduceDef,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus41),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ErrorDef,
            vec![
                ::rusty_lr_core::Token::Term(27usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::ModulePrefixDef,
            vec![
                ::rusty_lr_core::Token::Term(28usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Glr,
            vec![
                ::rusty_lr_core::Token::Term(30usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Lalr,
            vec![
                ::rusty_lr_core::Token::Term(29usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Precedence,
            vec![
                ::rusty_lr_core::Token::Term(32usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus41),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::NoOptim,
            vec![
                ::rusty_lr_core::Token::Term(33usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Dense,
            vec![
                ::rusty_lr_core::Token::Term(34usize),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Trace,
            vec![
                ::rusty_lr_core::Token::Term(35usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_identStar43),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Filter,
            vec![
                ::rusty_lr_core::Token::Term(37usize),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(38usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::StartDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenTypeDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::UserDataDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ReduceDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ErrorDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ModulePrefixDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Lalr)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Glr)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Precedence,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::NoOptim,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Dense)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Trace)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::GrammarLine,
            vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Filter)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Grammar,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_GrammarLinePlus44,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedPlus31,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenMapped,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedPlus31,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMappedPlus31),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedStar32,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TokenMappedPlus31,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TokenMappedStar32,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PrecDefPlus33,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::PrecDef,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PrecDefPlus33,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PrecDefPlus33),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::PrecDef),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PrecDefStar34,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_PrecDefPlus33,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PrecDefStar34,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_caretQuestion35,
            vec![::rusty_lr_core::Token::Term(9usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_caretQuestion35,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemPlus36,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSetItem,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemPlus36,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItemPlus36),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemStar37,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TerminalSetItemPlus36,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TerminalSetItemStar37,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PatternPlus38,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_PatternPlus38,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_PatternPlus38),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(2usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(3usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(1usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(4usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(5usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(5usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(6usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(6usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(7usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(7usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(9usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(10usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(10usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(8usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(8usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(11usize)],
            None,
            Some(::rusty_lr_core::builder::Operator::Term(11usize)),
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(12usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(13usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(14usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(15usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(16usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(17usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(18usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(19usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(20usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(21usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(22usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(23usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(24usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(25usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(26usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(27usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(28usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(29usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(30usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(31usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(32usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(33usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(34usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(35usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(36usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_TermSet39,
            vec![::rusty_lr_core::Token::Term(37usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::__TermSet39Plus40,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TermSet39,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::__TermSet39Plus40,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__TermSet39Plus40),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TermSet39),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_IdentOrLiteralPlus41,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::IdentOrLiteral,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_IdentOrLiteralPlus41,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_IdentOrLiteralPlus41),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::IdentOrLiteral),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_identPlus42,
            vec![::rusty_lr_core::Token::Term(0usize)],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_identPlus42,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_identPlus42),
                ::rusty_lr_core::Token::Term(0usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_identStar43,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_identPlus42,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_identStar43,
            vec![],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_GrammarLinePlus44,
            vec![::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::GrammarLine,
            )],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::_GrammarLinePlus44,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::GrammarLine),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_GrammarLinePlus44),
            ],
            None,
            None,
            0usize,
        );
        builder.add_rule(
            GrammarNonTerminals::Augmented,
            vec![
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                ::rusty_lr_core::Token::Term(39usize),
            ],
            None,
            None,
            0usize,
        );
        builder.add_empty_rule(GrammarNonTerminals::error);
        let Ok(states) = builder.build(
            GrammarNonTerminals::Augmented,
            &mut ::rusty_lr_core::builder::DiagnosticCollector::new(false),
        ) else {
            unreachable!("Failed to build LR parser")
        };
        let states = states.states;
        let terminal_class_names = vec![
            "ident",
            "[percent, <Others>] (2 terms)",
            "colon",
            "pipe",
            "equal",
            "plus",
            "star",
            "question",
            "exclamation",
            "caret",
            "minus",
            "slash",
            "dot",
            "literal",
            "parengroup",
            "bracegroup",
            "lparen",
            "rparen",
            "lbracket",
            "rbracket",
            "left",
            "right",
            "token",
            "start",
            "eofdef",
            "tokentype",
            "userdata",
            "errortype",
            "moduleprefix",
            "lalr",
            "glr",
            "prec",
            "precedence",
            "nooptim",
            "dense",
            "trace",
            "dprec",
            "filter",
            "semicolon",
            "eof",
        ];
        let rules = builder
            .rules
            .into_iter()
            .map(move |rule| {
                rule.rule
                    .map(|term| terminal_class_names[term], |nonterm| nonterm)
            })
            .collect();
        let states: Vec<_> = states
            .into_iter()
            .map(|state| state.into_lr_sparse_state(|x| x, |x| x))
            .collect();
        Self {
            rules,
            states,
            classes: vec![
                vec!["ident"],
                vec!["colon"],
                vec!["pipe"],
                vec!["equal"],
                vec!["plus"],
                vec!["star"],
                vec!["question"],
                vec!["exclamation"],
                vec!["caret"],
                vec!["minus"],
                vec!["slash"],
                vec!["dot"],
                vec!["literal"],
                vec!["parengroup"],
                vec!["bracegroup"],
                vec!["lparen"],
                vec!["rparen"],
                vec!["lbracket"],
                vec!["rbracket"],
                vec!["left"],
                vec!["right"],
                vec!["token"],
                vec!["start"],
                vec!["eofdef"],
                vec!["tokentype"],
                vec!["userdata"],
                vec!["errortype"],
                vec!["moduleprefix"],
                vec!["lalr"],
                vec!["glr"],
                vec!["prec"],
                vec!["precedence"],
                vec!["nooptim"],
                vec!["dense"],
                vec!["trace"],
                vec!["dprec"],
                vec!["filter"],
                vec!["semicolon"],
                vec!["eof"],
            ],
        }
    }
}
// ==============================Generated Codes End===============================
