// This file was generated by rustylr 0.1.3
//
// Input file: ../rusty_lr_parser/src/parser/parser.rs
// Output file: parser_expanded.rs
// ================================User Codes Begin================================
use crate::error::ParseError;
use crate::parser::args::GrammarArgs;
use crate::parser::args::PatternArgs;
use crate::parser::args::ReduceTypeArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::lexer::Lexed;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use rusty_lr_core::ReduceType;
use std::boxed::Box;
// =================================User Codes End=================================
/*
====================================Grammar=====================================
0: Action -> bracegroup
1: Action ->
2: EofDef -> eofdef RustCode semicolon
3: ErrorDef -> errortype RustCode semicolon
4: Grammar -> Grammar Rule
5: Grammar -> Rule
6: Grammar -> Grammar TokenDef
7: Grammar -> TokenDef
8: Grammar -> Grammar StartDef
9: Grammar -> StartDef
10: Grammar -> Grammar EofDef
11: Grammar -> EofDef
12: Grammar -> Grammar TokenTypeDef
13: Grammar -> TokenTypeDef
14: Grammar -> Grammar UserDataDef
15: Grammar -> UserDataDef
16: Grammar -> Grammar ReduceDef
17: Grammar -> ReduceDef
18: Grammar -> Grammar ErrorDef
19: Grammar -> ErrorDef
20: Grammar -> Grammar ModulePrefixDef
21: Grammar -> ModulePrefixDef
22: ModulePrefixDef -> moduleprefix RustCode semicolon
23: Pattern -> ident
24: Pattern -> Pattern plus
25: Pattern -> Pattern star
26: Pattern -> Pattern question
27: Pattern -> bracketgroup
28: ReduceDef -> ReduceType ident semicolon
29: ReduceDef -> ReduceType bracketgroup semicolon
30: ReduceType -> left
31: ReduceType -> right
32: Rule -> ident RuleType colon RuleLines semicolon
33: RuleLine -> _RustyLRGenerated0 Action
34: RuleLines -> RuleLines pipe RuleLine
35: RuleLines -> RuleLine
36: RuleType -> parengroup
37: RuleType ->
38: RustCode -> _RustyLRGenerated2
39: StartDef -> start ident semicolon
40: TokenDef -> token ident RustCode semicolon
41: TokenMapped -> Pattern
42: TokenMapped -> ident equal Pattern
43: TokenTypeDef -> tokentype RustCode semicolon
44: UserDataDef -> userdata RustCode semicolon
45: _RustyLRGenerated0 -> _RustyLRGenerated1
46: _RustyLRGenerated0 ->
47: _RustyLRGenerated1 -> TokenMapped
48: _RustyLRGenerated1 -> _RustyLRGenerated1 TokenMapped
49: _RustyLRGenerated2 -> _RustyLRGenerated3
50: _RustyLRGenerated2 -> _RustyLRGenerated2 _RustyLRGenerated3
51: _RustyLRGenerated3 -> bracegroup
52: _RustyLRGenerated3 -> bracketgroup
53: _RustyLRGenerated3 -> caret
54: _RustyLRGenerated3 -> colon
55: _RustyLRGenerated3 -> eofdef
56: _RustyLRGenerated3 -> equal
57: _RustyLRGenerated3 -> errortype
58: _RustyLRGenerated3 -> ident
59: _RustyLRGenerated3 -> left
60: _RustyLRGenerated3 -> literal
61: _RustyLRGenerated3 -> minus
62: _RustyLRGenerated3 -> moduleprefix
63: _RustyLRGenerated3 -> othergroup
64: _RustyLRGenerated3 -> otherpunct
65: _RustyLRGenerated3 -> parengroup
66: _RustyLRGenerated3 -> percent
67: _RustyLRGenerated3 -> pipe
68: _RustyLRGenerated3 -> plus
69: _RustyLRGenerated3 -> question
70: _RustyLRGenerated3 -> right
71: _RustyLRGenerated3 -> star
72: _RustyLRGenerated3 -> start
73: _RustyLRGenerated3 -> token
74: _RustyLRGenerated3 -> tokentype
75: _RustyLRGenerated3 -> userdata
76: Augmented -> Grammar eof


*/
// =============================Generated Codes Begin==============================
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types)]
#[derive(
    Debug,
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum GrammarNonTerminals {
    Action,
    EofDef,
    ErrorDef,
    Grammar,
    ModulePrefixDef,
    Pattern,
    ReduceDef,
    ReduceType,
    Rule,
    RuleLine,
    RuleLines,
    RuleType,
    RustCode,
    StartDef,
    TokenDef,
    TokenMapped,
    TokenTypeDef,
    UserDataDef,
    _RustyLRGenerated0,
    _RustyLRGenerated1,
    _RustyLRGenerated2,
    _RustyLRGenerated3,
    Augmented,
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrammarNonTerminals::Action => write!(f, "Action"),
            GrammarNonTerminals::EofDef => write!(f, "EofDef"),
            GrammarNonTerminals::ErrorDef => write!(f, "ErrorDef"),
            GrammarNonTerminals::Grammar => write!(f, "Grammar"),
            GrammarNonTerminals::ModulePrefixDef => write!(f, "ModulePrefixDef"),
            GrammarNonTerminals::Pattern => write!(f, "Pattern"),
            GrammarNonTerminals::ReduceDef => write!(f, "ReduceDef"),
            GrammarNonTerminals::ReduceType => write!(f, "ReduceType"),
            GrammarNonTerminals::Rule => write!(f, "Rule"),
            GrammarNonTerminals::RuleLine => write!(f, "RuleLine"),
            GrammarNonTerminals::RuleLines => write!(f, "RuleLines"),
            GrammarNonTerminals::RuleType => write!(f, "RuleType"),
            GrammarNonTerminals::RustCode => write!(f, "RustCode"),
            GrammarNonTerminals::StartDef => write!(f, "StartDef"),
            GrammarNonTerminals::TokenDef => write!(f, "TokenDef"),
            GrammarNonTerminals::TokenMapped => write!(f, "TokenMapped"),
            GrammarNonTerminals::TokenTypeDef => write!(f, "TokenTypeDef"),
            GrammarNonTerminals::UserDataDef => write!(f, "UserDataDef"),
            GrammarNonTerminals::_RustyLRGenerated0 => write!(f, "_RustyLRGenerated0"),
            GrammarNonTerminals::_RustyLRGenerated1 => write!(f, "_RustyLRGenerated1"),
            GrammarNonTerminals::_RustyLRGenerated2 => write!(f, "_RustyLRGenerated2"),
            GrammarNonTerminals::_RustyLRGenerated3 => write!(f, "_RustyLRGenerated3"),
            GrammarNonTerminals::Augmented => write!(f, "Augmented"),
        }
    }
}
#[doc = r" struct that holds internal parser data, for reduce action and state transition"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarContext {
    #[doc = r" state stack, user must not modify this"]
    pub state_stack: Vec<usize>,
    __rustylr_generated_terminal_stack: Vec<Lexed>,
    _rustylr_generated_Action_stack: Vec<(Option<Group>)>,
    _rustylr_generated_EofDef_stack: Vec<((Span, TokenStream))>,
    _rustylr_generated_ErrorDef_stack: Vec<((Span, TokenStream))>,
    _rustylr_generated_Grammar_stack: Vec<(GrammarArgs)>,
    _rustylr_generated_ModulePrefixDef_stack: Vec<((Span, TokenStream))>,
    _rustylr_generated_Pattern_stack: Vec<(PatternArgs)>,
    _rustylr_generated_ReduceDef_stack: Vec<((ReduceTypeArgs, ReduceType))>,
    _rustylr_generated_ReduceType_stack: Vec<(ReduceType)>,
    _rustylr_generated_Rule_stack: Vec<(RuleDefArgs)>,
    _rustylr_generated_RuleLine_stack: Vec<(RuleLineArgs)>,
    _rustylr_generated_RuleLines_stack: Vec<(Vec<RuleLineArgs>)>,
    _rustylr_generated_RuleType_stack: Vec<(Option<Group>)>,
    _rustylr_generated_RustCode_stack: Vec<(TokenStream)>,
    _rustylr_generated_StartDef_stack: Vec<(Ident)>,
    _rustylr_generated_TokenDef_stack: Vec<((Ident, TokenStream))>,
    _rustylr_generated_TokenMapped_stack: Vec<((Option<Ident>, PatternArgs))>,
    _rustylr_generated_TokenTypeDef_stack: Vec<((Span, TokenStream))>,
    _rustylr_generated_UserDataDef_stack: Vec<((Span, TokenStream))>,
    _rustylr_generated__RustyLRGenerated0_stack: Vec<Vec<((Option<Ident>, PatternArgs))>>,
    _rustylr_generated__RustyLRGenerated1_stack: Vec<Vec<((Option<Ident>, PatternArgs))>>,
    _rustylr_generated__RustyLRGenerated2_stack: Vec<Vec<Lexed>>,
    _rustylr_generated__RustyLRGenerated3_stack: Vec<Lexed>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarContext {
    pub fn new() -> Self {
        Self {
            state_stack: vec![0],
            __rustylr_generated_terminal_stack: Vec::new(),
            _rustylr_generated_Action_stack: Vec::new(),
            _rustylr_generated_EofDef_stack: Vec::new(),
            _rustylr_generated_ErrorDef_stack: Vec::new(),
            _rustylr_generated_Grammar_stack: Vec::new(),
            _rustylr_generated_ModulePrefixDef_stack: Vec::new(),
            _rustylr_generated_Pattern_stack: Vec::new(),
            _rustylr_generated_ReduceDef_stack: Vec::new(),
            _rustylr_generated_ReduceType_stack: Vec::new(),
            _rustylr_generated_Rule_stack: Vec::new(),
            _rustylr_generated_RuleLine_stack: Vec::new(),
            _rustylr_generated_RuleLines_stack: Vec::new(),
            _rustylr_generated_RuleType_stack: Vec::new(),
            _rustylr_generated_RustCode_stack: Vec::new(),
            _rustylr_generated_StartDef_stack: Vec::new(),
            _rustylr_generated_TokenDef_stack: Vec::new(),
            _rustylr_generated_TokenMapped_stack: Vec::new(),
            _rustylr_generated_TokenTypeDef_stack: Vec::new(),
            _rustylr_generated_UserDataDef_stack: Vec::new(),
            _rustylr_generated__RustyLRGenerated0_stack: Vec::new(),
            _rustylr_generated__RustyLRGenerated1_stack: Vec::new(),
            _rustylr_generated__RustyLRGenerated2_stack: Vec::new(),
            _rustylr_generated__RustyLRGenerated3_stack: Vec::new(),
        }
    }
    fn reduce_Action_0(&mut self) -> Result<(), ParseError> {
        let mut bracegroup = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_Action_stack.push({
            if let Lexed::BraceGroup(group) = bracegroup {
                group
            } else {
                unreachable!("Action0");
            }
        });
        Ok(())
    }
    fn reduce_Action_1(&mut self) -> Result<(), ParseError> {
        self._rustylr_generated_Action_stack.push({ None });
        Ok(())
    }
    fn reduce_EofDef_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RustCode = self
            ._rustylr_generated_RustCode_stack
            .pop()
            .expect("Something wrong! RustCode stack is empty");
        let mut eofdef = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_EofDef_stack
            .push({ (eofdef.span().expect("EofDef"), RustCode) });
        Ok(())
    }
    fn reduce_ErrorDef_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RustCode = self
            ._rustylr_generated_RustCode_stack
            .pop()
            .expect("Something wrong! RustCode stack is empty");
        let mut errortype = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_ErrorDef_stack
            .push({ (errortype.span().expect("ErrorDef"), RustCode) });
        Ok(())
    }
    fn reduce_Grammar_0(&mut self) -> Result<(), ParseError> {
        let mut Rule = self
            ._rustylr_generated_Rule_stack
            .pop()
            .expect("Something wrong! Rule stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            Grammar.rules.push(Rule);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_1(&mut self) -> Result<(), ParseError> {
        let mut Rule = self
            ._rustylr_generated_Rule_stack
            .pop()
            .expect("Something wrong! Rule stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            g.rules.push(Rule);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_2(&mut self) -> Result<(), ParseError> {
        let mut TokenDef = self
            ._rustylr_generated_TokenDef_stack
            .pop()
            .expect("Something wrong! TokenDef stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            Grammar.terminals.push(TokenDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_3(&mut self) -> Result<(), ParseError> {
        let mut TokenDef = self
            ._rustylr_generated_TokenDef_stack
            .pop()
            .expect("Something wrong! TokenDef stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            g.terminals.push(TokenDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_4(&mut self) -> Result<(), ParseError> {
        let mut StartDef = self
            ._rustylr_generated_StartDef_stack
            .pop()
            .expect("Something wrong! StartDef stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            if let Some(old) = Grammar.start_rule_name {
                return Err(ParseError::MultipleStartDefinition(
                    StartDef.span(),
                    old,
                    StartDef,
                ));
            }
            Grammar.start_rule_name = Some(StartDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_5(&mut self) -> Result<(), ParseError> {
        let mut StartDef = self
            ._rustylr_generated_StartDef_stack
            .pop()
            .expect("Something wrong! StartDef stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            g.start_rule_name = Some(StartDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_6(&mut self) -> Result<(), ParseError> {
        let mut EofDef = self
            ._rustylr_generated_EofDef_stack
            .pop()
            .expect("Something wrong! EofDef stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let (span, eof) = EofDef;
            if let Some(old) = Grammar.eof {
                return Err(ParseError::MultipleEofDefinition(span, old, eof));
            }
            Grammar.eof = Some(eof);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_7(&mut self) -> Result<(), ParseError> {
        let mut EofDef = self
            ._rustylr_generated_EofDef_stack
            .pop()
            .expect("Something wrong! EofDef stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            let (span, eof) = EofDef;
            g.eof = Some(eof);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_8(&mut self) -> Result<(), ParseError> {
        let mut TokenTypeDef = self
            ._rustylr_generated_TokenTypeDef_stack
            .pop()
            .expect("Something wrong! TokenTypeDef stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let (span, token_type) = TokenTypeDef;
            if let Some(old) = Grammar.token_typename {
                return Err(ParseError::MultipleTokenTypeDefinition(
                    span, old, token_type,
                ));
            }
            Grammar.token_typename = Some(token_type);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_9(&mut self) -> Result<(), ParseError> {
        let mut TokenTypeDef = self
            ._rustylr_generated_TokenTypeDef_stack
            .pop()
            .expect("Something wrong! TokenTypeDef stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            let (span, token_type) = TokenTypeDef;
            g.token_typename = Some(token_type);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_10(&mut self) -> Result<(), ParseError> {
        let mut UserDataDef = self
            ._rustylr_generated_UserDataDef_stack
            .pop()
            .expect("Something wrong! UserDataDef stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let (span, user_data) = UserDataDef;
            if let Some(old) = Grammar.userdata_typename {
                return Err(ParseError::MultipleUserDataDefinition(span, old, user_data));
            }
            Grammar.userdata_typename = Some(user_data);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_11(&mut self) -> Result<(), ParseError> {
        let mut UserDataDef = self
            ._rustylr_generated_UserDataDef_stack
            .pop()
            .expect("Something wrong! UserDataDef stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            let (span, user_data) = UserDataDef;
            g.userdata_typename = Some(user_data);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_12(&mut self) -> Result<(), ParseError> {
        let mut ReduceDef = self
            ._rustylr_generated_ReduceDef_stack
            .pop()
            .expect("Something wrong! ReduceDef stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            Grammar.reduce_types.push(ReduceDef);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_13(&mut self) -> Result<(), ParseError> {
        let mut ReduceDef = self
            ._rustylr_generated_ReduceDef_stack
            .pop()
            .expect("Something wrong! ReduceDef stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            g.reduce_types.push(ReduceDef);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_14(&mut self) -> Result<(), ParseError> {
        let mut ErrorDef = self
            ._rustylr_generated_ErrorDef_stack
            .pop()
            .expect("Something wrong! ErrorDef stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let (span, error) = ErrorDef;
            if let Some(old) = Grammar.error_typename {
                return Err(ParseError::MultipleErrorDefinition(span, old, error));
            }
            Grammar.error_typename = Some(error);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_15(&mut self) -> Result<(), ParseError> {
        let mut ErrorDef = self
            ._rustylr_generated_ErrorDef_stack
            .pop()
            .expect("Something wrong! ErrorDef stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            let (span, error) = ErrorDef;
            g.error_typename = Some(error);
            g
        });
        Ok(())
    }
    fn reduce_Grammar_16(&mut self) -> Result<(), ParseError> {
        let mut ModulePrefixDef = self
            ._rustylr_generated_ModulePrefixDef_stack
            .pop()
            .expect("Something wrong! ModulePrefixDef stack is empty");
        let mut Grammar = self
            ._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! Grammar stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let (span, module_prefix) = ModulePrefixDef;
            Grammar.module_prefix = Some(module_prefix);
            Grammar
        });
        Ok(())
    }
    fn reduce_Grammar_17(&mut self) -> Result<(), ParseError> {
        let mut ModulePrefixDef = self
            ._rustylr_generated_ModulePrefixDef_stack
            .pop()
            .expect("Something wrong! ModulePrefixDef stack is empty");
        self._rustylr_generated_Grammar_stack.push({
            let mut g: GrammarArgs = Default::default();
            let (span, module_prefix) = ModulePrefixDef;
            g.module_prefix = Some(module_prefix);
            g
        });
        Ok(())
    }
    fn reduce_ModulePrefixDef_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RustCode = self
            ._rustylr_generated_RustCode_stack
            .pop()
            .expect("Something wrong! RustCode stack is empty");
        let mut moduleprefix = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_ModulePrefixDef_stack
            .push({ (moduleprefix.span().expect("ModulePrefixDef"), RustCode) });
        Ok(())
    }
    fn reduce_Pattern_0(&mut self) -> Result<(), ParseError> {
        let mut ident = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_Pattern_stack.push({
            if let Lexed::Ident(ident) = ident {
                PatternArgs::Ident(ident.expect("Pattern-Ident"))
            } else {
                unreachable!("Pattern-Ident");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_1(&mut self) -> Result<(), ParseError> {
        let mut plus = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut Pattern = self
            ._rustylr_generated_Pattern_stack
            .pop()
            .expect("Something wrong! Pattern stack is empty");
        self._rustylr_generated_Pattern_stack
            .push({ PatternArgs::Plus(Box::new(Pattern)) });
        Ok(())
    }
    fn reduce_Pattern_2(&mut self) -> Result<(), ParseError> {
        let mut star = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut Pattern = self
            ._rustylr_generated_Pattern_stack
            .pop()
            .expect("Something wrong! Pattern stack is empty");
        self._rustylr_generated_Pattern_stack
            .push({ PatternArgs::Star(Box::new(Pattern)) });
        Ok(())
    }
    fn reduce_Pattern_3(&mut self) -> Result<(), ParseError> {
        let mut question = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut Pattern = self
            ._rustylr_generated_Pattern_stack
            .pop()
            .expect("Something wrong! Pattern stack is empty");
        self._rustylr_generated_Pattern_stack
            .push({ PatternArgs::Question(Box::new(Pattern)) });
        Ok(())
    }
    fn reduce_Pattern_4(&mut self) -> Result<(), ParseError> {
        let mut bracketgroup = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_Pattern_stack.push({
            if let Lexed::BracketGroup(group) = bracketgroup {
                PatternArgs::TerminalSet(group.expect("Pattern-BracketGroup0"))
            } else {
                unreachable!("Pattern-BracketGroup1");
            }
        });
        Ok(())
    }
    fn reduce_ReduceDef_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut ident = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut reducetype = self
            ._rustylr_generated_ReduceType_stack
            .pop()
            .expect("Something wrong! ReduceType stack is empty");
        self._rustylr_generated_ReduceDef_stack.push({
            if let Lexed::Ident(ident) = ident {
                (
                    ReduceTypeArgs::Ident(ident.expect("ReduceDef-Ident")),
                    reducetype,
                )
            } else {
                unreachable!("ReduceDef-Ident (Left)");
            }
        });
        Ok(())
    }
    fn reduce_ReduceDef_1(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut bracketgroup = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut reducetype = self
            ._rustylr_generated_ReduceType_stack
            .pop()
            .expect("Something wrong! ReduceType stack is empty");
        self._rustylr_generated_ReduceDef_stack.push({
            if let Lexed::BracketGroup(group) = bracketgroup {
                (
                    ReduceTypeArgs::TerminalSet(group.expect("ReduceDef-BracketGroup")),
                    reducetype,
                )
            } else {
                unreachable!("Pattern-BracketGroup1");
            }
        });
        Ok(())
    }
    fn reduce_ReduceType_0(&mut self) -> Result<(), ParseError> {
        let mut left = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_ReduceType_stack
            .push({ ReduceType::Left });
        Ok(())
    }
    fn reduce_ReduceType_1(&mut self) -> Result<(), ParseError> {
        let mut right = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_ReduceType_stack
            .push({ ReduceType::Right });
        Ok(())
    }
    fn reduce_Rule_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RuleLines = self
            ._rustylr_generated_RuleLines_stack
            .pop()
            .expect("Something wrong! RuleLines stack is empty");
        let mut colon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RuleType = self
            ._rustylr_generated_RuleType_stack
            .pop()
            .expect("Something wrong! RuleType stack is empty");
        let mut ident = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_Rule_stack.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident.expect("Rule-Ident")
            } else {
                unreachable!("Rule-Ident");
            };
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.to_token_stream()),
                rule_lines: RuleLines,
            }
        });
        Ok(())
    }
    fn reduce_RuleLine_0(&mut self) -> Result<(), ParseError> {
        let mut Action = self
            ._rustylr_generated_Action_stack
            .pop()
            .expect("Something wrong! Action stack is empty");
        let mut TokenMapped = self
            ._rustylr_generated__RustyLRGenerated0_stack
            .pop()
            .expect("Something wrong! _RustyLRGenerated0 stack is empty");
        self._rustylr_generated_RuleLine_stack.push({
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
            }
        });
        Ok(())
    }
    fn reduce_RuleLines_0(&mut self) -> Result<(), ParseError> {
        let mut RuleLine = self
            ._rustylr_generated_RuleLine_stack
            .pop()
            .expect("Something wrong! RuleLine stack is empty");
        let mut pipe = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RuleLines = self
            ._rustylr_generated_RuleLines_stack
            .pop()
            .expect("Something wrong! RuleLines stack is empty");
        self._rustylr_generated_RuleLines_stack.push({
            RuleLines.push(RuleLine);
            RuleLines
        });
        Ok(())
    }
    fn reduce_RuleLines_1(&mut self) -> Result<(), ParseError> {
        let mut RuleLine = self
            ._rustylr_generated_RuleLine_stack
            .pop()
            .expect("Something wrong! RuleLine stack is empty");
        self._rustylr_generated_RuleLines_stack
            .push({ vec![RuleLine] });
        Ok(())
    }
    fn reduce_RuleType_0(&mut self) -> Result<(), ParseError> {
        let mut parengroup = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_RuleType_stack.push({
            if let Lexed::ParenGroup(group) = parengroup {
                group
            } else {
                unreachable!("RuleType - Group");
            }
        });
        Ok(())
    }
    fn reduce_RuleType_1(&mut self) -> Result<(), ParseError> {
        self._rustylr_generated_RuleType_stack.push({ None });
        Ok(())
    }
    fn reduce_RustCode_0(&mut self) -> Result<(), ParseError> {
        let mut t = self
            ._rustylr_generated__RustyLRGenerated2_stack
            .pop()
            .expect("Something wrong! _RustyLRGenerated2 stack is empty");
        self._rustylr_generated_RustCode_stack.push({
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                tokens.extend(token.stream());
            }
            tokens
        });
        Ok(())
    }
    fn reduce_StartDef_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut ident = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut start = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_StartDef_stack.push({
            if let Lexed::Ident(ident) = ident {
                ident.expect("StartDef")
            } else {
                unreachable!("StartDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TokenDef_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RustCode = self
            ._rustylr_generated_RustCode_stack
            .pop()
            .expect("Something wrong! RustCode stack is empty");
        let mut ident = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut token = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_TokenDef_stack.push({
            if let Lexed::Ident(ident) = ident {
                (ident.expect("TokenDef"), RustCode)
            } else {
                unreachable!("TokenDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TokenMapped_0(&mut self) -> Result<(), ParseError> {
        let mut Pattern = self
            ._rustylr_generated_Pattern_stack
            .pop()
            .expect("Something wrong! Pattern stack is empty");
        self._rustylr_generated_TokenMapped_stack
            .push({ (None, Pattern) });
        Ok(())
    }
    fn reduce_TokenMapped_1(&mut self) -> Result<(), ParseError> {
        let mut Pattern = self
            ._rustylr_generated_Pattern_stack
            .pop()
            .expect("Something wrong! Pattern stack is empty");
        let mut equal = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut ident = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_TokenMapped_stack.push({
            if let Lexed::Ident(ident) = ident {
                (ident, Pattern)
            } else {
                unreachable!("Token-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TokenTypeDef_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RustCode = self
            ._rustylr_generated_RustCode_stack
            .pop()
            .expect("Something wrong! RustCode stack is empty");
        let mut tokentype = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_TokenTypeDef_stack
            .push({ (tokentype.span().expect("TokenTypedef"), RustCode) });
        Ok(())
    }
    fn reduce_UserDataDef_0(&mut self) -> Result<(), ParseError> {
        let mut semicolon = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        let mut RustCode = self
            ._rustylr_generated_RustCode_stack
            .pop()
            .expect("Something wrong! RustCode stack is empty");
        let mut userdata = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated_UserDataDef_stack
            .push({ (userdata.span().expect("UserDataDef"), RustCode) });
        Ok(())
    }
    fn reduce__RustyLRGenerated0_0(&mut self) -> Result<(), ParseError> {
        let mut Ap = self
            ._rustylr_generated__RustyLRGenerated1_stack
            .pop()
            .expect("Something wrong! _RustyLRGenerated1 stack is empty");
        self._rustylr_generated__RustyLRGenerated0_stack
            .push({ Ap });
        Ok(())
    }
    fn reduce__RustyLRGenerated0_1(&mut self) -> Result<(), ParseError> {
        self._rustylr_generated__RustyLRGenerated0_stack
            .push({ vec![] });
        Ok(())
    }
    fn reduce__RustyLRGenerated1_0(&mut self) -> Result<(), ParseError> {
        let mut A = self
            ._rustylr_generated_TokenMapped_stack
            .pop()
            .expect("Something wrong! TokenMapped stack is empty");
        self._rustylr_generated__RustyLRGenerated1_stack
            .push({ vec![A] });
        Ok(())
    }
    fn reduce__RustyLRGenerated1_1(&mut self) -> Result<(), ParseError> {
        let mut A = self
            ._rustylr_generated_TokenMapped_stack
            .pop()
            .expect("Something wrong! TokenMapped stack is empty");
        let mut Ap = self
            ._rustylr_generated__RustyLRGenerated1_stack
            .pop()
            .expect("Something wrong! _RustyLRGenerated1 stack is empty");
        self._rustylr_generated__RustyLRGenerated1_stack.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated2_0(&mut self) -> Result<(), ParseError> {
        let mut A = self
            ._rustylr_generated__RustyLRGenerated3_stack
            .pop()
            .expect("Something wrong! _RustyLRGenerated3 stack is empty");
        self._rustylr_generated__RustyLRGenerated2_stack
            .push({ vec![A] });
        Ok(())
    }
    fn reduce__RustyLRGenerated2_1(&mut self) -> Result<(), ParseError> {
        let mut A = self
            ._rustylr_generated__RustyLRGenerated3_stack
            .pop()
            .expect("Something wrong! _RustyLRGenerated3 stack is empty");
        let mut Ap = self
            ._rustylr_generated__RustyLRGenerated2_stack
            .pop()
            .expect("Something wrong! _RustyLRGenerated2 stack is empty");
        self._rustylr_generated__RustyLRGenerated2_stack.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__RustyLRGenerated3_0(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_1(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_2(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_3(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_4(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_5(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_6(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_7(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_8(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_9(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_10(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_11(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_12(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_13(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_14(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_15(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_16(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_17(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_18(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_19(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_20(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_21(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_22(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_23(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    fn reduce__RustyLRGenerated3_24(&mut self) -> Result<(), ParseError> {
        let mut term = self
            .__rustylr_generated_terminal_stack
            .pop()
            .expect("Something wrong! term_stack is empty");
        self._rustylr_generated__RustyLRGenerated3_stack.push(term);
        Ok(())
    }
    #[doc = r" reduce items in stack, this function is called automatically by parser"]
    pub fn reduce(
        &mut self,
        rulelen: usize,
        rustylr_macro_generated_ruleid__: usize,
    ) -> Result<(), ParseError> {
        match rustylr_macro_generated_ruleid__ {
            0usize => {
                self.reduce_Action_0()?;
            }
            1usize => {
                self.reduce_Action_1()?;
            }
            2usize => {
                self.reduce_EofDef_0()?;
            }
            3usize => {
                self.reduce_ErrorDef_0()?;
            }
            4usize => {
                self.reduce_Grammar_0()?;
            }
            5usize => {
                self.reduce_Grammar_1()?;
            }
            6usize => {
                self.reduce_Grammar_2()?;
            }
            7usize => {
                self.reduce_Grammar_3()?;
            }
            8usize => {
                self.reduce_Grammar_4()?;
            }
            9usize => {
                self.reduce_Grammar_5()?;
            }
            10usize => {
                self.reduce_Grammar_6()?;
            }
            11usize => {
                self.reduce_Grammar_7()?;
            }
            12usize => {
                self.reduce_Grammar_8()?;
            }
            13usize => {
                self.reduce_Grammar_9()?;
            }
            14usize => {
                self.reduce_Grammar_10()?;
            }
            15usize => {
                self.reduce_Grammar_11()?;
            }
            16usize => {
                self.reduce_Grammar_12()?;
            }
            17usize => {
                self.reduce_Grammar_13()?;
            }
            18usize => {
                self.reduce_Grammar_14()?;
            }
            19usize => {
                self.reduce_Grammar_15()?;
            }
            20usize => {
                self.reduce_Grammar_16()?;
            }
            21usize => {
                self.reduce_Grammar_17()?;
            }
            22usize => {
                self.reduce_ModulePrefixDef_0()?;
            }
            23usize => {
                self.reduce_Pattern_0()?;
            }
            24usize => {
                self.reduce_Pattern_1()?;
            }
            25usize => {
                self.reduce_Pattern_2()?;
            }
            26usize => {
                self.reduce_Pattern_3()?;
            }
            27usize => {
                self.reduce_Pattern_4()?;
            }
            28usize => {
                self.reduce_ReduceDef_0()?;
            }
            29usize => {
                self.reduce_ReduceDef_1()?;
            }
            30usize => {
                self.reduce_ReduceType_0()?;
            }
            31usize => {
                self.reduce_ReduceType_1()?;
            }
            32usize => {
                self.reduce_Rule_0()?;
            }
            33usize => {
                self.reduce_RuleLine_0()?;
            }
            34usize => {
                self.reduce_RuleLines_0()?;
            }
            35usize => {
                self.reduce_RuleLines_1()?;
            }
            36usize => {
                self.reduce_RuleType_0()?;
            }
            37usize => {
                self.reduce_RuleType_1()?;
            }
            38usize => {
                self.reduce_RustCode_0()?;
            }
            39usize => {
                self.reduce_StartDef_0()?;
            }
            40usize => {
                self.reduce_TokenDef_0()?;
            }
            41usize => {
                self.reduce_TokenMapped_0()?;
            }
            42usize => {
                self.reduce_TokenMapped_1()?;
            }
            43usize => {
                self.reduce_TokenTypeDef_0()?;
            }
            44usize => {
                self.reduce_UserDataDef_0()?;
            }
            45usize => {
                self.reduce__RustyLRGenerated0_0()?;
            }
            46usize => {
                self.reduce__RustyLRGenerated0_1()?;
            }
            47usize => {
                self.reduce__RustyLRGenerated1_0()?;
            }
            48usize => {
                self.reduce__RustyLRGenerated1_1()?;
            }
            49usize => {
                self.reduce__RustyLRGenerated2_0()?;
            }
            50usize => {
                self.reduce__RustyLRGenerated2_1()?;
            }
            51usize => {
                self.reduce__RustyLRGenerated3_0()?;
            }
            52usize => {
                self.reduce__RustyLRGenerated3_1()?;
            }
            53usize => {
                self.reduce__RustyLRGenerated3_2()?;
            }
            54usize => {
                self.reduce__RustyLRGenerated3_3()?;
            }
            55usize => {
                self.reduce__RustyLRGenerated3_4()?;
            }
            56usize => {
                self.reduce__RustyLRGenerated3_5()?;
            }
            57usize => {
                self.reduce__RustyLRGenerated3_6()?;
            }
            58usize => {
                self.reduce__RustyLRGenerated3_7()?;
            }
            59usize => {
                self.reduce__RustyLRGenerated3_8()?;
            }
            60usize => {
                self.reduce__RustyLRGenerated3_9()?;
            }
            61usize => {
                self.reduce__RustyLRGenerated3_10()?;
            }
            62usize => {
                self.reduce__RustyLRGenerated3_11()?;
            }
            63usize => {
                self.reduce__RustyLRGenerated3_12()?;
            }
            64usize => {
                self.reduce__RustyLRGenerated3_13()?;
            }
            65usize => {
                self.reduce__RustyLRGenerated3_14()?;
            }
            66usize => {
                self.reduce__RustyLRGenerated3_15()?;
            }
            67usize => {
                self.reduce__RustyLRGenerated3_16()?;
            }
            68usize => {
                self.reduce__RustyLRGenerated3_17()?;
            }
            69usize => {
                self.reduce__RustyLRGenerated3_18()?;
            }
            70usize => {
                self.reduce__RustyLRGenerated3_19()?;
            }
            71usize => {
                self.reduce__RustyLRGenerated3_20()?;
            }
            72usize => {
                self.reduce__RustyLRGenerated3_21()?;
            }
            73usize => {
                self.reduce__RustyLRGenerated3_22()?;
            }
            74usize => {
                self.reduce__RustyLRGenerated3_23()?;
            }
            75usize => {
                self.reduce__RustyLRGenerated3_24()?;
            }
            _ => {
                unreachable!("Invalid Rule: {}", rustylr_macro_generated_ruleid__);
            }
        }
        Ok(())
    }
    #[doc = r" pop value from start rule"]
    pub fn accept(&mut self) -> (GrammarArgs) {
        self._rustylr_generated_Grammar_stack
            .pop()
            .expect("Something wrong! start_rule_stack is empty")
    }
    #[doc = r" push terminal symbol to stack, this function is called automatically by parser"]
    pub fn push(&mut self, term: Lexed) {
        self.__rustylr_generated_terminal_stack.push(term);
    }
}
#[doc = r" struct that holds parser data, DFA tables"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct GrammarParser {
    #[doc = r" production rules"]
    pub rules: Vec<::rusty_lr_core::ProductionRule<Lexed, GrammarNonTerminals>>,
    #[doc = r" states"]
    pub states: Vec<::rusty_lr_core::State<Lexed, GrammarNonTerminals>>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl GrammarParser {
    pub fn new() -> Self {
        let rules = vec![
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Action,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::BraceGroup(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Action,
                rule: vec![],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::EofDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::EofDef(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::ErrorDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::ErrorType(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule)],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenDef),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::TokenDef,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::StartDef),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::StartDef,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef)],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenTypeDef),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::TokenTypeDef,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::UserDataDef),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::UserDataDef,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceDef),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::ReduceDef,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ErrorDef),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::ErrorDef,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ModulePrefixDef),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Grammar,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::ModulePrefixDef,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::ModulePrefixDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::ModulePrefix(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Ident(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                    ::rusty_lr_core::Token::Term(Lexed::Plus(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                    ::rusty_lr_core::Token::Term(Lexed::Star(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                    ::rusty_lr_core::Token::Term(Lexed::Question(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Pattern,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::BracketGroup(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::ReduceDef,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                    ::rusty_lr_core::Token::Term(Lexed::Ident(None)),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::ReduceDef,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                    ::rusty_lr_core::Token::Term(Lexed::BracketGroup(None)),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::ReduceType,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Left(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::ReduceType,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Right(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Rule,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::Ident(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
                    ::rusty_lr_core::Token::Term(Lexed::Colon(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::RuleLine,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated0),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::RuleLines,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                    ::rusty_lr_core::Token::Term(Lexed::Pipe(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::RuleLines,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::RuleLine,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::RuleType,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::ParenGroup(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::RuleType,
                rule: vec![],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::RustCode,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::_RustyLRGenerated2,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::StartDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::Start(None)),
                    ::rusty_lr_core::Token::Term(Lexed::Ident(None)),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::TokenDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::Token(None)),
                    ::rusty_lr_core::Token::Term(Lexed::Ident(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::TokenMapped,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::Pattern,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::TokenMapped,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::Ident(None)),
                    ::rusty_lr_core::Token::Term(Lexed::Equal(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::TokenTypeDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::TokenType(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::UserDataDef,
                rule: vec![
                    ::rusty_lr_core::Token::Term(Lexed::UserData(None)),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                    ::rusty_lr_core::Token::Term(Lexed::Semicolon(None)),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated0,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::_RustyLRGenerated1,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated0,
                rule: vec![],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated1,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::TokenMapped,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated1,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated1),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated2,
                rule: vec![::rusty_lr_core::Token::NonTerm(
                    GrammarNonTerminals::_RustyLRGenerated3,
                )],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated2,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated2),
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_RustyLRGenerated3),
                ],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::BraceGroup(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::BracketGroup(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Caret(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Colon(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::EofDef(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Equal(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::ErrorType(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Ident(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Left(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Literal(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Minus(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::ModulePrefix(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::OtherGroup(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::OtherPunct(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::ParenGroup(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Percent(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Pipe(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Plus(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Question(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Right(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Star(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Start(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::Token(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::TokenType(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::_RustyLRGenerated3,
                rule: vec![::rusty_lr_core::Token::Term(Lexed::UserData(None))],
            },
            ::rusty_lr_core::ProductionRule {
                name: GrammarNonTerminals::Augmented,
                rule: vec![
                    ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                    ::rusty_lr_core::Token::Term(Lexed::Eof),
                ],
            },
        ];
        let rustylr_macrogenerated_lookaheads_0 = std::collections::BTreeSet::from([
            Lexed::Eof,
            Lexed::EofDef(None),
            Lexed::ErrorType(None),
            Lexed::Ident(None),
            Lexed::Left(None),
            Lexed::ModulePrefix(None),
            Lexed::Right(None),
            Lexed::Start(None),
            Lexed::Token(None),
            Lexed::TokenType(None),
            Lexed::UserData(None),
        ]);
        let rustylr_macrogenerated_lookaheads_1 =
            std::collections::BTreeSet::from([Lexed::BracketGroup(None), Lexed::Ident(None)]);
        let rustylr_macrogenerated_lookaheads_2 = std::collections::BTreeSet::from([]);
        let rustylr_macrogenerated_lookaheads_3 =
            std::collections::BTreeSet::from([Lexed::Semicolon(None)]);
        let rustylr_macrogenerated_lookaheads_4 = std::collections::BTreeSet::from([
            Lexed::BraceGroup(None),
            Lexed::BracketGroup(None),
            Lexed::Caret(None),
            Lexed::Colon(None),
            Lexed::EofDef(None),
            Lexed::Equal(None),
            Lexed::ErrorType(None),
            Lexed::Ident(None),
            Lexed::Left(None),
            Lexed::Literal(None),
            Lexed::Minus(None),
            Lexed::ModulePrefix(None),
            Lexed::OtherGroup(None),
            Lexed::OtherPunct(None),
            Lexed::ParenGroup(None),
            Lexed::Percent(None),
            Lexed::Pipe(None),
            Lexed::Plus(None),
            Lexed::Question(None),
            Lexed::Right(None),
            Lexed::Semicolon(None),
            Lexed::Star(None),
            Lexed::Start(None),
            Lexed::Token(None),
            Lexed::TokenType(None),
            Lexed::UserData(None),
        ]);
        let rustylr_macrogenerated_lookaheads_5 =
            std::collections::BTreeSet::from([Lexed::Colon(None)]);
        let rustylr_macrogenerated_lookaheads_6 = std::collections::BTreeSet::from([
            Lexed::BraceGroup(None),
            Lexed::BracketGroup(None),
            Lexed::Ident(None),
            Lexed::Pipe(None),
            Lexed::Plus(None),
            Lexed::Question(None),
            Lexed::Semicolon(None),
            Lexed::Star(None),
        ]);
        let rustylr_macrogenerated_lookaheads_7 =
            std::collections::BTreeSet::from([Lexed::Pipe(None), Lexed::Semicolon(None)]);
        let rustylr_macrogenerated_lookaheads_8 = std::collections::BTreeSet::from([
            Lexed::BraceGroup(None),
            Lexed::BracketGroup(None),
            Lexed::Ident(None),
            Lexed::Pipe(None),
            Lexed::Semicolon(None),
        ]);
        let rustylr_macrogenerated_lookaheads_9 = std::collections::BTreeSet::from([
            Lexed::BraceGroup(None),
            Lexed::Pipe(None),
            Lexed::Semicolon(None),
        ]);
        let mut states = Vec::with_capacity(102usize);
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::EofDef(None), 1usize),
                (Lexed::ErrorType(None), 32usize),
                (Lexed::Ident(None), 35usize),
                (Lexed::Left(None), 59usize),
                (Lexed::ModulePrefix(None), 60usize),
                (Lexed::Right(None), 63usize),
                (Lexed::Start(None), 64usize),
                (Lexed::Token(None), 67usize),
                (Lexed::TokenType(None), 71usize),
                (Lexed::UserData(None), 74usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::EofDef, 77usize),
                (GrammarNonTerminals::ErrorDef, 78usize),
                (GrammarNonTerminals::Grammar, 79usize),
                (GrammarNonTerminals::ModulePrefixDef, 95usize),
                (GrammarNonTerminals::ReduceDef, 96usize),
                (GrammarNonTerminals::ReduceType, 85usize),
                (GrammarNonTerminals::Rule, 97usize),
                (GrammarNonTerminals::StartDef, 98usize),
                (GrammarNonTerminals::TokenDef, 99usize),
                (GrammarNonTerminals::TokenTypeDef, 100usize),
                (GrammarNonTerminals::UserDataDef, 101usize),
            ]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 2usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 3usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 4usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 5usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 6usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 7usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 8usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 9usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 10usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 11usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 12usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 13usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 14usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 15usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 16usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 17usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 18usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 19usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 20usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 21usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 22usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 28usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 29usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 30usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_1.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 31usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_1.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 32usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 39usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 40usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 43usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 44usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 76usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_2.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 2usize),
                (Lexed::BracketGroup(None), 3usize),
                (Lexed::Caret(None), 4usize),
                (Lexed::Colon(None), 5usize),
                (Lexed::EofDef(None), 6usize),
                (Lexed::Equal(None), 7usize),
                (Lexed::ErrorType(None), 8usize),
                (Lexed::Ident(None), 9usize),
                (Lexed::Left(None), 10usize),
                (Lexed::Literal(None), 11usize),
                (Lexed::Minus(None), 12usize),
                (Lexed::ModulePrefix(None), 13usize),
                (Lexed::OtherGroup(None), 14usize),
                (Lexed::OtherPunct(None), 15usize),
                (Lexed::ParenGroup(None), 16usize),
                (Lexed::Percent(None), 17usize),
                (Lexed::Pipe(None), 18usize),
                (Lexed::Plus(None), 19usize),
                (Lexed::Question(None), 20usize),
                (Lexed::Right(None), 21usize),
                (Lexed::Star(None), 22usize),
                (Lexed::Start(None), 23usize),
                (Lexed::Token(None), 24usize),
                (Lexed::TokenType(None), 25usize),
                (Lexed::UserData(None), 26usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::RustCode, 27usize),
                (GrammarNonTerminals::_RustyLRGenerated2, 29usize),
                (GrammarNonTerminals::_RustyLRGenerated3, 31usize),
            ]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 2usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 38usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_3.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 49usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 50usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 51usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 52usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 53usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 54usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 55usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 56usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 57usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 58usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 59usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 60usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 61usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 62usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 63usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 64usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 65usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 66usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 67usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 68usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 69usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 70usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 71usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 72usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 73usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 74usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 75usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 51usize),
                (Lexed::BracketGroup(None), 51usize),
                (Lexed::Caret(None), 51usize),
                (Lexed::Colon(None), 51usize),
                (Lexed::EofDef(None), 51usize),
                (Lexed::Equal(None), 51usize),
                (Lexed::ErrorType(None), 51usize),
                (Lexed::Ident(None), 51usize),
                (Lexed::Left(None), 51usize),
                (Lexed::Literal(None), 51usize),
                (Lexed::Minus(None), 51usize),
                (Lexed::ModulePrefix(None), 51usize),
                (Lexed::OtherGroup(None), 51usize),
                (Lexed::OtherPunct(None), 51usize),
                (Lexed::ParenGroup(None), 51usize),
                (Lexed::Percent(None), 51usize),
                (Lexed::Pipe(None), 51usize),
                (Lexed::Plus(None), 51usize),
                (Lexed::Question(None), 51usize),
                (Lexed::Right(None), 51usize),
                (Lexed::Semicolon(None), 51usize),
                (Lexed::Star(None), 51usize),
                (Lexed::Start(None), 51usize),
                (Lexed::Token(None), 51usize),
                (Lexed::TokenType(None), 51usize),
                (Lexed::UserData(None), 51usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 51usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 52usize),
                (Lexed::BracketGroup(None), 52usize),
                (Lexed::Caret(None), 52usize),
                (Lexed::Colon(None), 52usize),
                (Lexed::EofDef(None), 52usize),
                (Lexed::Equal(None), 52usize),
                (Lexed::ErrorType(None), 52usize),
                (Lexed::Ident(None), 52usize),
                (Lexed::Left(None), 52usize),
                (Lexed::Literal(None), 52usize),
                (Lexed::Minus(None), 52usize),
                (Lexed::ModulePrefix(None), 52usize),
                (Lexed::OtherGroup(None), 52usize),
                (Lexed::OtherPunct(None), 52usize),
                (Lexed::ParenGroup(None), 52usize),
                (Lexed::Percent(None), 52usize),
                (Lexed::Pipe(None), 52usize),
                (Lexed::Plus(None), 52usize),
                (Lexed::Question(None), 52usize),
                (Lexed::Right(None), 52usize),
                (Lexed::Semicolon(None), 52usize),
                (Lexed::Star(None), 52usize),
                (Lexed::Start(None), 52usize),
                (Lexed::Token(None), 52usize),
                (Lexed::TokenType(None), 52usize),
                (Lexed::UserData(None), 52usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 52usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 53usize),
                (Lexed::BracketGroup(None), 53usize),
                (Lexed::Caret(None), 53usize),
                (Lexed::Colon(None), 53usize),
                (Lexed::EofDef(None), 53usize),
                (Lexed::Equal(None), 53usize),
                (Lexed::ErrorType(None), 53usize),
                (Lexed::Ident(None), 53usize),
                (Lexed::Left(None), 53usize),
                (Lexed::Literal(None), 53usize),
                (Lexed::Minus(None), 53usize),
                (Lexed::ModulePrefix(None), 53usize),
                (Lexed::OtherGroup(None), 53usize),
                (Lexed::OtherPunct(None), 53usize),
                (Lexed::ParenGroup(None), 53usize),
                (Lexed::Percent(None), 53usize),
                (Lexed::Pipe(None), 53usize),
                (Lexed::Plus(None), 53usize),
                (Lexed::Question(None), 53usize),
                (Lexed::Right(None), 53usize),
                (Lexed::Semicolon(None), 53usize),
                (Lexed::Star(None), 53usize),
                (Lexed::Start(None), 53usize),
                (Lexed::Token(None), 53usize),
                (Lexed::TokenType(None), 53usize),
                (Lexed::UserData(None), 53usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 53usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 54usize),
                (Lexed::BracketGroup(None), 54usize),
                (Lexed::Caret(None), 54usize),
                (Lexed::Colon(None), 54usize),
                (Lexed::EofDef(None), 54usize),
                (Lexed::Equal(None), 54usize),
                (Lexed::ErrorType(None), 54usize),
                (Lexed::Ident(None), 54usize),
                (Lexed::Left(None), 54usize),
                (Lexed::Literal(None), 54usize),
                (Lexed::Minus(None), 54usize),
                (Lexed::ModulePrefix(None), 54usize),
                (Lexed::OtherGroup(None), 54usize),
                (Lexed::OtherPunct(None), 54usize),
                (Lexed::ParenGroup(None), 54usize),
                (Lexed::Percent(None), 54usize),
                (Lexed::Pipe(None), 54usize),
                (Lexed::Plus(None), 54usize),
                (Lexed::Question(None), 54usize),
                (Lexed::Right(None), 54usize),
                (Lexed::Semicolon(None), 54usize),
                (Lexed::Star(None), 54usize),
                (Lexed::Start(None), 54usize),
                (Lexed::Token(None), 54usize),
                (Lexed::TokenType(None), 54usize),
                (Lexed::UserData(None), 54usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 54usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 55usize),
                (Lexed::BracketGroup(None), 55usize),
                (Lexed::Caret(None), 55usize),
                (Lexed::Colon(None), 55usize),
                (Lexed::EofDef(None), 55usize),
                (Lexed::Equal(None), 55usize),
                (Lexed::ErrorType(None), 55usize),
                (Lexed::Ident(None), 55usize),
                (Lexed::Left(None), 55usize),
                (Lexed::Literal(None), 55usize),
                (Lexed::Minus(None), 55usize),
                (Lexed::ModulePrefix(None), 55usize),
                (Lexed::OtherGroup(None), 55usize),
                (Lexed::OtherPunct(None), 55usize),
                (Lexed::ParenGroup(None), 55usize),
                (Lexed::Percent(None), 55usize),
                (Lexed::Pipe(None), 55usize),
                (Lexed::Plus(None), 55usize),
                (Lexed::Question(None), 55usize),
                (Lexed::Right(None), 55usize),
                (Lexed::Semicolon(None), 55usize),
                (Lexed::Star(None), 55usize),
                (Lexed::Start(None), 55usize),
                (Lexed::Token(None), 55usize),
                (Lexed::TokenType(None), 55usize),
                (Lexed::UserData(None), 55usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 55usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 56usize),
                (Lexed::BracketGroup(None), 56usize),
                (Lexed::Caret(None), 56usize),
                (Lexed::Colon(None), 56usize),
                (Lexed::EofDef(None), 56usize),
                (Lexed::Equal(None), 56usize),
                (Lexed::ErrorType(None), 56usize),
                (Lexed::Ident(None), 56usize),
                (Lexed::Left(None), 56usize),
                (Lexed::Literal(None), 56usize),
                (Lexed::Minus(None), 56usize),
                (Lexed::ModulePrefix(None), 56usize),
                (Lexed::OtherGroup(None), 56usize),
                (Lexed::OtherPunct(None), 56usize),
                (Lexed::ParenGroup(None), 56usize),
                (Lexed::Percent(None), 56usize),
                (Lexed::Pipe(None), 56usize),
                (Lexed::Plus(None), 56usize),
                (Lexed::Question(None), 56usize),
                (Lexed::Right(None), 56usize),
                (Lexed::Semicolon(None), 56usize),
                (Lexed::Star(None), 56usize),
                (Lexed::Start(None), 56usize),
                (Lexed::Token(None), 56usize),
                (Lexed::TokenType(None), 56usize),
                (Lexed::UserData(None), 56usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 56usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 57usize),
                (Lexed::BracketGroup(None), 57usize),
                (Lexed::Caret(None), 57usize),
                (Lexed::Colon(None), 57usize),
                (Lexed::EofDef(None), 57usize),
                (Lexed::Equal(None), 57usize),
                (Lexed::ErrorType(None), 57usize),
                (Lexed::Ident(None), 57usize),
                (Lexed::Left(None), 57usize),
                (Lexed::Literal(None), 57usize),
                (Lexed::Minus(None), 57usize),
                (Lexed::ModulePrefix(None), 57usize),
                (Lexed::OtherGroup(None), 57usize),
                (Lexed::OtherPunct(None), 57usize),
                (Lexed::ParenGroup(None), 57usize),
                (Lexed::Percent(None), 57usize),
                (Lexed::Pipe(None), 57usize),
                (Lexed::Plus(None), 57usize),
                (Lexed::Question(None), 57usize),
                (Lexed::Right(None), 57usize),
                (Lexed::Semicolon(None), 57usize),
                (Lexed::Star(None), 57usize),
                (Lexed::Start(None), 57usize),
                (Lexed::Token(None), 57usize),
                (Lexed::TokenType(None), 57usize),
                (Lexed::UserData(None), 57usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 57usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 58usize),
                (Lexed::BracketGroup(None), 58usize),
                (Lexed::Caret(None), 58usize),
                (Lexed::Colon(None), 58usize),
                (Lexed::EofDef(None), 58usize),
                (Lexed::Equal(None), 58usize),
                (Lexed::ErrorType(None), 58usize),
                (Lexed::Ident(None), 58usize),
                (Lexed::Left(None), 58usize),
                (Lexed::Literal(None), 58usize),
                (Lexed::Minus(None), 58usize),
                (Lexed::ModulePrefix(None), 58usize),
                (Lexed::OtherGroup(None), 58usize),
                (Lexed::OtherPunct(None), 58usize),
                (Lexed::ParenGroup(None), 58usize),
                (Lexed::Percent(None), 58usize),
                (Lexed::Pipe(None), 58usize),
                (Lexed::Plus(None), 58usize),
                (Lexed::Question(None), 58usize),
                (Lexed::Right(None), 58usize),
                (Lexed::Semicolon(None), 58usize),
                (Lexed::Star(None), 58usize),
                (Lexed::Start(None), 58usize),
                (Lexed::Token(None), 58usize),
                (Lexed::TokenType(None), 58usize),
                (Lexed::UserData(None), 58usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 58usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 59usize),
                (Lexed::BracketGroup(None), 59usize),
                (Lexed::Caret(None), 59usize),
                (Lexed::Colon(None), 59usize),
                (Lexed::EofDef(None), 59usize),
                (Lexed::Equal(None), 59usize),
                (Lexed::ErrorType(None), 59usize),
                (Lexed::Ident(None), 59usize),
                (Lexed::Left(None), 59usize),
                (Lexed::Literal(None), 59usize),
                (Lexed::Minus(None), 59usize),
                (Lexed::ModulePrefix(None), 59usize),
                (Lexed::OtherGroup(None), 59usize),
                (Lexed::OtherPunct(None), 59usize),
                (Lexed::ParenGroup(None), 59usize),
                (Lexed::Percent(None), 59usize),
                (Lexed::Pipe(None), 59usize),
                (Lexed::Plus(None), 59usize),
                (Lexed::Question(None), 59usize),
                (Lexed::Right(None), 59usize),
                (Lexed::Semicolon(None), 59usize),
                (Lexed::Star(None), 59usize),
                (Lexed::Start(None), 59usize),
                (Lexed::Token(None), 59usize),
                (Lexed::TokenType(None), 59usize),
                (Lexed::UserData(None), 59usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 59usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 60usize),
                (Lexed::BracketGroup(None), 60usize),
                (Lexed::Caret(None), 60usize),
                (Lexed::Colon(None), 60usize),
                (Lexed::EofDef(None), 60usize),
                (Lexed::Equal(None), 60usize),
                (Lexed::ErrorType(None), 60usize),
                (Lexed::Ident(None), 60usize),
                (Lexed::Left(None), 60usize),
                (Lexed::Literal(None), 60usize),
                (Lexed::Minus(None), 60usize),
                (Lexed::ModulePrefix(None), 60usize),
                (Lexed::OtherGroup(None), 60usize),
                (Lexed::OtherPunct(None), 60usize),
                (Lexed::ParenGroup(None), 60usize),
                (Lexed::Percent(None), 60usize),
                (Lexed::Pipe(None), 60usize),
                (Lexed::Plus(None), 60usize),
                (Lexed::Question(None), 60usize),
                (Lexed::Right(None), 60usize),
                (Lexed::Semicolon(None), 60usize),
                (Lexed::Star(None), 60usize),
                (Lexed::Start(None), 60usize),
                (Lexed::Token(None), 60usize),
                (Lexed::TokenType(None), 60usize),
                (Lexed::UserData(None), 60usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 60usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 61usize),
                (Lexed::BracketGroup(None), 61usize),
                (Lexed::Caret(None), 61usize),
                (Lexed::Colon(None), 61usize),
                (Lexed::EofDef(None), 61usize),
                (Lexed::Equal(None), 61usize),
                (Lexed::ErrorType(None), 61usize),
                (Lexed::Ident(None), 61usize),
                (Lexed::Left(None), 61usize),
                (Lexed::Literal(None), 61usize),
                (Lexed::Minus(None), 61usize),
                (Lexed::ModulePrefix(None), 61usize),
                (Lexed::OtherGroup(None), 61usize),
                (Lexed::OtherPunct(None), 61usize),
                (Lexed::ParenGroup(None), 61usize),
                (Lexed::Percent(None), 61usize),
                (Lexed::Pipe(None), 61usize),
                (Lexed::Plus(None), 61usize),
                (Lexed::Question(None), 61usize),
                (Lexed::Right(None), 61usize),
                (Lexed::Semicolon(None), 61usize),
                (Lexed::Star(None), 61usize),
                (Lexed::Start(None), 61usize),
                (Lexed::Token(None), 61usize),
                (Lexed::TokenType(None), 61usize),
                (Lexed::UserData(None), 61usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 61usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 62usize),
                (Lexed::BracketGroup(None), 62usize),
                (Lexed::Caret(None), 62usize),
                (Lexed::Colon(None), 62usize),
                (Lexed::EofDef(None), 62usize),
                (Lexed::Equal(None), 62usize),
                (Lexed::ErrorType(None), 62usize),
                (Lexed::Ident(None), 62usize),
                (Lexed::Left(None), 62usize),
                (Lexed::Literal(None), 62usize),
                (Lexed::Minus(None), 62usize),
                (Lexed::ModulePrefix(None), 62usize),
                (Lexed::OtherGroup(None), 62usize),
                (Lexed::OtherPunct(None), 62usize),
                (Lexed::ParenGroup(None), 62usize),
                (Lexed::Percent(None), 62usize),
                (Lexed::Pipe(None), 62usize),
                (Lexed::Plus(None), 62usize),
                (Lexed::Question(None), 62usize),
                (Lexed::Right(None), 62usize),
                (Lexed::Semicolon(None), 62usize),
                (Lexed::Star(None), 62usize),
                (Lexed::Start(None), 62usize),
                (Lexed::Token(None), 62usize),
                (Lexed::TokenType(None), 62usize),
                (Lexed::UserData(None), 62usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 62usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 63usize),
                (Lexed::BracketGroup(None), 63usize),
                (Lexed::Caret(None), 63usize),
                (Lexed::Colon(None), 63usize),
                (Lexed::EofDef(None), 63usize),
                (Lexed::Equal(None), 63usize),
                (Lexed::ErrorType(None), 63usize),
                (Lexed::Ident(None), 63usize),
                (Lexed::Left(None), 63usize),
                (Lexed::Literal(None), 63usize),
                (Lexed::Minus(None), 63usize),
                (Lexed::ModulePrefix(None), 63usize),
                (Lexed::OtherGroup(None), 63usize),
                (Lexed::OtherPunct(None), 63usize),
                (Lexed::ParenGroup(None), 63usize),
                (Lexed::Percent(None), 63usize),
                (Lexed::Pipe(None), 63usize),
                (Lexed::Plus(None), 63usize),
                (Lexed::Question(None), 63usize),
                (Lexed::Right(None), 63usize),
                (Lexed::Semicolon(None), 63usize),
                (Lexed::Star(None), 63usize),
                (Lexed::Start(None), 63usize),
                (Lexed::Token(None), 63usize),
                (Lexed::TokenType(None), 63usize),
                (Lexed::UserData(None), 63usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 63usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 64usize),
                (Lexed::BracketGroup(None), 64usize),
                (Lexed::Caret(None), 64usize),
                (Lexed::Colon(None), 64usize),
                (Lexed::EofDef(None), 64usize),
                (Lexed::Equal(None), 64usize),
                (Lexed::ErrorType(None), 64usize),
                (Lexed::Ident(None), 64usize),
                (Lexed::Left(None), 64usize),
                (Lexed::Literal(None), 64usize),
                (Lexed::Minus(None), 64usize),
                (Lexed::ModulePrefix(None), 64usize),
                (Lexed::OtherGroup(None), 64usize),
                (Lexed::OtherPunct(None), 64usize),
                (Lexed::ParenGroup(None), 64usize),
                (Lexed::Percent(None), 64usize),
                (Lexed::Pipe(None), 64usize),
                (Lexed::Plus(None), 64usize),
                (Lexed::Question(None), 64usize),
                (Lexed::Right(None), 64usize),
                (Lexed::Semicolon(None), 64usize),
                (Lexed::Star(None), 64usize),
                (Lexed::Start(None), 64usize),
                (Lexed::Token(None), 64usize),
                (Lexed::TokenType(None), 64usize),
                (Lexed::UserData(None), 64usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 64usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 65usize),
                (Lexed::BracketGroup(None), 65usize),
                (Lexed::Caret(None), 65usize),
                (Lexed::Colon(None), 65usize),
                (Lexed::EofDef(None), 65usize),
                (Lexed::Equal(None), 65usize),
                (Lexed::ErrorType(None), 65usize),
                (Lexed::Ident(None), 65usize),
                (Lexed::Left(None), 65usize),
                (Lexed::Literal(None), 65usize),
                (Lexed::Minus(None), 65usize),
                (Lexed::ModulePrefix(None), 65usize),
                (Lexed::OtherGroup(None), 65usize),
                (Lexed::OtherPunct(None), 65usize),
                (Lexed::ParenGroup(None), 65usize),
                (Lexed::Percent(None), 65usize),
                (Lexed::Pipe(None), 65usize),
                (Lexed::Plus(None), 65usize),
                (Lexed::Question(None), 65usize),
                (Lexed::Right(None), 65usize),
                (Lexed::Semicolon(None), 65usize),
                (Lexed::Star(None), 65usize),
                (Lexed::Start(None), 65usize),
                (Lexed::Token(None), 65usize),
                (Lexed::TokenType(None), 65usize),
                (Lexed::UserData(None), 65usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 65usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 66usize),
                (Lexed::BracketGroup(None), 66usize),
                (Lexed::Caret(None), 66usize),
                (Lexed::Colon(None), 66usize),
                (Lexed::EofDef(None), 66usize),
                (Lexed::Equal(None), 66usize),
                (Lexed::ErrorType(None), 66usize),
                (Lexed::Ident(None), 66usize),
                (Lexed::Left(None), 66usize),
                (Lexed::Literal(None), 66usize),
                (Lexed::Minus(None), 66usize),
                (Lexed::ModulePrefix(None), 66usize),
                (Lexed::OtherGroup(None), 66usize),
                (Lexed::OtherPunct(None), 66usize),
                (Lexed::ParenGroup(None), 66usize),
                (Lexed::Percent(None), 66usize),
                (Lexed::Pipe(None), 66usize),
                (Lexed::Plus(None), 66usize),
                (Lexed::Question(None), 66usize),
                (Lexed::Right(None), 66usize),
                (Lexed::Semicolon(None), 66usize),
                (Lexed::Star(None), 66usize),
                (Lexed::Start(None), 66usize),
                (Lexed::Token(None), 66usize),
                (Lexed::TokenType(None), 66usize),
                (Lexed::UserData(None), 66usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 66usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 67usize),
                (Lexed::BracketGroup(None), 67usize),
                (Lexed::Caret(None), 67usize),
                (Lexed::Colon(None), 67usize),
                (Lexed::EofDef(None), 67usize),
                (Lexed::Equal(None), 67usize),
                (Lexed::ErrorType(None), 67usize),
                (Lexed::Ident(None), 67usize),
                (Lexed::Left(None), 67usize),
                (Lexed::Literal(None), 67usize),
                (Lexed::Minus(None), 67usize),
                (Lexed::ModulePrefix(None), 67usize),
                (Lexed::OtherGroup(None), 67usize),
                (Lexed::OtherPunct(None), 67usize),
                (Lexed::ParenGroup(None), 67usize),
                (Lexed::Percent(None), 67usize),
                (Lexed::Pipe(None), 67usize),
                (Lexed::Plus(None), 67usize),
                (Lexed::Question(None), 67usize),
                (Lexed::Right(None), 67usize),
                (Lexed::Semicolon(None), 67usize),
                (Lexed::Star(None), 67usize),
                (Lexed::Start(None), 67usize),
                (Lexed::Token(None), 67usize),
                (Lexed::TokenType(None), 67usize),
                (Lexed::UserData(None), 67usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 67usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 68usize),
                (Lexed::BracketGroup(None), 68usize),
                (Lexed::Caret(None), 68usize),
                (Lexed::Colon(None), 68usize),
                (Lexed::EofDef(None), 68usize),
                (Lexed::Equal(None), 68usize),
                (Lexed::ErrorType(None), 68usize),
                (Lexed::Ident(None), 68usize),
                (Lexed::Left(None), 68usize),
                (Lexed::Literal(None), 68usize),
                (Lexed::Minus(None), 68usize),
                (Lexed::ModulePrefix(None), 68usize),
                (Lexed::OtherGroup(None), 68usize),
                (Lexed::OtherPunct(None), 68usize),
                (Lexed::ParenGroup(None), 68usize),
                (Lexed::Percent(None), 68usize),
                (Lexed::Pipe(None), 68usize),
                (Lexed::Plus(None), 68usize),
                (Lexed::Question(None), 68usize),
                (Lexed::Right(None), 68usize),
                (Lexed::Semicolon(None), 68usize),
                (Lexed::Star(None), 68usize),
                (Lexed::Start(None), 68usize),
                (Lexed::Token(None), 68usize),
                (Lexed::TokenType(None), 68usize),
                (Lexed::UserData(None), 68usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 68usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 69usize),
                (Lexed::BracketGroup(None), 69usize),
                (Lexed::Caret(None), 69usize),
                (Lexed::Colon(None), 69usize),
                (Lexed::EofDef(None), 69usize),
                (Lexed::Equal(None), 69usize),
                (Lexed::ErrorType(None), 69usize),
                (Lexed::Ident(None), 69usize),
                (Lexed::Left(None), 69usize),
                (Lexed::Literal(None), 69usize),
                (Lexed::Minus(None), 69usize),
                (Lexed::ModulePrefix(None), 69usize),
                (Lexed::OtherGroup(None), 69usize),
                (Lexed::OtherPunct(None), 69usize),
                (Lexed::ParenGroup(None), 69usize),
                (Lexed::Percent(None), 69usize),
                (Lexed::Pipe(None), 69usize),
                (Lexed::Plus(None), 69usize),
                (Lexed::Question(None), 69usize),
                (Lexed::Right(None), 69usize),
                (Lexed::Semicolon(None), 69usize),
                (Lexed::Star(None), 69usize),
                (Lexed::Start(None), 69usize),
                (Lexed::Token(None), 69usize),
                (Lexed::TokenType(None), 69usize),
                (Lexed::UserData(None), 69usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 69usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 70usize),
                (Lexed::BracketGroup(None), 70usize),
                (Lexed::Caret(None), 70usize),
                (Lexed::Colon(None), 70usize),
                (Lexed::EofDef(None), 70usize),
                (Lexed::Equal(None), 70usize),
                (Lexed::ErrorType(None), 70usize),
                (Lexed::Ident(None), 70usize),
                (Lexed::Left(None), 70usize),
                (Lexed::Literal(None), 70usize),
                (Lexed::Minus(None), 70usize),
                (Lexed::ModulePrefix(None), 70usize),
                (Lexed::OtherGroup(None), 70usize),
                (Lexed::OtherPunct(None), 70usize),
                (Lexed::ParenGroup(None), 70usize),
                (Lexed::Percent(None), 70usize),
                (Lexed::Pipe(None), 70usize),
                (Lexed::Plus(None), 70usize),
                (Lexed::Question(None), 70usize),
                (Lexed::Right(None), 70usize),
                (Lexed::Semicolon(None), 70usize),
                (Lexed::Star(None), 70usize),
                (Lexed::Start(None), 70usize),
                (Lexed::Token(None), 70usize),
                (Lexed::TokenType(None), 70usize),
                (Lexed::UserData(None), 70usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 70usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 71usize),
                (Lexed::BracketGroup(None), 71usize),
                (Lexed::Caret(None), 71usize),
                (Lexed::Colon(None), 71usize),
                (Lexed::EofDef(None), 71usize),
                (Lexed::Equal(None), 71usize),
                (Lexed::ErrorType(None), 71usize),
                (Lexed::Ident(None), 71usize),
                (Lexed::Left(None), 71usize),
                (Lexed::Literal(None), 71usize),
                (Lexed::Minus(None), 71usize),
                (Lexed::ModulePrefix(None), 71usize),
                (Lexed::OtherGroup(None), 71usize),
                (Lexed::OtherPunct(None), 71usize),
                (Lexed::ParenGroup(None), 71usize),
                (Lexed::Percent(None), 71usize),
                (Lexed::Pipe(None), 71usize),
                (Lexed::Plus(None), 71usize),
                (Lexed::Question(None), 71usize),
                (Lexed::Right(None), 71usize),
                (Lexed::Semicolon(None), 71usize),
                (Lexed::Star(None), 71usize),
                (Lexed::Start(None), 71usize),
                (Lexed::Token(None), 71usize),
                (Lexed::TokenType(None), 71usize),
                (Lexed::UserData(None), 71usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 71usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 72usize),
                (Lexed::BracketGroup(None), 72usize),
                (Lexed::Caret(None), 72usize),
                (Lexed::Colon(None), 72usize),
                (Lexed::EofDef(None), 72usize),
                (Lexed::Equal(None), 72usize),
                (Lexed::ErrorType(None), 72usize),
                (Lexed::Ident(None), 72usize),
                (Lexed::Left(None), 72usize),
                (Lexed::Literal(None), 72usize),
                (Lexed::Minus(None), 72usize),
                (Lexed::ModulePrefix(None), 72usize),
                (Lexed::OtherGroup(None), 72usize),
                (Lexed::OtherPunct(None), 72usize),
                (Lexed::ParenGroup(None), 72usize),
                (Lexed::Percent(None), 72usize),
                (Lexed::Pipe(None), 72usize),
                (Lexed::Plus(None), 72usize),
                (Lexed::Question(None), 72usize),
                (Lexed::Right(None), 72usize),
                (Lexed::Semicolon(None), 72usize),
                (Lexed::Star(None), 72usize),
                (Lexed::Start(None), 72usize),
                (Lexed::Token(None), 72usize),
                (Lexed::TokenType(None), 72usize),
                (Lexed::UserData(None), 72usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 72usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 73usize),
                (Lexed::BracketGroup(None), 73usize),
                (Lexed::Caret(None), 73usize),
                (Lexed::Colon(None), 73usize),
                (Lexed::EofDef(None), 73usize),
                (Lexed::Equal(None), 73usize),
                (Lexed::ErrorType(None), 73usize),
                (Lexed::Ident(None), 73usize),
                (Lexed::Left(None), 73usize),
                (Lexed::Literal(None), 73usize),
                (Lexed::Minus(None), 73usize),
                (Lexed::ModulePrefix(None), 73usize),
                (Lexed::OtherGroup(None), 73usize),
                (Lexed::OtherPunct(None), 73usize),
                (Lexed::ParenGroup(None), 73usize),
                (Lexed::Percent(None), 73usize),
                (Lexed::Pipe(None), 73usize),
                (Lexed::Plus(None), 73usize),
                (Lexed::Question(None), 73usize),
                (Lexed::Right(None), 73usize),
                (Lexed::Semicolon(None), 73usize),
                (Lexed::Star(None), 73usize),
                (Lexed::Start(None), 73usize),
                (Lexed::Token(None), 73usize),
                (Lexed::TokenType(None), 73usize),
                (Lexed::UserData(None), 73usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 73usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 74usize),
                (Lexed::BracketGroup(None), 74usize),
                (Lexed::Caret(None), 74usize),
                (Lexed::Colon(None), 74usize),
                (Lexed::EofDef(None), 74usize),
                (Lexed::Equal(None), 74usize),
                (Lexed::ErrorType(None), 74usize),
                (Lexed::Ident(None), 74usize),
                (Lexed::Left(None), 74usize),
                (Lexed::Literal(None), 74usize),
                (Lexed::Minus(None), 74usize),
                (Lexed::ModulePrefix(None), 74usize),
                (Lexed::OtherGroup(None), 74usize),
                (Lexed::OtherPunct(None), 74usize),
                (Lexed::ParenGroup(None), 74usize),
                (Lexed::Percent(None), 74usize),
                (Lexed::Pipe(None), 74usize),
                (Lexed::Plus(None), 74usize),
                (Lexed::Question(None), 74usize),
                (Lexed::Right(None), 74usize),
                (Lexed::Semicolon(None), 74usize),
                (Lexed::Star(None), 74usize),
                (Lexed::Start(None), 74usize),
                (Lexed::Token(None), 74usize),
                (Lexed::TokenType(None), 74usize),
                (Lexed::UserData(None), 74usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 74usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 75usize),
                (Lexed::BracketGroup(None), 75usize),
                (Lexed::Caret(None), 75usize),
                (Lexed::Colon(None), 75usize),
                (Lexed::EofDef(None), 75usize),
                (Lexed::Equal(None), 75usize),
                (Lexed::ErrorType(None), 75usize),
                (Lexed::Ident(None), 75usize),
                (Lexed::Left(None), 75usize),
                (Lexed::Literal(None), 75usize),
                (Lexed::Minus(None), 75usize),
                (Lexed::ModulePrefix(None), 75usize),
                (Lexed::OtherGroup(None), 75usize),
                (Lexed::OtherPunct(None), 75usize),
                (Lexed::ParenGroup(None), 75usize),
                (Lexed::Percent(None), 75usize),
                (Lexed::Pipe(None), 75usize),
                (Lexed::Plus(None), 75usize),
                (Lexed::Question(None), 75usize),
                (Lexed::Right(None), 75usize),
                (Lexed::Semicolon(None), 75usize),
                (Lexed::Star(None), 75usize),
                (Lexed::Start(None), 75usize),
                (Lexed::Token(None), 75usize),
                (Lexed::TokenType(None), 75usize),
                (Lexed::UserData(None), 75usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 75usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 28usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 2usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 2usize),
                (Lexed::EofDef(None), 2usize),
                (Lexed::ErrorType(None), 2usize),
                (Lexed::Ident(None), 2usize),
                (Lexed::Left(None), 2usize),
                (Lexed::ModulePrefix(None), 2usize),
                (Lexed::Right(None), 2usize),
                (Lexed::Start(None), 2usize),
                (Lexed::Token(None), 2usize),
                (Lexed::TokenType(None), 2usize),
                (Lexed::UserData(None), 2usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 2usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 2usize),
                (Lexed::BracketGroup(None), 3usize),
                (Lexed::Caret(None), 4usize),
                (Lexed::Colon(None), 5usize),
                (Lexed::EofDef(None), 6usize),
                (Lexed::Equal(None), 7usize),
                (Lexed::ErrorType(None), 8usize),
                (Lexed::Ident(None), 9usize),
                (Lexed::Left(None), 10usize),
                (Lexed::Literal(None), 11usize),
                (Lexed::Minus(None), 12usize),
                (Lexed::ModulePrefix(None), 13usize),
                (Lexed::OtherGroup(None), 14usize),
                (Lexed::OtherPunct(None), 15usize),
                (Lexed::ParenGroup(None), 16usize),
                (Lexed::Percent(None), 17usize),
                (Lexed::Pipe(None), 18usize),
                (Lexed::Plus(None), 19usize),
                (Lexed::Question(None), 20usize),
                (Lexed::Right(None), 21usize),
                (Lexed::Star(None), 22usize),
                (Lexed::Start(None), 23usize),
                (Lexed::Token(None), 24usize),
                (Lexed::TokenType(None), 25usize),
                (Lexed::UserData(None), 26usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([(
                GrammarNonTerminals::_RustyLRGenerated3,
                30usize,
            )]);
            let reduce_map = std::collections::HashMap::from([(Lexed::Semicolon(None), 38usize)]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 38usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_3.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 50usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 51usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 52usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 53usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 54usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 55usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 56usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 57usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 58usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 59usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 60usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 61usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 62usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 63usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 64usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 65usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 66usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 67usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 68usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 69usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 70usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 71usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 72usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 73usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 74usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 75usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 50usize),
                (Lexed::BracketGroup(None), 50usize),
                (Lexed::Caret(None), 50usize),
                (Lexed::Colon(None), 50usize),
                (Lexed::EofDef(None), 50usize),
                (Lexed::Equal(None), 50usize),
                (Lexed::ErrorType(None), 50usize),
                (Lexed::Ident(None), 50usize),
                (Lexed::Left(None), 50usize),
                (Lexed::Literal(None), 50usize),
                (Lexed::Minus(None), 50usize),
                (Lexed::ModulePrefix(None), 50usize),
                (Lexed::OtherGroup(None), 50usize),
                (Lexed::OtherPunct(None), 50usize),
                (Lexed::ParenGroup(None), 50usize),
                (Lexed::Percent(None), 50usize),
                (Lexed::Pipe(None), 50usize),
                (Lexed::Plus(None), 50usize),
                (Lexed::Question(None), 50usize),
                (Lexed::Right(None), 50usize),
                (Lexed::Semicolon(None), 50usize),
                (Lexed::Star(None), 50usize),
                (Lexed::Start(None), 50usize),
                (Lexed::Token(None), 50usize),
                (Lexed::TokenType(None), 50usize),
                (Lexed::UserData(None), 50usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 50usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 49usize),
                (Lexed::BracketGroup(None), 49usize),
                (Lexed::Caret(None), 49usize),
                (Lexed::Colon(None), 49usize),
                (Lexed::EofDef(None), 49usize),
                (Lexed::Equal(None), 49usize),
                (Lexed::ErrorType(None), 49usize),
                (Lexed::Ident(None), 49usize),
                (Lexed::Left(None), 49usize),
                (Lexed::Literal(None), 49usize),
                (Lexed::Minus(None), 49usize),
                (Lexed::ModulePrefix(None), 49usize),
                (Lexed::OtherGroup(None), 49usize),
                (Lexed::OtherPunct(None), 49usize),
                (Lexed::ParenGroup(None), 49usize),
                (Lexed::Percent(None), 49usize),
                (Lexed::Pipe(None), 49usize),
                (Lexed::Plus(None), 49usize),
                (Lexed::Question(None), 49usize),
                (Lexed::Right(None), 49usize),
                (Lexed::Semicolon(None), 49usize),
                (Lexed::Star(None), 49usize),
                (Lexed::Start(None), 49usize),
                (Lexed::Token(None), 49usize),
                (Lexed::TokenType(None), 49usize),
                (Lexed::UserData(None), 49usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 49usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_4.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 2usize),
                (Lexed::BracketGroup(None), 3usize),
                (Lexed::Caret(None), 4usize),
                (Lexed::Colon(None), 5usize),
                (Lexed::EofDef(None), 6usize),
                (Lexed::Equal(None), 7usize),
                (Lexed::ErrorType(None), 8usize),
                (Lexed::Ident(None), 9usize),
                (Lexed::Left(None), 10usize),
                (Lexed::Literal(None), 11usize),
                (Lexed::Minus(None), 12usize),
                (Lexed::ModulePrefix(None), 13usize),
                (Lexed::OtherGroup(None), 14usize),
                (Lexed::OtherPunct(None), 15usize),
                (Lexed::ParenGroup(None), 16usize),
                (Lexed::Percent(None), 17usize),
                (Lexed::Pipe(None), 18usize),
                (Lexed::Plus(None), 19usize),
                (Lexed::Question(None), 20usize),
                (Lexed::Right(None), 21usize),
                (Lexed::Star(None), 22usize),
                (Lexed::Start(None), 23usize),
                (Lexed::Token(None), 24usize),
                (Lexed::TokenType(None), 25usize),
                (Lexed::UserData(None), 26usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::RustCode, 33usize),
                (GrammarNonTerminals::_RustyLRGenerated2, 29usize),
                (GrammarNonTerminals::_RustyLRGenerated3, 31usize),
            ]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 3usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 38usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_3.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 49usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 50usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 51usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 52usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 53usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 54usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 55usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 56usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 57usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 58usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 59usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 60usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 61usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 62usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 63usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 64usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 65usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 66usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 67usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 68usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 69usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 70usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 71usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 72usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 73usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 74usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 75usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 34usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 3usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 3usize),
                (Lexed::EofDef(None), 3usize),
                (Lexed::ErrorType(None), 3usize),
                (Lexed::Ident(None), 3usize),
                (Lexed::Left(None), 3usize),
                (Lexed::ModulePrefix(None), 3usize),
                (Lexed::Right(None), 3usize),
                (Lexed::Start(None), 3usize),
                (Lexed::Token(None), 3usize),
                (Lexed::TokenType(None), 3usize),
                (Lexed::UserData(None), 3usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 3usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::ParenGroup(None), 36usize)]);
            let shift_goto_map_nonterm =
                std::collections::HashMap::from([(GrammarNonTerminals::RuleType, 37usize)]);
            let reduce_map = std::collections::HashMap::from([(Lexed::Colon(None), 37usize)]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 32usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 36usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_5.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 37usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_5.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([(Lexed::Colon(None), 36usize)]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 36usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_5.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Colon(None), 38usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 32usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BracketGroup(None), 39usize),
                (Lexed::Ident(None), 40usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::Pattern, 47usize),
                (GrammarNonTerminals::RuleLine, 48usize),
                (GrammarNonTerminals::RuleLines, 49usize),
                (GrammarNonTerminals::TokenMapped, 52usize),
                (GrammarNonTerminals::_RustyLRGenerated0, 53usize),
                (GrammarNonTerminals::_RustyLRGenerated1, 56usize),
            ]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 46usize),
                (Lexed::Pipe(None), 46usize),
                (Lexed::Semicolon(None), 46usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 23usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 24usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 25usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 26usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 27usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 32usize,
                            shifted: 3usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 33usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 34usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 35usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 41usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 42usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 45usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_9.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 46usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_9.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 47usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 48usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 27usize),
                (Lexed::BracketGroup(None), 27usize),
                (Lexed::Ident(None), 27usize),
                (Lexed::Pipe(None), 27usize),
                (Lexed::Plus(None), 27usize),
                (Lexed::Question(None), 27usize),
                (Lexed::Semicolon(None), 27usize),
                (Lexed::Star(None), 27usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 27usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_6.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Equal(None), 41usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 23usize),
                (Lexed::BracketGroup(None), 23usize),
                (Lexed::Ident(None), 23usize),
                (Lexed::Pipe(None), 23usize),
                (Lexed::Plus(None), 23usize),
                (Lexed::Question(None), 23usize),
                (Lexed::Semicolon(None), 23usize),
                (Lexed::Star(None), 23usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 23usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 42usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BracketGroup(None), 39usize),
                (Lexed::Ident(None), 42usize),
            ]);
            let shift_goto_map_nonterm =
                std::collections::HashMap::from([(GrammarNonTerminals::Pattern, 43usize)]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 23usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 24usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 25usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 26usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 27usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 42usize,
                            shifted: 2usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 23usize),
                (Lexed::BracketGroup(None), 23usize),
                (Lexed::Ident(None), 23usize),
                (Lexed::Pipe(None), 23usize),
                (Lexed::Plus(None), 23usize),
                (Lexed::Question(None), 23usize),
                (Lexed::Semicolon(None), 23usize),
                (Lexed::Star(None), 23usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 23usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_6.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::Plus(None), 44usize),
                (Lexed::Question(None), 45usize),
                (Lexed::Star(None), 46usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 42usize),
                (Lexed::BracketGroup(None), 42usize),
                (Lexed::Ident(None), 42usize),
                (Lexed::Pipe(None), 42usize),
                (Lexed::Semicolon(None), 42usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 24usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 25usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 26usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 42usize,
                            shifted: 3usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 24usize),
                (Lexed::BracketGroup(None), 24usize),
                (Lexed::Ident(None), 24usize),
                (Lexed::Pipe(None), 24usize),
                (Lexed::Plus(None), 24usize),
                (Lexed::Question(None), 24usize),
                (Lexed::Semicolon(None), 24usize),
                (Lexed::Star(None), 24usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 24usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_6.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 26usize),
                (Lexed::BracketGroup(None), 26usize),
                (Lexed::Ident(None), 26usize),
                (Lexed::Pipe(None), 26usize),
                (Lexed::Plus(None), 26usize),
                (Lexed::Question(None), 26usize),
                (Lexed::Semicolon(None), 26usize),
                (Lexed::Star(None), 26usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 26usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_6.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 25usize),
                (Lexed::BracketGroup(None), 25usize),
                (Lexed::Ident(None), 25usize),
                (Lexed::Pipe(None), 25usize),
                (Lexed::Plus(None), 25usize),
                (Lexed::Question(None), 25usize),
                (Lexed::Semicolon(None), 25usize),
                (Lexed::Star(None), 25usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 25usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_6.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::Plus(None), 44usize),
                (Lexed::Question(None), 45usize),
                (Lexed::Star(None), 46usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 41usize),
                (Lexed::BracketGroup(None), 41usize),
                (Lexed::Ident(None), 41usize),
                (Lexed::Pipe(None), 41usize),
                (Lexed::Semicolon(None), 41usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 24usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 25usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 26usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 41usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Pipe(None), 35usize),
                (Lexed::Semicolon(None), 35usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 35usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_7.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::Pipe(None), 50usize),
                (Lexed::Semicolon(None), 58usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 32usize,
                            shifted: 4usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 34usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BracketGroup(None), 39usize),
                (Lexed::Ident(None), 40usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::Pattern, 47usize),
                (GrammarNonTerminals::RuleLine, 51usize),
                (GrammarNonTerminals::TokenMapped, 52usize),
                (GrammarNonTerminals::_RustyLRGenerated0, 53usize),
                (GrammarNonTerminals::_RustyLRGenerated1, 56usize),
            ]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 46usize),
                (Lexed::Pipe(None), 46usize),
                (Lexed::Semicolon(None), 46usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 23usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 24usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 25usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 26usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 27usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 33usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 34usize,
                            shifted: 2usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 41usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 42usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 45usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_9.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 46usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_9.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 47usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 48usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Pipe(None), 34usize),
                (Lexed::Semicolon(None), 34usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 34usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_7.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 47usize),
                (Lexed::BracketGroup(None), 47usize),
                (Lexed::Ident(None), 47usize),
                (Lexed::Pipe(None), 47usize),
                (Lexed::Semicolon(None), 47usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 47usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_8.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::BraceGroup(None), 54usize)]);
            let shift_goto_map_nonterm =
                std::collections::HashMap::from([(GrammarNonTerminals::Action, 55usize)]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Pipe(None), 1usize),
                (Lexed::Semicolon(None), 1usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 0usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 1usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 33usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_7.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Pipe(None), 0usize),
                (Lexed::Semicolon(None), 0usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 0usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_7.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Pipe(None), 33usize),
                (Lexed::Semicolon(None), 33usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 33usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_7.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BracketGroup(None), 39usize),
                (Lexed::Ident(None), 40usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::Pattern, 47usize),
                (GrammarNonTerminals::TokenMapped, 57usize),
            ]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 45usize),
                (Lexed::Pipe(None), 45usize),
                (Lexed::Semicolon(None), 45usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 23usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 24usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 25usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 26usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 27usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_6.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 41usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 42usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 45usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_9.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 48usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_8.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 48usize),
                (Lexed::BracketGroup(None), 48usize),
                (Lexed::Ident(None), 48usize),
                (Lexed::Pipe(None), 48usize),
                (Lexed::Semicolon(None), 48usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 48usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_8.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 32usize),
                (Lexed::EofDef(None), 32usize),
                (Lexed::ErrorType(None), 32usize),
                (Lexed::Ident(None), 32usize),
                (Lexed::Left(None), 32usize),
                (Lexed::ModulePrefix(None), 32usize),
                (Lexed::Right(None), 32usize),
                (Lexed::Start(None), 32usize),
                (Lexed::Token(None), 32usize),
                (Lexed::TokenType(None), 32usize),
                (Lexed::UserData(None), 32usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 32usize,
                        shifted: 5usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BracketGroup(None), 30usize),
                (Lexed::Ident(None), 30usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 30usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_1.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 2usize),
                (Lexed::BracketGroup(None), 3usize),
                (Lexed::Caret(None), 4usize),
                (Lexed::Colon(None), 5usize),
                (Lexed::EofDef(None), 6usize),
                (Lexed::Equal(None), 7usize),
                (Lexed::ErrorType(None), 8usize),
                (Lexed::Ident(None), 9usize),
                (Lexed::Left(None), 10usize),
                (Lexed::Literal(None), 11usize),
                (Lexed::Minus(None), 12usize),
                (Lexed::ModulePrefix(None), 13usize),
                (Lexed::OtherGroup(None), 14usize),
                (Lexed::OtherPunct(None), 15usize),
                (Lexed::ParenGroup(None), 16usize),
                (Lexed::Percent(None), 17usize),
                (Lexed::Pipe(None), 18usize),
                (Lexed::Plus(None), 19usize),
                (Lexed::Question(None), 20usize),
                (Lexed::Right(None), 21usize),
                (Lexed::Star(None), 22usize),
                (Lexed::Start(None), 23usize),
                (Lexed::Token(None), 24usize),
                (Lexed::TokenType(None), 25usize),
                (Lexed::UserData(None), 26usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::RustCode, 61usize),
                (GrammarNonTerminals::_RustyLRGenerated2, 29usize),
                (GrammarNonTerminals::_RustyLRGenerated3, 31usize),
            ]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 22usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 38usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_3.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 49usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 50usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 51usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 52usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 53usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 54usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 55usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 56usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 57usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 58usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 59usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 60usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 61usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 62usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 63usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 64usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 65usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 66usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 67usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 68usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 69usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 70usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 71usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 72usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 73usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 74usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 75usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 62usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 22usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 22usize),
                (Lexed::EofDef(None), 22usize),
                (Lexed::ErrorType(None), 22usize),
                (Lexed::Ident(None), 22usize),
                (Lexed::Left(None), 22usize),
                (Lexed::ModulePrefix(None), 22usize),
                (Lexed::Right(None), 22usize),
                (Lexed::Start(None), 22usize),
                (Lexed::Token(None), 22usize),
                (Lexed::TokenType(None), 22usize),
                (Lexed::UserData(None), 22usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 22usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::BracketGroup(None), 31usize),
                (Lexed::Ident(None), 31usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 31usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_1.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Ident(None), 65usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 39usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 66usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 39usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 39usize),
                (Lexed::EofDef(None), 39usize),
                (Lexed::ErrorType(None), 39usize),
                (Lexed::Ident(None), 39usize),
                (Lexed::Left(None), 39usize),
                (Lexed::ModulePrefix(None), 39usize),
                (Lexed::Right(None), 39usize),
                (Lexed::Start(None), 39usize),
                (Lexed::Token(None), 39usize),
                (Lexed::TokenType(None), 39usize),
                (Lexed::UserData(None), 39usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 39usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Ident(None), 68usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 40usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 2usize),
                (Lexed::BracketGroup(None), 3usize),
                (Lexed::Caret(None), 4usize),
                (Lexed::Colon(None), 5usize),
                (Lexed::EofDef(None), 6usize),
                (Lexed::Equal(None), 7usize),
                (Lexed::ErrorType(None), 8usize),
                (Lexed::Ident(None), 9usize),
                (Lexed::Left(None), 10usize),
                (Lexed::Literal(None), 11usize),
                (Lexed::Minus(None), 12usize),
                (Lexed::ModulePrefix(None), 13usize),
                (Lexed::OtherGroup(None), 14usize),
                (Lexed::OtherPunct(None), 15usize),
                (Lexed::ParenGroup(None), 16usize),
                (Lexed::Percent(None), 17usize),
                (Lexed::Pipe(None), 18usize),
                (Lexed::Plus(None), 19usize),
                (Lexed::Question(None), 20usize),
                (Lexed::Right(None), 21usize),
                (Lexed::Star(None), 22usize),
                (Lexed::Start(None), 23usize),
                (Lexed::Token(None), 24usize),
                (Lexed::TokenType(None), 25usize),
                (Lexed::UserData(None), 26usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::RustCode, 69usize),
                (GrammarNonTerminals::_RustyLRGenerated2, 29usize),
                (GrammarNonTerminals::_RustyLRGenerated3, 31usize),
            ]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 38usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_3.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 40usize,
                            shifted: 2usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 49usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 50usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 51usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 52usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 53usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 54usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 55usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 56usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 57usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 58usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 59usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 60usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 61usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 62usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 63usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 64usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 65usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 66usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 67usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 68usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 69usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 70usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 71usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 72usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 73usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 74usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 75usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 70usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 40usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 40usize),
                (Lexed::EofDef(None), 40usize),
                (Lexed::ErrorType(None), 40usize),
                (Lexed::Ident(None), 40usize),
                (Lexed::Left(None), 40usize),
                (Lexed::ModulePrefix(None), 40usize),
                (Lexed::Right(None), 40usize),
                (Lexed::Start(None), 40usize),
                (Lexed::Token(None), 40usize),
                (Lexed::TokenType(None), 40usize),
                (Lexed::UserData(None), 40usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 40usize,
                        shifted: 4usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 2usize),
                (Lexed::BracketGroup(None), 3usize),
                (Lexed::Caret(None), 4usize),
                (Lexed::Colon(None), 5usize),
                (Lexed::EofDef(None), 6usize),
                (Lexed::Equal(None), 7usize),
                (Lexed::ErrorType(None), 8usize),
                (Lexed::Ident(None), 9usize),
                (Lexed::Left(None), 10usize),
                (Lexed::Literal(None), 11usize),
                (Lexed::Minus(None), 12usize),
                (Lexed::ModulePrefix(None), 13usize),
                (Lexed::OtherGroup(None), 14usize),
                (Lexed::OtherPunct(None), 15usize),
                (Lexed::ParenGroup(None), 16usize),
                (Lexed::Percent(None), 17usize),
                (Lexed::Pipe(None), 18usize),
                (Lexed::Plus(None), 19usize),
                (Lexed::Question(None), 20usize),
                (Lexed::Right(None), 21usize),
                (Lexed::Star(None), 22usize),
                (Lexed::Start(None), 23usize),
                (Lexed::Token(None), 24usize),
                (Lexed::TokenType(None), 25usize),
                (Lexed::UserData(None), 26usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::RustCode, 72usize),
                (GrammarNonTerminals::_RustyLRGenerated2, 29usize),
                (GrammarNonTerminals::_RustyLRGenerated3, 31usize),
            ]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 38usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_3.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 43usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 49usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 50usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 51usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 52usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 53usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 54usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 55usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 56usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 57usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 58usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 59usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 60usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 61usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 62usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 63usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 64usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 65usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 66usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 67usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 68usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 69usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 70usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 71usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 72usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 73usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 74usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 75usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 73usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 43usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 43usize),
                (Lexed::EofDef(None), 43usize),
                (Lexed::ErrorType(None), 43usize),
                (Lexed::Ident(None), 43usize),
                (Lexed::Left(None), 43usize),
                (Lexed::ModulePrefix(None), 43usize),
                (Lexed::Right(None), 43usize),
                (Lexed::Start(None), 43usize),
                (Lexed::Token(None), 43usize),
                (Lexed::TokenType(None), 43usize),
                (Lexed::UserData(None), 43usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 43usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BraceGroup(None), 2usize),
                (Lexed::BracketGroup(None), 3usize),
                (Lexed::Caret(None), 4usize),
                (Lexed::Colon(None), 5usize),
                (Lexed::EofDef(None), 6usize),
                (Lexed::Equal(None), 7usize),
                (Lexed::ErrorType(None), 8usize),
                (Lexed::Ident(None), 9usize),
                (Lexed::Left(None), 10usize),
                (Lexed::Literal(None), 11usize),
                (Lexed::Minus(None), 12usize),
                (Lexed::ModulePrefix(None), 13usize),
                (Lexed::OtherGroup(None), 14usize),
                (Lexed::OtherPunct(None), 15usize),
                (Lexed::ParenGroup(None), 16usize),
                (Lexed::Percent(None), 17usize),
                (Lexed::Pipe(None), 18usize),
                (Lexed::Plus(None), 19usize),
                (Lexed::Question(None), 20usize),
                (Lexed::Right(None), 21usize),
                (Lexed::Star(None), 22usize),
                (Lexed::Start(None), 23usize),
                (Lexed::Token(None), 24usize),
                (Lexed::TokenType(None), 25usize),
                (Lexed::UserData(None), 26usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::RustCode, 75usize),
                (GrammarNonTerminals::_RustyLRGenerated2, 29usize),
                (GrammarNonTerminals::_RustyLRGenerated3, 31usize),
            ]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 38usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_3.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 44usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 49usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 50usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 51usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 52usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 53usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 54usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 55usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 56usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 57usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 58usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 59usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 60usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 61usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 62usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 63usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 64usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 65usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 66usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 67usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 68usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 69usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 70usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 71usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 72usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 73usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 74usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 75usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_4.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 76usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 44usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 44usize),
                (Lexed::EofDef(None), 44usize),
                (Lexed::ErrorType(None), 44usize),
                (Lexed::Ident(None), 44usize),
                (Lexed::Left(None), 44usize),
                (Lexed::ModulePrefix(None), 44usize),
                (Lexed::Right(None), 44usize),
                (Lexed::Start(None), 44usize),
                (Lexed::Token(None), 44usize),
                (Lexed::TokenType(None), 44usize),
                (Lexed::UserData(None), 44usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 44usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 11usize),
                (Lexed::EofDef(None), 11usize),
                (Lexed::ErrorType(None), 11usize),
                (Lexed::Ident(None), 11usize),
                (Lexed::Left(None), 11usize),
                (Lexed::ModulePrefix(None), 11usize),
                (Lexed::Right(None), 11usize),
                (Lexed::Start(None), 11usize),
                (Lexed::Token(None), 11usize),
                (Lexed::TokenType(None), 11usize),
                (Lexed::UserData(None), 11usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 11usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 19usize),
                (Lexed::EofDef(None), 19usize),
                (Lexed::ErrorType(None), 19usize),
                (Lexed::Ident(None), 19usize),
                (Lexed::Left(None), 19usize),
                (Lexed::ModulePrefix(None), 19usize),
                (Lexed::Right(None), 19usize),
                (Lexed::Start(None), 19usize),
                (Lexed::Token(None), 19usize),
                (Lexed::TokenType(None), 19usize),
                (Lexed::UserData(None), 19usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 19usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::Eof, 80usize),
                (Lexed::EofDef(None), 1usize),
                (Lexed::ErrorType(None), 32usize),
                (Lexed::Ident(None), 35usize),
                (Lexed::Left(None), 59usize),
                (Lexed::ModulePrefix(None), 60usize),
                (Lexed::Right(None), 63usize),
                (Lexed::Start(None), 64usize),
                (Lexed::Token(None), 67usize),
                (Lexed::TokenType(None), 71usize),
                (Lexed::UserData(None), 74usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([
                (GrammarNonTerminals::EofDef, 81usize),
                (GrammarNonTerminals::ErrorDef, 82usize),
                (GrammarNonTerminals::ModulePrefixDef, 83usize),
                (GrammarNonTerminals::ReduceDef, 84usize),
                (GrammarNonTerminals::ReduceType, 85usize),
                (GrammarNonTerminals::Rule, 90usize),
                (GrammarNonTerminals::StartDef, 91usize),
                (GrammarNonTerminals::TokenDef, 92usize),
                (GrammarNonTerminals::TokenTypeDef, 93usize),
                (GrammarNonTerminals::UserDataDef, 94usize),
            ]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 2usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 3usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 4usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 6usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 8usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 10usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 12usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 14usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 16usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 18usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 20usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 22usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 28usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 29usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 30usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_1.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 31usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_1.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 32usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 39usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 40usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 43usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 44usize,
                            shifted: 0usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 76usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_2.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 76usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_2.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 10usize),
                (Lexed::EofDef(None), 10usize),
                (Lexed::ErrorType(None), 10usize),
                (Lexed::Ident(None), 10usize),
                (Lexed::Left(None), 10usize),
                (Lexed::ModulePrefix(None), 10usize),
                (Lexed::Right(None), 10usize),
                (Lexed::Start(None), 10usize),
                (Lexed::Token(None), 10usize),
                (Lexed::TokenType(None), 10usize),
                (Lexed::UserData(None), 10usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 10usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 18usize),
                (Lexed::EofDef(None), 18usize),
                (Lexed::ErrorType(None), 18usize),
                (Lexed::Ident(None), 18usize),
                (Lexed::Left(None), 18usize),
                (Lexed::ModulePrefix(None), 18usize),
                (Lexed::Right(None), 18usize),
                (Lexed::Start(None), 18usize),
                (Lexed::Token(None), 18usize),
                (Lexed::TokenType(None), 18usize),
                (Lexed::UserData(None), 18usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 18usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 20usize),
                (Lexed::EofDef(None), 20usize),
                (Lexed::ErrorType(None), 20usize),
                (Lexed::Ident(None), 20usize),
                (Lexed::Left(None), 20usize),
                (Lexed::ModulePrefix(None), 20usize),
                (Lexed::Right(None), 20usize),
                (Lexed::Start(None), 20usize),
                (Lexed::Token(None), 20usize),
                (Lexed::TokenType(None), 20usize),
                (Lexed::UserData(None), 20usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 20usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 16usize),
                (Lexed::EofDef(None), 16usize),
                (Lexed::ErrorType(None), 16usize),
                (Lexed::Ident(None), 16usize),
                (Lexed::Left(None), 16usize),
                (Lexed::ModulePrefix(None), 16usize),
                (Lexed::Right(None), 16usize),
                (Lexed::Start(None), 16usize),
                (Lexed::Token(None), 16usize),
                (Lexed::TokenType(None), 16usize),
                (Lexed::UserData(None), 16usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 16usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([
                (Lexed::BracketGroup(None), 86usize),
                (Lexed::Ident(None), 88usize),
            ]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 28usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                    (
                        ::rusty_lr_core::ShiftedRuleRef {
                            rule: 29usize,
                            shifted: 1usize,
                        },
                        rustylr_macrogenerated_lookaheads_0.clone(),
                    ),
                ]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 87usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 29usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 29usize),
                (Lexed::EofDef(None), 29usize),
                (Lexed::ErrorType(None), 29usize),
                (Lexed::Ident(None), 29usize),
                (Lexed::Left(None), 29usize),
                (Lexed::ModulePrefix(None), 29usize),
                (Lexed::Right(None), 29usize),
                (Lexed::Start(None), 29usize),
                (Lexed::Token(None), 29usize),
                (Lexed::TokenType(None), 29usize),
                (Lexed::UserData(None), 29usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 29usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term =
                std::collections::HashMap::from([(Lexed::Semicolon(None), 89usize)]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 28usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 28usize),
                (Lexed::EofDef(None), 28usize),
                (Lexed::ErrorType(None), 28usize),
                (Lexed::Ident(None), 28usize),
                (Lexed::Left(None), 28usize),
                (Lexed::ModulePrefix(None), 28usize),
                (Lexed::Right(None), 28usize),
                (Lexed::Start(None), 28usize),
                (Lexed::Token(None), 28usize),
                (Lexed::TokenType(None), 28usize),
                (Lexed::UserData(None), 28usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 28usize,
                        shifted: 3usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 4usize),
                (Lexed::EofDef(None), 4usize),
                (Lexed::ErrorType(None), 4usize),
                (Lexed::Ident(None), 4usize),
                (Lexed::Left(None), 4usize),
                (Lexed::ModulePrefix(None), 4usize),
                (Lexed::Right(None), 4usize),
                (Lexed::Start(None), 4usize),
                (Lexed::Token(None), 4usize),
                (Lexed::TokenType(None), 4usize),
                (Lexed::UserData(None), 4usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 4usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 8usize),
                (Lexed::EofDef(None), 8usize),
                (Lexed::ErrorType(None), 8usize),
                (Lexed::Ident(None), 8usize),
                (Lexed::Left(None), 8usize),
                (Lexed::ModulePrefix(None), 8usize),
                (Lexed::Right(None), 8usize),
                (Lexed::Start(None), 8usize),
                (Lexed::Token(None), 8usize),
                (Lexed::TokenType(None), 8usize),
                (Lexed::UserData(None), 8usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 8usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 6usize),
                (Lexed::EofDef(None), 6usize),
                (Lexed::ErrorType(None), 6usize),
                (Lexed::Ident(None), 6usize),
                (Lexed::Left(None), 6usize),
                (Lexed::ModulePrefix(None), 6usize),
                (Lexed::Right(None), 6usize),
                (Lexed::Start(None), 6usize),
                (Lexed::Token(None), 6usize),
                (Lexed::TokenType(None), 6usize),
                (Lexed::UserData(None), 6usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 6usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 12usize),
                (Lexed::EofDef(None), 12usize),
                (Lexed::ErrorType(None), 12usize),
                (Lexed::Ident(None), 12usize),
                (Lexed::Left(None), 12usize),
                (Lexed::ModulePrefix(None), 12usize),
                (Lexed::Right(None), 12usize),
                (Lexed::Start(None), 12usize),
                (Lexed::Token(None), 12usize),
                (Lexed::TokenType(None), 12usize),
                (Lexed::UserData(None), 12usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 12usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 14usize),
                (Lexed::EofDef(None), 14usize),
                (Lexed::ErrorType(None), 14usize),
                (Lexed::Ident(None), 14usize),
                (Lexed::Left(None), 14usize),
                (Lexed::ModulePrefix(None), 14usize),
                (Lexed::Right(None), 14usize),
                (Lexed::Start(None), 14usize),
                (Lexed::Token(None), 14usize),
                (Lexed::TokenType(None), 14usize),
                (Lexed::UserData(None), 14usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 14usize,
                        shifted: 2usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 21usize),
                (Lexed::EofDef(None), 21usize),
                (Lexed::ErrorType(None), 21usize),
                (Lexed::Ident(None), 21usize),
                (Lexed::Left(None), 21usize),
                (Lexed::ModulePrefix(None), 21usize),
                (Lexed::Right(None), 21usize),
                (Lexed::Start(None), 21usize),
                (Lexed::Token(None), 21usize),
                (Lexed::TokenType(None), 21usize),
                (Lexed::UserData(None), 21usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 21usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 17usize),
                (Lexed::EofDef(None), 17usize),
                (Lexed::ErrorType(None), 17usize),
                (Lexed::Ident(None), 17usize),
                (Lexed::Left(None), 17usize),
                (Lexed::ModulePrefix(None), 17usize),
                (Lexed::Right(None), 17usize),
                (Lexed::Start(None), 17usize),
                (Lexed::Token(None), 17usize),
                (Lexed::TokenType(None), 17usize),
                (Lexed::UserData(None), 17usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 17usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 5usize),
                (Lexed::EofDef(None), 5usize),
                (Lexed::ErrorType(None), 5usize),
                (Lexed::Ident(None), 5usize),
                (Lexed::Left(None), 5usize),
                (Lexed::ModulePrefix(None), 5usize),
                (Lexed::Right(None), 5usize),
                (Lexed::Start(None), 5usize),
                (Lexed::Token(None), 5usize),
                (Lexed::TokenType(None), 5usize),
                (Lexed::UserData(None), 5usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 5usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 9usize),
                (Lexed::EofDef(None), 9usize),
                (Lexed::ErrorType(None), 9usize),
                (Lexed::Ident(None), 9usize),
                (Lexed::Left(None), 9usize),
                (Lexed::ModulePrefix(None), 9usize),
                (Lexed::Right(None), 9usize),
                (Lexed::Start(None), 9usize),
                (Lexed::Token(None), 9usize),
                (Lexed::TokenType(None), 9usize),
                (Lexed::UserData(None), 9usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 9usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 7usize),
                (Lexed::EofDef(None), 7usize),
                (Lexed::ErrorType(None), 7usize),
                (Lexed::Ident(None), 7usize),
                (Lexed::Left(None), 7usize),
                (Lexed::ModulePrefix(None), 7usize),
                (Lexed::Right(None), 7usize),
                (Lexed::Start(None), 7usize),
                (Lexed::Token(None), 7usize),
                (Lexed::TokenType(None), 7usize),
                (Lexed::UserData(None), 7usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 7usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 13usize),
                (Lexed::EofDef(None), 13usize),
                (Lexed::ErrorType(None), 13usize),
                (Lexed::Ident(None), 13usize),
                (Lexed::Left(None), 13usize),
                (Lexed::ModulePrefix(None), 13usize),
                (Lexed::Right(None), 13usize),
                (Lexed::Start(None), 13usize),
                (Lexed::Token(None), 13usize),
                (Lexed::TokenType(None), 13usize),
                (Lexed::UserData(None), 13usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 13usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        {
            let shift_goto_map_term = std::collections::HashMap::from([]);
            let shift_goto_map_nonterm = std::collections::HashMap::from([]);
            let reduce_map = std::collections::HashMap::from([
                (Lexed::Eof, 15usize),
                (Lexed::EofDef(None), 15usize),
                (Lexed::ErrorType(None), 15usize),
                (Lexed::Ident(None), 15usize),
                (Lexed::Left(None), 15usize),
                (Lexed::ModulePrefix(None), 15usize),
                (Lexed::Right(None), 15usize),
                (Lexed::Start(None), 15usize),
                (Lexed::Token(None), 15usize),
                (Lexed::TokenType(None), 15usize),
                (Lexed::UserData(None), 15usize),
            ]);
            let ruleset = ::rusty_lr_core::LookaheadRuleRefSet {
                rules: std::collections::BTreeMap::from([(
                    ::rusty_lr_core::ShiftedRuleRef {
                        rule: 15usize,
                        shifted: 1usize,
                    },
                    rustylr_macrogenerated_lookaheads_0.clone(),
                )]),
            };
            let state = ::rusty_lr_core::State {
                shift_goto_map_term,
                shift_goto_map_nonterm,
                reduce_map,
                ruleset,
            };
            states.push(state);
        }
        Self { rules, states }
    }
    #[doc = r" give lookahead token to parser, and check if there is any reduce action"]
    fn lookahead<'a, C: ::rusty_lr_core::Callback<Lexed, GrammarNonTerminals>>(
        &'a self,
        context: &mut GrammarContext,
        callback: &mut C,
        term: &Lexed,
    ) -> Result<(), ::rusty_lr_core::ParseError<'a, Lexed, GrammarNonTerminals, C::Error, ParseError>>
    {
        let state = &self.states[*context
            .state_stack
            .last()
            .expect("Something wrong! state_stack is empty")];
        if let Some(reduce_rule) = state.reduce(term) {
            let rule = &self.rules[reduce_rule];
            if context.state_stack.len() < rule.rule.len() {
                panic!(
                    "State stack not enough for reduce: {:?}",
                    context.state_stack
                );
            }
            context
                .state_stack
                .truncate(context.state_stack.len() - rule.rule.len());
            context
                .reduce(self.rules[reduce_rule].rule.len(), reduce_rule)
                .map_err(|e| ::rusty_lr_core::ParseError::ReduceAction(e))?;
            callback
                .reduce(&self.rules, &self.states, &context.state_stack, reduce_rule)
                .map_err(|e| ::rusty_lr_core::ParseError::Callback(e))?;
            self.feed_nonterm(context, callback, &rule.name)?;
            self.lookahead(context, callback, term)?;
        }
        Ok(())
    }
    #[doc = r" feed one terminal to parser, and update state stack"]
    pub fn feed<'a>(
        &'a self,
        context: &mut GrammarContext,
        term: Lexed,
    ) -> Result<(), ::rusty_lr_core::ParseError<'a, Lexed, GrammarNonTerminals, u8, ParseError>>
    {
        self.feed_callback(context, &mut ::rusty_lr_core::DefaultCallback {}, term)
    }
    #[doc = r" feed one terminal to parser, and update state stack"]
    pub fn feed_callback<'a, C: ::rusty_lr_core::Callback<Lexed, GrammarNonTerminals>>(
        &'a self,
        context: &mut GrammarContext,
        callback: &mut C,
        term: Lexed,
    ) -> Result<(), ::rusty_lr_core::ParseError<'a, Lexed, GrammarNonTerminals, C::Error, ParseError>>
    {
        self.lookahead(context, callback, &term)?;
        let state = &self.states[*context
            .state_stack
            .last()
            .expect("Something wrong! state_stack is empty")];
        if let Some(next_state_id) = state.shift_goto_term(&term) {
            context.state_stack.push(next_state_id);
            callback
                .shift_and_goto(&self.rules, &self.states, &context.state_stack, &term)
                .map_err(|e| ::rusty_lr_core::ParseError::Callback(e))?;
            context.push(term);
            Ok(())
        } else {
            Err(::rusty_lr_core::ParseError::InvalidTerminal(
                term,
                &self.rules,
                &self.states,
                context.state_stack.clone(),
            ))
        }
    }
    #[doc = r" feed one non-terminal to parser, and update state stack"]
    fn feed_nonterm<'a, C: ::rusty_lr_core::Callback<Lexed, GrammarNonTerminals>>(
        &'a self,
        context: &mut GrammarContext,
        callback: &mut C,
        nonterm: &'a GrammarNonTerminals,
    ) -> Result<(), ::rusty_lr_core::ParseError<'a, Lexed, GrammarNonTerminals, C::Error, ParseError>>
    {
        let state = &self.states[*context
            .state_stack
            .last()
            .expect("Something wrong! state_stack is empty")];
        if let Some(next_state_id) = state.shift_goto_nonterm(nonterm) {
            context.state_stack.push(next_state_id);
            callback
                .shift_and_goto_nonterm(&self.rules, &self.states, &context.state_stack, nonterm)
                .map_err(|e| ::rusty_lr_core::ParseError::Callback(e))?;
            Ok(())
        } else {
            Err(::rusty_lr_core::ParseError::InvalidNonTerminal(
                nonterm,
                &self.rules,
                &self.states,
                context.state_stack.clone(),
            ))
        }
    }
    pub fn begin(&self) -> GrammarContext {
        GrammarContext::new()
    }
}
// ==============================Generated Codes End===============================
