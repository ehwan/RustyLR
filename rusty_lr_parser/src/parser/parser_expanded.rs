// This file was generated by rustylr 1.0.11
//
// Input file: src/parser/parser.rs
// Output file: out.tab.rs
// ================================User Codes Begin================================
use crate::parser::args::GrammarArgs;
use crate::parser::args::PatternArgs;
use crate::parser::args::RuleDefArgs;
use crate::parser::args::RuleLineArgs;
use crate::parser::args::TerminalOrTerminalSet;
use crate::parser::lexer::Lexed;
use crate::terminalset::TerminalSet;
use crate::terminalset::TerminalSetItem;
use proc_macro2::Group;
use proc_macro2::Ident;
use proc_macro2::Literal;
use proc_macro2::Punct;
use proc_macro2::Spacing;
use proc_macro2::Span;
use proc_macro2::TokenStream;
use quote::ToTokens;
use rusty_lr_core::ReduceType;
use std::boxed::Box;
macro_rules ! punct (($ l : literal) => { Punct :: new ($ l , Spacing :: Alone) } ;) ;
// =================================User Codes End=================================
/*
====================================Grammar=====================================
Rule -> ident RuleType colon RuleLines semicolon
RuleType -> parengroup
RuleType ->
RuleLines -> RuleLines pipe RuleLine
RuleLines -> RuleLine
RuleLine -> TokenMapped* Action
TokenMapped -> Pattern
TokenMapped -> ident equal Pattern
TerminalSetItem -> ident
TerminalSetItem -> ident minus ident
TerminalSetItem -> literal
TerminalSetItem -> literal minus literal
TerminalSet -> lbracket caret? TerminalSetItem* rbracket
Pattern -> ident
Pattern -> Pattern plus
Pattern -> Pattern star
Pattern -> Pattern question
Pattern -> Pattern exclamation
Pattern -> TerminalSet
Pattern -> Pattern slash TerminalOrTerminalSet
Pattern -> lparen Pattern+ rparen
Pattern -> literal
Action -> bracegroup
Action ->
TokenDef -> token ident RustCode semicolon
RustCode -> [^semicolon, lparen-glr]+
StartDef -> start ident semicolon
EofDef -> eofdef RustCode semicolon
TokenTypeDef -> tokentype RustCode semicolon
UserDataDef -> userdata RustCode semicolon
TerminalOrTerminalSet -> TerminalSet
TerminalOrTerminalSet -> ident
TerminalOrTerminalSet -> literal
ReduceType -> left
ReduceType -> right
ReduceDef -> ReduceType TerminalOrTerminalSet semicolon
ErrorDef -> errortype RustCode semicolon
ModulePrefixDef -> moduleprefix RustCode semicolon
Glr -> glr semicolon
Lalr -> lalr semicolon
GrammarLine -> Rule
GrammarLine -> TokenDef
GrammarLine -> StartDef
GrammarLine -> EofDef
GrammarLine -> TokenTypeDef
GrammarLine -> UserDataDef
GrammarLine -> ReduceDef
GrammarLine -> ErrorDef
GrammarLine -> ModulePrefixDef
GrammarLine -> Lalr
GrammarLine -> Glr
Grammar -> GrammarLine+
TokenMapped+ -> TokenMapped
TokenMapped+ -> TokenMapped+ TokenMapped
TokenMapped* -> TokenMapped+
TokenMapped* ->
caret? -> caret
caret? ->
TerminalSetItem+ -> TerminalSetItem
TerminalSetItem+ -> TerminalSetItem+ TerminalSetItem
TerminalSetItem* -> TerminalSetItem+
TerminalSetItem* ->
Pattern+ -> Pattern
Pattern+ -> Pattern+ Pattern
[^semicolon, lparen-glr] -> ident
[^semicolon, lparen-glr] -> colon
[^semicolon, lparen-glr] -> pipe
[^semicolon, lparen-glr] -> percent
[^semicolon, lparen-glr] -> equal
[^semicolon, lparen-glr] -> plus
[^semicolon, lparen-glr] -> star
[^semicolon, lparen-glr] -> question
[^semicolon, lparen-glr] -> caret
[^semicolon, lparen-glr] -> minus
[^semicolon, lparen-glr] -> exclamation
[^semicolon, lparen-glr] -> slash
[^semicolon, lparen-glr] -> otherpunct
[^semicolon, lparen-glr] -> literal
[^semicolon, lparen-glr] -> parengroup
[^semicolon, lparen-glr] -> bracegroup
[^semicolon, lparen-glr] -> bracketgroup
[^semicolon, lparen-glr] -> nonegroup
[^semicolon, lparen-glr]+ -> [^semicolon, lparen-glr]
[^semicolon, lparen-glr]+ -> [^semicolon, lparen-glr]+ [^semicolon, lparen-glr]
GrammarLine+ -> GrammarLine
GrammarLine+ -> GrammarLine GrammarLine+
Augmented -> Grammar eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for `Context`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarContext = ::rusty_lr_core::lr::Context<GrammarStack>;
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarRule = ::rusty_lr_core::ProductionRule<Lexed, GrammarNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarState = ::rusty_lr_core::lr::State<Lexed, GrammarNonTerminals>;
#[doc = r" type alias for `ParseError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarParseError = ::rusty_lr_core::lr::ParseError<
    Lexed,
    GrammarNonTerminals,
    ::rusty_lr_core::DefaultReduceActionError,
>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type GrammarInvalidTerminalError =
    ::rusty_lr_core::lr::InvalidTerminalError<Lexed, GrammarNonTerminals>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types)]
#[derive(
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum GrammarNonTerminals {
    Rule,
    RuleType,
    RuleLines,
    RuleLine,
    TokenMapped,
    TerminalSetItem,
    TerminalSet,
    Pattern,
    Action,
    TokenDef,
    RustCode,
    StartDef,
    EofDef,
    TokenTypeDef,
    UserDataDef,
    TerminalOrTerminalSet,
    ReduceType,
    ReduceDef,
    ErrorDef,
    ModulePrefixDef,
    Glr,
    Lalr,
    GrammarLine,
    Grammar,
    _TokenMapped_Plus24,
    _TokenMapped_Star25,
    _caret_Question26,
    _TerminalSetItem_Plus27,
    _TerminalSetItem_Star28,
    _Pattern_Plus29,
    _TerminalSet30,
    __TerminalSet30_Plus31,
    _GrammarLine_Plus32,
    Augmented,
}
impl std::fmt::Display for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrammarNonTerminals::Rule => write!(f, "Rule"),
            GrammarNonTerminals::RuleType => write!(f, "RuleType"),
            GrammarNonTerminals::RuleLines => write!(f, "RuleLines"),
            GrammarNonTerminals::RuleLine => write!(f, "RuleLine"),
            GrammarNonTerminals::TokenMapped => write!(f, "TokenMapped"),
            GrammarNonTerminals::TerminalSetItem => write!(f, "TerminalSetItem"),
            GrammarNonTerminals::TerminalSet => write!(f, "TerminalSet"),
            GrammarNonTerminals::Pattern => write!(f, "Pattern"),
            GrammarNonTerminals::Action => write!(f, "Action"),
            GrammarNonTerminals::TokenDef => write!(f, "TokenDef"),
            GrammarNonTerminals::RustCode => write!(f, "RustCode"),
            GrammarNonTerminals::StartDef => write!(f, "StartDef"),
            GrammarNonTerminals::EofDef => write!(f, "EofDef"),
            GrammarNonTerminals::TokenTypeDef => write!(f, "TokenTypeDef"),
            GrammarNonTerminals::UserDataDef => write!(f, "UserDataDef"),
            GrammarNonTerminals::TerminalOrTerminalSet => write!(f, "TerminalOrTerminalSet"),
            GrammarNonTerminals::ReduceType => write!(f, "ReduceType"),
            GrammarNonTerminals::ReduceDef => write!(f, "ReduceDef"),
            GrammarNonTerminals::ErrorDef => write!(f, "ErrorDef"),
            GrammarNonTerminals::ModulePrefixDef => write!(f, "ModulePrefixDef"),
            GrammarNonTerminals::Glr => write!(f, "Glr"),
            GrammarNonTerminals::Lalr => write!(f, "Lalr"),
            GrammarNonTerminals::GrammarLine => write!(f, "GrammarLine"),
            GrammarNonTerminals::Grammar => write!(f, "Grammar"),
            GrammarNonTerminals::_TokenMapped_Plus24 => write!(f, "TokenMapped+"),
            GrammarNonTerminals::_TokenMapped_Star25 => write!(f, "TokenMapped*"),
            GrammarNonTerminals::_caret_Question26 => write!(f, "caret?"),
            GrammarNonTerminals::_TerminalSetItem_Plus27 => write!(f, "TerminalSetItem+"),
            GrammarNonTerminals::_TerminalSetItem_Star28 => write!(f, "TerminalSetItem*"),
            GrammarNonTerminals::_Pattern_Plus29 => write!(f, "Pattern+"),
            GrammarNonTerminals::_TerminalSet30 => write!(f, "[^semicolon, lparen-glr]"),
            GrammarNonTerminals::__TerminalSet30_Plus31 => write!(f, "[^semicolon, lparen-glr]+"),
            GrammarNonTerminals::_GrammarLine_Plus32 => write!(f, "GrammarLine+"),
            GrammarNonTerminals::Augmented => write!(f, "Augmented"),
        }
    }
}
impl std::fmt::Debug for GrammarNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrammarNonTerminals::Rule => write!(f, "Rule"),
            GrammarNonTerminals::RuleType => write!(f, "RuleType"),
            GrammarNonTerminals::RuleLines => write!(f, "RuleLines"),
            GrammarNonTerminals::RuleLine => write!(f, "RuleLine"),
            GrammarNonTerminals::TokenMapped => write!(f, "TokenMapped"),
            GrammarNonTerminals::TerminalSetItem => write!(f, "TerminalSetItem"),
            GrammarNonTerminals::TerminalSet => write!(f, "TerminalSet"),
            GrammarNonTerminals::Pattern => write!(f, "Pattern"),
            GrammarNonTerminals::Action => write!(f, "Action"),
            GrammarNonTerminals::TokenDef => write!(f, "TokenDef"),
            GrammarNonTerminals::RustCode => write!(f, "RustCode"),
            GrammarNonTerminals::StartDef => write!(f, "StartDef"),
            GrammarNonTerminals::EofDef => write!(f, "EofDef"),
            GrammarNonTerminals::TokenTypeDef => write!(f, "TokenTypeDef"),
            GrammarNonTerminals::UserDataDef => write!(f, "UserDataDef"),
            GrammarNonTerminals::TerminalOrTerminalSet => write!(f, "TerminalOrTerminalSet"),
            GrammarNonTerminals::ReduceType => write!(f, "ReduceType"),
            GrammarNonTerminals::ReduceDef => write!(f, "ReduceDef"),
            GrammarNonTerminals::ErrorDef => write!(f, "ErrorDef"),
            GrammarNonTerminals::ModulePrefixDef => write!(f, "ModulePrefixDef"),
            GrammarNonTerminals::Glr => write!(f, "Glr"),
            GrammarNonTerminals::Lalr => write!(f, "Lalr"),
            GrammarNonTerminals::GrammarLine => write!(f, "GrammarLine"),
            GrammarNonTerminals::Grammar => write!(f, "Grammar"),
            GrammarNonTerminals::_TokenMapped_Plus24 => write!(f, "TokenMapped+"),
            GrammarNonTerminals::_TokenMapped_Star25 => write!(f, "TokenMapped*"),
            GrammarNonTerminals::_caret_Question26 => write!(f, "caret?"),
            GrammarNonTerminals::_TerminalSetItem_Plus27 => write!(f, "TerminalSetItem+"),
            GrammarNonTerminals::_TerminalSetItem_Star28 => write!(f, "TerminalSetItem*"),
            GrammarNonTerminals::_Pattern_Plus29 => write!(f, "Pattern+"),
            GrammarNonTerminals::_TerminalSet30 => write!(f, "[^semicolon, lparen-glr]"),
            GrammarNonTerminals::__TerminalSet30_Plus31 => write!(f, "[^semicolon, lparen-glr]+"),
            GrammarNonTerminals::_GrammarLine_Plus32 => write!(f, "GrammarLine+"),
            GrammarNonTerminals::Augmented => write!(f, "Augmented"),
        }
    }
}
#[doc = r" struct that holds internal parser data,"]
#[doc = r" including data stack for each non-terminal,"]
#[doc = r" and state stack for DFA"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types
)]
pub struct GrammarStack {
    __rustylr_generated_terminal_stack: Vec<Lexed>,
    __rustylr_generated_stack_1: Vec<RuleDefArgs>,
    __rustylr_generated_stack_2: Vec<Option<Group>>,
    __rustylr_generated_stack_3: Vec<Vec<RuleLineArgs>>,
    __rustylr_generated_stack_4: Vec<RuleLineArgs>,
    __rustylr_generated_stack_5: Vec<(Option<Ident>, PatternArgs)>,
    __rustylr_generated_stack_6: Vec<TerminalSetItem>,
    __rustylr_generated_stack_7: Vec<TerminalSet>,
    __rustylr_generated_stack_8: Vec<PatternArgs>,
    __rustylr_generated_stack_9: Vec<(Ident, TokenStream)>,
    __rustylr_generated_stack_10: Vec<TokenStream>,
    __rustylr_generated_stack_11: Vec<Ident>,
    __rustylr_generated_stack_12: Vec<(Span, TokenStream)>,
    __rustylr_generated_stack_13: Vec<TerminalOrTerminalSet>,
    __rustylr_generated_stack_14: Vec<ReduceType>,
    __rustylr_generated_stack_15: Vec<(TerminalOrTerminalSet, ReduceType)>,
    __rustylr_generated_stack_16: Vec<Vec<(Option<Ident>, PatternArgs)>>,
    __rustylr_generated_stack_17: Vec<Option<Lexed>>,
    __rustylr_generated_stack_18: Vec<Vec<TerminalSetItem>>,
    __rustylr_generated_stack_19: Vec<Vec<PatternArgs>>,
    __rustylr_generated_stack_20: Vec<Vec<Lexed>>,
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types,
    dead_code
)]
impl GrammarStack {
    fn reduce_Rule_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        let mut colon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleType = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_1.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("Rule-Ident");
            };
            if let Lexed::Colon(colon) = colon {
                let span = colon.span();
                if let Some(fisrt) = RuleLines.first_mut() {
                    fisrt.separator_span = span;
                }
            } else {
                unreachable!("Rule-Colon2");
            }
            RuleDefArgs {
                name: ident,
                typename: RuleType.map(|t| t.stream()),
                rule_lines: RuleLines,
            }
        });
        Ok(())
    }
    fn reduce_RuleType_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut parengroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::ParenGroup(group) = parengroup {
                group
            } else {
                unreachable!("RuleType - Group");
            }
        });
        Ok(())
    }
    fn reduce_RuleType_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_RuleLines_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        let mut pipe = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RuleLines = self.__rustylr_generated_stack_3.pop().unwrap();
        self.__rustylr_generated_stack_3.push({
            if let Lexed::Pipe(punct) = pipe {
                RuleLine.separator_span = punct.span();
                RuleLines.push(RuleLine);
            }
            RuleLines
        });
        Ok(())
    }
    fn reduce_RuleLines_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut RuleLine = self.__rustylr_generated_stack_4.pop().unwrap();
        self.__rustylr_generated_stack_3.push({ vec![RuleLine] });
        Ok(())
    }
    fn reduce_RuleLine_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Action = self.__rustylr_generated_stack_2.pop().unwrap();
        let mut TokenMapped = self.__rustylr_generated_stack_16.pop().unwrap();
        self.__rustylr_generated_stack_4.push({
            RuleLineArgs {
                tokens: TokenMapped,
                reduce_action: Action.map(|action| action.to_token_stream()),
                separator_span: Span::call_site(),
                id: 0,
            }
        });
        Ok(())
    }
    fn reduce_TokenMapped_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_5.push({ (None, Pattern) });
        Ok(())
    }
    fn reduce_TokenMapped_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Pattern = self.__rustylr_generated_stack_8.pop().unwrap();
        let mut equal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_5.push({
            if let Lexed::Ident(ident) = ident {
                (Some(ident), Pattern)
            } else {
                unreachable!("Token-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            let ident = if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            TerminalSetItem::Terminal(ident)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            let first = if let Lexed::Ident(first) = first {
                first
            } else {
                unreachable!("TerminalSetItem-Range1");
            };
            let last = if let Lexed::Ident(last) = last {
                last
            } else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::Range(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("TerminalSetItem-Literal");
            };
            TerminalSetItem::Literal(literal)
        });
        Ok(())
    }
    fn reduce_TerminalSetItem_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut last = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut minus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut first = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_6.push({
            let Lexed::Literal(first) = first else {
                unreachable!("TerminalSetItem-Range1");
            };
            let Lexed::Literal(last) = last else {
                unreachable!("TerminalSetItem-Range3");
            };
            TerminalSetItem::LiteralRange(first, last)
        });
        Ok(())
    }
    fn reduce_TerminalSet_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalSetItem = self.__rustylr_generated_stack_18.pop().unwrap();
        let mut caret = self.__rustylr_generated_stack_17.pop().unwrap();
        let mut lbracket = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_7.push({
            let open_span = if let Lexed::LBracket(lbracket) = lbracket {
                lbracket
            } else {
                unreachable!("TerminalSet-Open");
            };
            let close_span = if let Lexed::RBracket(rbracket) = rbracket {
                rbracket
            } else {
                unreachable!("TerminalSet-Close");
            };
            TerminalSet {
                negate: caret.is_some(),
                items: TerminalSetItem,
                open_span,
                close_span,
            }
        });
        Ok(())
    }
    fn reduce_Pattern_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            if let Lexed::Ident(ident) = ident {
                PatternArgs::Ident(ident)
            } else {
                unreachable!("Pattern-Ident");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut plus = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            if let Lexed::Plus(plus) = plus {
                PatternArgs::Plus(Box::new(Pattern), plus.span())
            } else {
                unreachable!("Pattern-Plus");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut star = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            if let Lexed::Star(star) = star {
                PatternArgs::Star(Box::new(Pattern), star.span())
            } else {
                unreachable!("Pattern-Star");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut question = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            if let Lexed::Question(question) = question {
                PatternArgs::Question(Box::new(Pattern), question.span())
            } else {
                unreachable!("Pattern-Question");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut exclamation = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            if let Lexed::Exclamation(exclamation) = exclamation {
                PatternArgs::Exclamation(Box::new(Pattern), exclamation.span())
            } else {
                unreachable!("Pattern-Exclamation");
            }
        });
        Ok(())
    }
    fn reduce_Pattern_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSet = self.__rustylr_generated_stack_7.pop().unwrap();
        self.__rustylr_generated_stack_8
            .push({ PatternArgs::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_Pattern_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalOrTerminalSet = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut slash = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_8
            .push({ PatternArgs::Lookaheads(Box::new(Pattern), TerminalOrTerminalSet) });
        Ok(())
    }
    fn reduce_Pattern_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut rparen = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Pattern = self.__rustylr_generated_stack_19.pop().unwrap();
        let mut lparen = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            let open = if let Lexed::LParen(lparen) = lparen {
                lparen
            } else {
                unreachable!("Pattern-Group-Open");
            };
            let close = if let Lexed::RParen(rparen) = rparen {
                rparen
            } else {
                unreachable!("Pattern-Group-Close");
            };
            PatternArgs::Group(Pattern, open, close)
        });
        Ok(())
    }
    fn reduce_Pattern_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_8.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("Pattern-Literal");
            };
            PatternArgs::Literal(literal)
        });
        Ok(())
    }
    fn reduce_Action_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut bracegroup = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_2.push({
            if let Lexed::BraceGroup(group) = bracegroup {
                group
            } else {
                unreachable!("Action0");
            }
        });
        Ok(())
    }
    fn reduce_Action_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_2.push({ None });
        Ok(())
    }
    fn reduce_TokenDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut token = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_9.push({
            if let Lexed::Ident(ident) = ident {
                (ident, RustCode)
            } else {
                unreachable!("TokenDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_RustCode_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut t = self.__rustylr_generated_stack_20.pop().unwrap();
        self.__rustylr_generated_stack_10.push({
            let mut tokens = TokenStream::new();
            for token in t.into_iter() {
                token.append_to_stream(&mut tokens);
            }
            tokens
        });
        Ok(())
    }
    fn reduce_StartDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut start = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_11.push({
            if let Lexed::Ident(ident) = ident {
                ident
            } else {
                unreachable!("StartDef-Ident");
            }
        });
        Ok(())
    }
    fn reduce_EofDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut eofdef = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12
            .push({ (eofdef.span(), RustCode) });
        Ok(())
    }
    fn reduce_TokenTypeDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut tokentype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12
            .push({ (tokentype.span(), RustCode) });
        Ok(())
    }
    fn reduce_UserDataDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut userdata = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12
            .push({ (userdata.span(), RustCode) });
        Ok(())
    }
    fn reduce_TerminalOrTerminalSet_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TerminalSet = self.__rustylr_generated_stack_7.pop().unwrap();
        self.__rustylr_generated_stack_13
            .push({ TerminalOrTerminalSet::TerminalSet(TerminalSet) });
        Ok(())
    }
    fn reduce_TerminalOrTerminalSet_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ident = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13.push({
            if let Lexed::Ident(ident) = ident {
                TerminalOrTerminalSet::Ident(ident)
            } else {
                unreachable!("TerminalOrTerminalSet-Ident");
            }
        });
        Ok(())
    }
    fn reduce_TerminalOrTerminalSet_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut literal = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_13.push({
            let Lexed::Literal(literal) = literal else {
                unreachable!("TerminalOrTerminalSet-Literal");
            };
            TerminalOrTerminalSet::Literal(literal)
        });
        Ok(())
    }
    fn reduce_ReduceType_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut left = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14.push({ ReduceType::Left });
        Ok(())
    }
    fn reduce_ReduceType_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut right = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_14
            .push({ ReduceType::Right });
        Ok(())
    }
    fn reduce_ReduceDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut TerminalOrTerminalSet = self.__rustylr_generated_stack_13.pop().unwrap();
        let mut reducetype = self.__rustylr_generated_stack_14.pop().unwrap();
        self.__rustylr_generated_stack_15
            .push({ (TerminalOrTerminalSet, reducetype) });
        Ok(())
    }
    fn reduce_ErrorDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut errortype = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12
            .push({ (errortype.span(), RustCode) });
        Ok(())
    }
    fn reduce_ModulePrefixDef_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut RustCode = self.__rustylr_generated_stack_10.pop().unwrap();
        let mut moduleprefix = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_12
            .push({ (moduleprefix.span(), RustCode) });
        Ok(())
    }
    fn reduce_Glr_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut glr = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_Lalr_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut semicolon = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut lalr = self.__rustylr_generated_terminal_stack.pop().unwrap();
        Ok(())
    }
    fn reduce_GrammarLine_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Rule = self.__rustylr_generated_stack_1.pop().unwrap();
        {
            data.rules.push(Rule);
        }
        Ok(())
    }
    fn reduce_GrammarLine_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenDef = self.__rustylr_generated_stack_9.pop().unwrap();
        {
            data.terminals.push(TokenDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut StartDef = self.__rustylr_generated_stack_11.pop().unwrap();
        {
            data.start_rule_name.push(StartDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut EofDef = self.__rustylr_generated_stack_12.pop().unwrap();
        {
            data.eof.push(EofDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut TokenTypeDef = self.__rustylr_generated_stack_12.pop().unwrap();
        {
            data.token_typename.push(TokenTypeDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut UserDataDef = self.__rustylr_generated_stack_12.pop().unwrap();
        {
            data.userdata_typename.push(UserDataDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ReduceDef = self.__rustylr_generated_stack_15.pop().unwrap();
        {
            data.reduce_types.push(ReduceDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ErrorDef = self.__rustylr_generated_stack_12.pop().unwrap();
        {
            data.error_typename.push(ErrorDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut ModulePrefixDef = self.__rustylr_generated_stack_12.pop().unwrap();
        {
            data.module_prefix.push(ModulePrefixDef);
        }
        Ok(())
    }
    fn reduce_GrammarLine_9(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.lalr = true;
        }
        Ok(())
    }
    fn reduce_GrammarLine_10(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        {
            data.glr = true;
        }
        Ok(())
    }
    fn reduce_Grammar_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__TokenMapped_Plus24_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_5.pop().unwrap();
        self.__rustylr_generated_stack_16.push({ vec![A] });
        Ok(())
    }
    fn reduce__TokenMapped_Plus24_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_5.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_16.pop().unwrap();
        self.__rustylr_generated_stack_16.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TokenMapped_Star25_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_16.pop().unwrap();
        self.__rustylr_generated_stack_16.push({ Ap });
        Ok(())
    }
    fn reduce__TokenMapped_Star25_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_16.push({ vec![] });
        Ok(())
    }
    fn reduce__caret_Question26_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_17.push({ Some(A) });
        Ok(())
    }
    fn reduce__caret_Question26_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_17.push({ None });
        Ok(())
    }
    fn reduce__TerminalSetItem_Plus27_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        self.__rustylr_generated_stack_18.push({ vec![A] });
        Ok(())
    }
    fn reduce__TerminalSetItem_Plus27_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_6.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_18.pop().unwrap();
        self.__rustylr_generated_stack_18.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TerminalSetItem_Star28_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut Ap = self.__rustylr_generated_stack_18.pop().unwrap();
        self.__rustylr_generated_stack_18.push({ Ap });
        Ok(())
    }
    fn reduce__TerminalSetItem_Star28_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_stack_18.push({ vec![] });
        Ok(())
    }
    fn reduce__Pattern_Plus29_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_8.pop().unwrap();
        self.__rustylr_generated_stack_19.push({ vec![A] });
        Ok(())
    }
    fn reduce__Pattern_Plus29_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_stack_8.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_19.pop().unwrap();
        self.__rustylr_generated_stack_19.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__TerminalSet30_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_2(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_3(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_4(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_5(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_6(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_7(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_8(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_9(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_10(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_11(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_12(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_13(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_14(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_15(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_16(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce__TerminalSet30_17(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut term = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_terminal_stack.push(term);
        Ok(())
    }
    fn reduce___TerminalSet30_Plus31_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        self.__rustylr_generated_stack_20.push({ vec![A] });
        Ok(())
    }
    fn reduce___TerminalSet30_Plus31_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        let mut A = self.__rustylr_generated_terminal_stack.pop().unwrap();
        let mut Ap = self.__rustylr_generated_stack_20.pop().unwrap();
        self.__rustylr_generated_stack_20.push({
            Ap.push(A);
            Ap
        });
        Ok(())
    }
    fn reduce__GrammarLine_Plus32_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce__GrammarLine_Plus32_1(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        Ok(())
    }
    fn reduce_Augmented_0(
        &mut self,
        lookahead: &Lexed,
        data: &mut GrammarArgs,
    ) -> Result<(), ::rusty_lr_core::DefaultReduceActionError> {
        self.__rustylr_generated_terminal_stack.pop();
        Ok(())
    }
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    unused_mut,
    non_snake_case,
    non_camel_case_types,
    dead_code
)]
impl ::rusty_lr_core::lr::Stack for GrammarStack {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    type ReduceActionError = ::rusty_lr_core::DefaultReduceActionError;
    type UserData = GrammarArgs;
    type StartType = ();
    fn new() -> Self {
        Self {
            __rustylr_generated_terminal_stack: Vec::new(),
            __rustylr_generated_stack_1: Vec::new(),
            __rustylr_generated_stack_2: Vec::new(),
            __rustylr_generated_stack_3: Vec::new(),
            __rustylr_generated_stack_4: Vec::new(),
            __rustylr_generated_stack_5: Vec::new(),
            __rustylr_generated_stack_6: Vec::new(),
            __rustylr_generated_stack_7: Vec::new(),
            __rustylr_generated_stack_8: Vec::new(),
            __rustylr_generated_stack_9: Vec::new(),
            __rustylr_generated_stack_10: Vec::new(),
            __rustylr_generated_stack_11: Vec::new(),
            __rustylr_generated_stack_12: Vec::new(),
            __rustylr_generated_stack_13: Vec::new(),
            __rustylr_generated_stack_14: Vec::new(),
            __rustylr_generated_stack_15: Vec::new(),
            __rustylr_generated_stack_16: Vec::new(),
            __rustylr_generated_stack_17: Vec::new(),
            __rustylr_generated_stack_18: Vec::new(),
            __rustylr_generated_stack_19: Vec::new(),
            __rustylr_generated_stack_20: Vec::new(),
        }
    }
    fn push(&mut self, term: Self::Term) {
        self.__rustylr_generated_terminal_stack.push(term);
    }
    fn reduce(
        &mut self,
        rustylr_macro_generated_ruleid__: usize,
        user_data: &mut Self::UserData,
        lookahead: &Self::Term,
    ) -> Result<(), Self::ReduceActionError> {
        match rustylr_macro_generated_ruleid__ {
            0usize => self.reduce_Rule_0(lookahead, user_data),
            1usize => self.reduce_RuleType_0(lookahead, user_data),
            2usize => self.reduce_RuleType_1(lookahead, user_data),
            3usize => self.reduce_RuleLines_0(lookahead, user_data),
            4usize => self.reduce_RuleLines_1(lookahead, user_data),
            5usize => self.reduce_RuleLine_0(lookahead, user_data),
            6usize => self.reduce_TokenMapped_0(lookahead, user_data),
            7usize => self.reduce_TokenMapped_1(lookahead, user_data),
            8usize => self.reduce_TerminalSetItem_0(lookahead, user_data),
            9usize => self.reduce_TerminalSetItem_1(lookahead, user_data),
            10usize => self.reduce_TerminalSetItem_2(lookahead, user_data),
            11usize => self.reduce_TerminalSetItem_3(lookahead, user_data),
            12usize => self.reduce_TerminalSet_0(lookahead, user_data),
            13usize => self.reduce_Pattern_0(lookahead, user_data),
            14usize => self.reduce_Pattern_1(lookahead, user_data),
            15usize => self.reduce_Pattern_2(lookahead, user_data),
            16usize => self.reduce_Pattern_3(lookahead, user_data),
            17usize => self.reduce_Pattern_4(lookahead, user_data),
            18usize => self.reduce_Pattern_5(lookahead, user_data),
            19usize => self.reduce_Pattern_6(lookahead, user_data),
            20usize => self.reduce_Pattern_7(lookahead, user_data),
            21usize => self.reduce_Pattern_8(lookahead, user_data),
            22usize => self.reduce_Action_0(lookahead, user_data),
            23usize => self.reduce_Action_1(lookahead, user_data),
            24usize => self.reduce_TokenDef_0(lookahead, user_data),
            25usize => self.reduce_RustCode_0(lookahead, user_data),
            26usize => self.reduce_StartDef_0(lookahead, user_data),
            27usize => self.reduce_EofDef_0(lookahead, user_data),
            28usize => self.reduce_TokenTypeDef_0(lookahead, user_data),
            29usize => self.reduce_UserDataDef_0(lookahead, user_data),
            30usize => self.reduce_TerminalOrTerminalSet_0(lookahead, user_data),
            31usize => self.reduce_TerminalOrTerminalSet_1(lookahead, user_data),
            32usize => self.reduce_TerminalOrTerminalSet_2(lookahead, user_data),
            33usize => self.reduce_ReduceType_0(lookahead, user_data),
            34usize => self.reduce_ReduceType_1(lookahead, user_data),
            35usize => self.reduce_ReduceDef_0(lookahead, user_data),
            36usize => self.reduce_ErrorDef_0(lookahead, user_data),
            37usize => self.reduce_ModulePrefixDef_0(lookahead, user_data),
            38usize => self.reduce_Glr_0(lookahead, user_data),
            39usize => self.reduce_Lalr_0(lookahead, user_data),
            40usize => self.reduce_GrammarLine_0(lookahead, user_data),
            41usize => self.reduce_GrammarLine_1(lookahead, user_data),
            42usize => self.reduce_GrammarLine_2(lookahead, user_data),
            43usize => self.reduce_GrammarLine_3(lookahead, user_data),
            44usize => self.reduce_GrammarLine_4(lookahead, user_data),
            45usize => self.reduce_GrammarLine_5(lookahead, user_data),
            46usize => self.reduce_GrammarLine_6(lookahead, user_data),
            47usize => self.reduce_GrammarLine_7(lookahead, user_data),
            48usize => self.reduce_GrammarLine_8(lookahead, user_data),
            49usize => self.reduce_GrammarLine_9(lookahead, user_data),
            50usize => self.reduce_GrammarLine_10(lookahead, user_data),
            51usize => self.reduce_Grammar_0(lookahead, user_data),
            52usize => self.reduce__TokenMapped_Plus24_0(lookahead, user_data),
            53usize => self.reduce__TokenMapped_Plus24_1(lookahead, user_data),
            54usize => self.reduce__TokenMapped_Star25_0(lookahead, user_data),
            55usize => self.reduce__TokenMapped_Star25_1(lookahead, user_data),
            56usize => self.reduce__caret_Question26_0(lookahead, user_data),
            57usize => self.reduce__caret_Question26_1(lookahead, user_data),
            58usize => self.reduce__TerminalSetItem_Plus27_0(lookahead, user_data),
            59usize => self.reduce__TerminalSetItem_Plus27_1(lookahead, user_data),
            60usize => self.reduce__TerminalSetItem_Star28_0(lookahead, user_data),
            61usize => self.reduce__TerminalSetItem_Star28_1(lookahead, user_data),
            62usize => self.reduce__Pattern_Plus29_0(lookahead, user_data),
            63usize => self.reduce__Pattern_Plus29_1(lookahead, user_data),
            64usize => self.reduce__TerminalSet30_0(lookahead, user_data),
            65usize => self.reduce__TerminalSet30_1(lookahead, user_data),
            66usize => self.reduce__TerminalSet30_2(lookahead, user_data),
            67usize => self.reduce__TerminalSet30_3(lookahead, user_data),
            68usize => self.reduce__TerminalSet30_4(lookahead, user_data),
            69usize => self.reduce__TerminalSet30_5(lookahead, user_data),
            70usize => self.reduce__TerminalSet30_6(lookahead, user_data),
            71usize => self.reduce__TerminalSet30_7(lookahead, user_data),
            72usize => self.reduce__TerminalSet30_8(lookahead, user_data),
            73usize => self.reduce__TerminalSet30_9(lookahead, user_data),
            74usize => self.reduce__TerminalSet30_10(lookahead, user_data),
            75usize => self.reduce__TerminalSet30_11(lookahead, user_data),
            76usize => self.reduce__TerminalSet30_12(lookahead, user_data),
            77usize => self.reduce__TerminalSet30_13(lookahead, user_data),
            78usize => self.reduce__TerminalSet30_14(lookahead, user_data),
            79usize => self.reduce__TerminalSet30_15(lookahead, user_data),
            80usize => self.reduce__TerminalSet30_16(lookahead, user_data),
            81usize => self.reduce__TerminalSet30_17(lookahead, user_data),
            82usize => self.reduce___TerminalSet30_Plus31_0(lookahead, user_data),
            83usize => self.reduce___TerminalSet30_Plus31_1(lookahead, user_data),
            84usize => self.reduce__GrammarLine_Plus32_0(lookahead, user_data),
            85usize => self.reduce__GrammarLine_Plus32_1(lookahead, user_data),
            86usize => self.reduce_Augmented_0(lookahead, user_data),
            _ => {
                unreachable!("Invalid Rule: {}", rustylr_macro_generated_ruleid__);
            }
        }
    }
    #[allow(clippy::unused_unit)]
    fn pop_start(&mut self) -> Self::StartType {
        ()
    }
}
#[doc = r" struct that holds parser data, DFA tables"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
pub struct GrammarParser {
    #[doc = r" production rules"]
    pub rules: Vec<GrammarRule>,
    #[doc = r" states"]
    pub states: Vec<GrammarState>,
}
impl ::rusty_lr_core::lr::Parser for GrammarParser {
    type Term = Lexed;
    type NonTerm = GrammarNonTerminals;
    fn get_rules(&self) -> &[GrammarRule] {
        &self.rules
    }
    fn get_states(&self) -> &[GrammarState] {
        &self.states
    }
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl GrammarParser {
    #[doc = r" Create new parser instance."]
    #[doc = r" Parser can be reused with different context, for multiple parsing."]
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let __rustylr_terminals: Vec<Lexed> = vec![
            Lexed::Ident(Ident::new("id", Span::call_site())),
            Lexed::Colon(punct!(':')),
            Lexed::Semicolon(punct!(';')),
            Lexed::Pipe(punct!('|')),
            Lexed::Percent(punct!('%')),
            Lexed::Equal(punct!('=')),
            Lexed::Plus(punct!('+')),
            Lexed::Star(punct!('*')),
            Lexed::Question(punct!('?')),
            Lexed::Caret(punct!('^')),
            Lexed::Minus(punct!('-')),
            Lexed::Exclamation(punct!('!')),
            Lexed::Slash(punct!('/')),
            Lexed::OtherPunct(punct!('.')),
            Lexed::Literal(Literal::usize_suffixed(0)),
            Lexed::ParenGroup(None),
            Lexed::BraceGroup(None),
            Lexed::BracketGroup(None),
            Lexed::NoneGroup(None),
            Lexed::LParen(Span::call_site()),
            Lexed::RParen(Span::call_site()),
            Lexed::LBrace(Span::call_site()),
            Lexed::RBrace(Span::call_site()),
            Lexed::LBracket(Span::call_site()),
            Lexed::RBracket(Span::call_site()),
            Lexed::Left(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Right(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Token(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Start(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::EofDef(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::TokenType(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::UserData(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::ErrorType(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::ModulePrefix(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Lalr(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Glr(punct!('%'), Ident::new("id", Span::call_site())),
            Lexed::Eof,
        ];
        const RUSTYLR_RULES_TOKENS: &[&[::rusty_lr_core::Token<u8, GrammarNonTerminals>]] = &[
            &[
                ::rusty_lr_core::Token::Term(0),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleType),
                ::rusty_lr_core::Token::Term(1),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[::rusty_lr_core::Token::Term(15)],
            &[],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLines),
                ::rusty_lr_core::Token::Term(3),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RuleLine),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::RuleLine,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMapped_Star25),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Action),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            &[
                ::rusty_lr_core::Token::Term(0),
                ::rusty_lr_core::Token::Term(5),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            &[::rusty_lr_core::Token::Term(0)],
            &[
                ::rusty_lr_core::Token::Term(0),
                ::rusty_lr_core::Token::Term(10),
                ::rusty_lr_core::Token::Term(0),
            ],
            &[::rusty_lr_core::Token::Term(14)],
            &[
                ::rusty_lr_core::Token::Term(14),
                ::rusty_lr_core::Token::Term(10),
                ::rusty_lr_core::Token::Term(14),
            ],
            &[
                ::rusty_lr_core::Token::Term(23),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_caret_Question26),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItem_Star28),
                ::rusty_lr_core::Token::Term(24),
            ],
            &[::rusty_lr_core::Token::Term(0)],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(6),
            ],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(7),
            ],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(8),
            ],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(11),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
                ::rusty_lr_core::Token::Term(12),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalOrTerminalSet),
            ],
            &[
                ::rusty_lr_core::Token::Term(19),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_Pattern_Plus29),
                ::rusty_lr_core::Token::Term(20),
            ],
            &[::rusty_lr_core::Token::Term(14)],
            &[::rusty_lr_core::Token::Term(16)],
            &[],
            &[
                ::rusty_lr_core::Token::Term(27),
                ::rusty_lr_core::Token::Term(0),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::__TerminalSet30_Plus31,
            )],
            &[
                ::rusty_lr_core::Token::Term(28),
                ::rusty_lr_core::Token::Term(0),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[
                ::rusty_lr_core::Token::Term(29),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[
                ::rusty_lr_core::Token::Term(30),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[
                ::rusty_lr_core::Token::Term(31),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSet,
            )],
            &[::rusty_lr_core::Token::Term(0)],
            &[::rusty_lr_core::Token::Term(14)],
            &[::rusty_lr_core::Token::Term(25)],
            &[::rusty_lr_core::Token::Term(26)],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::ReduceType),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalOrTerminalSet),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[
                ::rusty_lr_core::Token::Term(32),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[
                ::rusty_lr_core::Token::Term(33),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::RustCode),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[
                ::rusty_lr_core::Token::Term(35),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[
                ::rusty_lr_core::Token::Term(34),
                ::rusty_lr_core::Token::Term(2),
            ],
            &[::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Rule)],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::StartDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::EofDef)],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenTypeDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::UserDataDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ReduceDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ErrorDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::ModulePrefixDef,
            )],
            &[::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Lalr)],
            &[::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Glr)],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_GrammarLine_Plus32,
            )],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TokenMapped,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TokenMapped_Plus24),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TokenMapped),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TokenMapped_Plus24,
            )],
            &[],
            &[::rusty_lr_core::Token::Term(9)],
            &[],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::TerminalSetItem,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSetItem_Plus27),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::TerminalSetItem),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TerminalSetItem_Plus27,
            )],
            &[],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::Pattern,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_Pattern_Plus29),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Pattern),
            ],
            &[::rusty_lr_core::Token::Term(0)],
            &[::rusty_lr_core::Token::Term(1)],
            &[::rusty_lr_core::Token::Term(3)],
            &[::rusty_lr_core::Token::Term(4)],
            &[::rusty_lr_core::Token::Term(5)],
            &[::rusty_lr_core::Token::Term(6)],
            &[::rusty_lr_core::Token::Term(7)],
            &[::rusty_lr_core::Token::Term(8)],
            &[::rusty_lr_core::Token::Term(9)],
            &[::rusty_lr_core::Token::Term(10)],
            &[::rusty_lr_core::Token::Term(11)],
            &[::rusty_lr_core::Token::Term(12)],
            &[::rusty_lr_core::Token::Term(13)],
            &[::rusty_lr_core::Token::Term(14)],
            &[::rusty_lr_core::Token::Term(15)],
            &[::rusty_lr_core::Token::Term(16)],
            &[::rusty_lr_core::Token::Term(17)],
            &[::rusty_lr_core::Token::Term(18)],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::_TerminalSet30,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::__TerminalSet30_Plus31),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_TerminalSet30),
            ],
            &[::rusty_lr_core::Token::NonTerm(
                GrammarNonTerminals::GrammarLine,
            )],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::GrammarLine),
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::_GrammarLine_Plus32),
            ],
            &[
                ::rusty_lr_core::Token::NonTerm(GrammarNonTerminals::Grammar),
                ::rusty_lr_core::Token::Term(36),
            ],
        ];
        const RUSTYLR_RULES_NAME: &[GrammarNonTerminals] = &[
            GrammarNonTerminals::Rule,
            GrammarNonTerminals::RuleType,
            GrammarNonTerminals::RuleType,
            GrammarNonTerminals::RuleLines,
            GrammarNonTerminals::RuleLines,
            GrammarNonTerminals::RuleLine,
            GrammarNonTerminals::TokenMapped,
            GrammarNonTerminals::TokenMapped,
            GrammarNonTerminals::TerminalSetItem,
            GrammarNonTerminals::TerminalSetItem,
            GrammarNonTerminals::TerminalSetItem,
            GrammarNonTerminals::TerminalSetItem,
            GrammarNonTerminals::TerminalSet,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Pattern,
            GrammarNonTerminals::Action,
            GrammarNonTerminals::Action,
            GrammarNonTerminals::TokenDef,
            GrammarNonTerminals::RustCode,
            GrammarNonTerminals::StartDef,
            GrammarNonTerminals::EofDef,
            GrammarNonTerminals::TokenTypeDef,
            GrammarNonTerminals::UserDataDef,
            GrammarNonTerminals::TerminalOrTerminalSet,
            GrammarNonTerminals::TerminalOrTerminalSet,
            GrammarNonTerminals::TerminalOrTerminalSet,
            GrammarNonTerminals::ReduceType,
            GrammarNonTerminals::ReduceType,
            GrammarNonTerminals::ReduceDef,
            GrammarNonTerminals::ErrorDef,
            GrammarNonTerminals::ModulePrefixDef,
            GrammarNonTerminals::Glr,
            GrammarNonTerminals::Lalr,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::GrammarLine,
            GrammarNonTerminals::Grammar,
            GrammarNonTerminals::_TokenMapped_Plus24,
            GrammarNonTerminals::_TokenMapped_Plus24,
            GrammarNonTerminals::_TokenMapped_Star25,
            GrammarNonTerminals::_TokenMapped_Star25,
            GrammarNonTerminals::_caret_Question26,
            GrammarNonTerminals::_caret_Question26,
            GrammarNonTerminals::_TerminalSetItem_Plus27,
            GrammarNonTerminals::_TerminalSetItem_Plus27,
            GrammarNonTerminals::_TerminalSetItem_Star28,
            GrammarNonTerminals::_TerminalSetItem_Star28,
            GrammarNonTerminals::_Pattern_Plus29,
            GrammarNonTerminals::_Pattern_Plus29,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::_TerminalSet30,
            GrammarNonTerminals::__TerminalSet30_Plus31,
            GrammarNonTerminals::__TerminalSet30_Plus31,
            GrammarNonTerminals::_GrammarLine_Plus32,
            GrammarNonTerminals::_GrammarLine_Plus32,
            GrammarNonTerminals::Augmented,
        ];
        let rules: Vec<GrammarRule> = RUSTYLR_RULES_NAME
            .iter()
            .zip(RUSTYLR_RULES_TOKENS.iter())
            .map(|(name, tokens)| GrammarRule {
                name: *name,
                rule: tokens
                    .iter()
                    .map(|token| match token {
                        ::rusty_lr_core::Token::Term(term) => ::rusty_lr_core::Token::Term(
                            __rustylr_terminals[*term as usize].clone(),
                        ),
                        ::rusty_lr_core::Token::NonTerm(nonterm) => {
                            ::rusty_lr_core::Token::NonTerm(*nonterm)
                        }
                    })
                    .collect(),
            })
            .collect();
        const RUSTYLR_REDUCE_TERMINALS_CACHE: &[&[u8]] = &[
            &[1],
            &[2, 3, 16],
            &[0, 2, 3, 6, 7, 8, 11, 12, 14, 16, 19, 23],
            &[0, 6, 7, 8, 11, 12, 14, 19, 20, 23],
            &[0, 14, 24],
            &[24],
            &[0, 14, 19, 20, 23],
            &[0, 2, 3, 14, 16, 19, 23],
            &[0, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36],
            &[2, 3],
            &[0, 14, 23],
            &[
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            ],
            &[2],
            &[36],
        ];
        const RUSTYLR_RULESET_SHIFTED0_CACHE: &[&[u8]] = &[
            &[
                0, 24, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                48, 49, 50, 51, 84, 85, 86,
            ],
            &[1, 2],
            &[],
            &[
                3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 52, 53, 54, 55,
            ],
            &[12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
            &[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 62, 63],
            &[56, 57],
            &[8, 9, 10, 11, 58, 59, 60, 61],
            &[8, 9, 10, 11],
            &[12, 30, 31, 32],
            &[
                5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 52, 53, 54, 55,
            ],
            &[6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
            &[22, 23],
            &[
                25, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
            ],
            &[
                64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
            ],
            &[
                0, 24, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                48, 49, 50, 84, 85,
            ],
        ];
        const RUSTYLR_SHIFT_TERM_MAP: &[&[(u8, u8)]] = &[
            &[
                (0, 1),
                (25, 70),
                (26, 71),
                (27, 72),
                (28, 97),
                (29, 100),
                (30, 103),
                (31, 106),
                (32, 109),
                (33, 112),
                (34, 115),
                (35, 117),
            ],
            &[(15, 2)],
            &[],
            &[(1, 4)],
            &[(0, 5), (14, 8), (19, 9), (23, 43)],
            &[(5, 6)],
            &[(0, 7), (14, 8), (19, 9), (23, 43)],
            &[],
            &[],
            &[(0, 10), (14, 11), (19, 12), (23, 13)],
            &[],
            &[],
            &[(0, 10), (14, 11), (19, 12), (23, 13)],
            &[(9, 14)],
            &[],
            &[(0, 16), (14, 19)],
            &[(10, 17)],
            &[(0, 18)],
            &[],
            &[(10, 20)],
            &[(14, 21)],
            &[],
            &[],
            &[(0, 16), (14, 19)],
            &[],
            &[(24, 26)],
            &[],
            &[],
            &[(6, 29), (7, 30), (8, 31), (11, 32), (12, 33)],
            &[],
            &[],
            &[],
            &[],
            &[(0, 34), (14, 35), (23, 13)],
            &[],
            &[],
            &[],
            &[],
            &[(0, 10), (14, 11), (19, 12), (20, 39), (23, 13)],
            &[],
            &[(6, 29), (7, 30), (8, 31), (11, 32), (12, 33)],
            &[(0, 10), (14, 11), (19, 12), (20, 42), (23, 13)],
            &[],
            &[(9, 14)],
            &[(0, 16), (14, 19)],
            &[(24, 46)],
            &[],
            &[],
            &[(6, 49), (7, 50), (8, 51), (11, 52), (12, 53)],
            &[],
            &[],
            &[],
            &[],
            &[(0, 54), (14, 55), (23, 43)],
            &[],
            &[],
            &[],
            &[],
            &[(2, 59), (3, 60)],
            &[],
            &[(0, 5), (14, 8), (19, 9), (23, 43)],
            &[],
            &[],
            &[(6, 49), (7, 50), (8, 51), (11, 52), (12, 53)],
            &[(0, 5), (14, 8), (19, 9), (23, 43)],
            &[],
            &[(16, 67)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(0, 73)],
            &[
                (0, 74),
                (1, 75),
                (3, 76),
                (4, 77),
                (5, 78),
                (6, 79),
                (7, 80),
                (8, 81),
                (9, 82),
                (10, 83),
                (11, 84),
                (12, 85),
                (13, 86),
                (14, 87),
                (15, 88),
                (16, 89),
                (17, 90),
                (18, 91),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(2, 93)],
            &[],
            &[],
            &[
                (0, 74),
                (1, 75),
                (3, 76),
                (4, 77),
                (5, 78),
                (6, 79),
                (7, 80),
                (8, 81),
                (9, 82),
                (10, 83),
                (11, 84),
                (12, 85),
                (13, 86),
                (14, 87),
                (15, 88),
                (16, 89),
                (17, 90),
                (18, 91),
            ],
            &[],
            &[(0, 98)],
            &[(2, 99)],
            &[],
            &[
                (0, 74),
                (1, 75),
                (3, 76),
                (4, 77),
                (5, 78),
                (6, 79),
                (7, 80),
                (8, 81),
                (9, 82),
                (10, 83),
                (11, 84),
                (12, 85),
                (13, 86),
                (14, 87),
                (15, 88),
                (16, 89),
                (17, 90),
                (18, 91),
            ],
            &[(2, 102)],
            &[],
            &[
                (0, 74),
                (1, 75),
                (3, 76),
                (4, 77),
                (5, 78),
                (6, 79),
                (7, 80),
                (8, 81),
                (9, 82),
                (10, 83),
                (11, 84),
                (12, 85),
                (13, 86),
                (14, 87),
                (15, 88),
                (16, 89),
                (17, 90),
                (18, 91),
            ],
            &[(2, 105)],
            &[],
            &[
                (0, 74),
                (1, 75),
                (3, 76),
                (4, 77),
                (5, 78),
                (6, 79),
                (7, 80),
                (8, 81),
                (9, 82),
                (10, 83),
                (11, 84),
                (12, 85),
                (13, 86),
                (14, 87),
                (15, 88),
                (16, 89),
                (17, 90),
                (18, 91),
            ],
            &[(2, 108)],
            &[],
            &[
                (0, 74),
                (1, 75),
                (3, 76),
                (4, 77),
                (5, 78),
                (6, 79),
                (7, 80),
                (8, 81),
                (9, 82),
                (10, 83),
                (11, 84),
                (12, 85),
                (13, 86),
                (14, 87),
                (15, 88),
                (16, 89),
                (17, 90),
                (18, 91),
            ],
            &[(2, 111)],
            &[],
            &[
                (0, 74),
                (1, 75),
                (3, 76),
                (4, 77),
                (5, 78),
                (6, 79),
                (7, 80),
                (8, 81),
                (9, 82),
                (10, 83),
                (11, 84),
                (12, 85),
                (13, 86),
                (14, 87),
                (15, 88),
                (16, 89),
                (17, 90),
                (18, 91),
            ],
            &[(2, 114)],
            &[],
            &[(2, 116)],
            &[],
            &[(2, 118)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(0, 126), (14, 127), (23, 128)],
            &[],
            &[],
            &[(9, 14)],
            &[(0, 16), (14, 19)],
            &[(24, 131)],
            &[],
            &[],
            &[(2, 134)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (0, 1),
                (25, 70),
                (26, 71),
                (27, 72),
                (28, 97),
                (29, 100),
                (30, 103),
                (31, 106),
                (32, 109),
                (33, 112),
                (34, 115),
                (35, 117),
            ],
            &[],
            &[(36, 143)],
            &[],
            &[],
        ];
        const RUSTYLR_SHIFT_NONTERM_MAP: &[&[(GrammarNonTerminals, u8)]] = &[
            &[
                (GrammarNonTerminals::EofDef, 122),
                (GrammarNonTerminals::ErrorDef, 136),
                (GrammarNonTerminals::Glr, 138),
                (GrammarNonTerminals::Grammar, 142),
                (GrammarNonTerminals::GrammarLine, 140),
                (GrammarNonTerminals::Lalr, 139),
                (GrammarNonTerminals::ModulePrefixDef, 137),
                (GrammarNonTerminals::ReduceDef, 135),
                (GrammarNonTerminals::ReduceType, 125),
                (GrammarNonTerminals::Rule, 119),
                (GrammarNonTerminals::StartDef, 121),
                (GrammarNonTerminals::TokenDef, 120),
                (GrammarNonTerminals::TokenTypeDef, 123),
                (GrammarNonTerminals::UserDataDef, 124),
                (GrammarNonTerminals::_GrammarLine_Plus32, 144),
            ],
            &[(GrammarNonTerminals::RuleType, 3)],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 63),
                (GrammarNonTerminals::RuleLine, 69),
                (GrammarNonTerminals::RuleLines, 58),
                (GrammarNonTerminals::TerminalSet, 47),
                (GrammarNonTerminals::TokenMapped, 62),
                (GrammarNonTerminals::_TokenMapped_Plus24, 64),
                (GrammarNonTerminals::_TokenMapped_Star25, 66),
            ],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 48),
                (GrammarNonTerminals::TerminalSet, 47),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 28),
                (GrammarNonTerminals::TerminalSet, 27),
                (GrammarNonTerminals::_Pattern_Plus29, 41),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 28),
                (GrammarNonTerminals::TerminalSet, 27),
                (GrammarNonTerminals::_Pattern_Plus29, 38),
            ],
            &[(GrammarNonTerminals::_caret_Question26, 15)],
            &[],
            &[
                (GrammarNonTerminals::TerminalSetItem, 22),
                (GrammarNonTerminals::_TerminalSetItem_Plus27, 23),
                (GrammarNonTerminals::_TerminalSetItem_Star28, 25),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(GrammarNonTerminals::TerminalSetItem, 24)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::TerminalOrTerminalSet, 37),
                (GrammarNonTerminals::TerminalSet, 36),
            ],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 40),
                (GrammarNonTerminals::TerminalSet, 27),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 40),
                (GrammarNonTerminals::TerminalSet, 27),
            ],
            &[],
            &[(GrammarNonTerminals::_caret_Question26, 44)],
            &[
                (GrammarNonTerminals::TerminalSetItem, 22),
                (GrammarNonTerminals::_TerminalSetItem_Plus27, 23),
                (GrammarNonTerminals::_TerminalSetItem_Star28, 45),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::TerminalOrTerminalSet, 57),
                (GrammarNonTerminals::TerminalSet, 56),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 63),
                (GrammarNonTerminals::RuleLine, 61),
                (GrammarNonTerminals::TerminalSet, 47),
                (GrammarNonTerminals::TokenMapped, 62),
                (GrammarNonTerminals::_TokenMapped_Plus24, 64),
                (GrammarNonTerminals::_TokenMapped_Star25, 66),
            ],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::Pattern, 63),
                (GrammarNonTerminals::TerminalSet, 47),
                (GrammarNonTerminals::TokenMapped, 65),
            ],
            &[],
            &[(GrammarNonTerminals::Action, 68)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 92),
                (GrammarNonTerminals::_TerminalSet30, 94),
                (GrammarNonTerminals::__TerminalSet30_Plus31, 95),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(GrammarNonTerminals::_TerminalSet30, 96)],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 101),
                (GrammarNonTerminals::_TerminalSet30, 94),
                (GrammarNonTerminals::__TerminalSet30_Plus31, 95),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 104),
                (GrammarNonTerminals::_TerminalSet30, 94),
                (GrammarNonTerminals::__TerminalSet30_Plus31, 95),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 107),
                (GrammarNonTerminals::_TerminalSet30, 94),
                (GrammarNonTerminals::__TerminalSet30_Plus31, 95),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 110),
                (GrammarNonTerminals::_TerminalSet30, 94),
                (GrammarNonTerminals::__TerminalSet30_Plus31, 95),
            ],
            &[],
            &[],
            &[
                (GrammarNonTerminals::RustCode, 113),
                (GrammarNonTerminals::_TerminalSet30, 94),
                (GrammarNonTerminals::__TerminalSet30_Plus31, 95),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::TerminalOrTerminalSet, 133),
                (GrammarNonTerminals::TerminalSet, 132),
            ],
            &[],
            &[],
            &[(GrammarNonTerminals::_caret_Question26, 129)],
            &[
                (GrammarNonTerminals::TerminalSetItem, 22),
                (GrammarNonTerminals::_TerminalSetItem_Plus27, 23),
                (GrammarNonTerminals::_TerminalSetItem_Star28, 130),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (GrammarNonTerminals::EofDef, 122),
                (GrammarNonTerminals::ErrorDef, 136),
                (GrammarNonTerminals::Glr, 138),
                (GrammarNonTerminals::GrammarLine, 140),
                (GrammarNonTerminals::Lalr, 139),
                (GrammarNonTerminals::ModulePrefixDef, 137),
                (GrammarNonTerminals::ReduceDef, 135),
                (GrammarNonTerminals::ReduceType, 125),
                (GrammarNonTerminals::Rule, 119),
                (GrammarNonTerminals::StartDef, 121),
                (GrammarNonTerminals::TokenDef, 120),
                (GrammarNonTerminals::TokenTypeDef, 123),
                (GrammarNonTerminals::UserDataDef, 124),
                (GrammarNonTerminals::_GrammarLine_Plus32, 141),
            ],
            &[],
            &[],
            &[],
            &[],
        ];
        const RUSTYLR_REDUCE_MAP: &[&[(u8, u8)]] = &[
            &[],
            &[(0, 2)],
            &[(0, 1)],
            &[],
            &[(1, 55)],
            &[(2, 13)],
            &[],
            &[(2, 13)],
            &[(2, 21)],
            &[],
            &[(3, 13)],
            &[(3, 21)],
            &[],
            &[(4, 57)],
            &[(4, 56)],
            &[(5, 61)],
            &[(4, 8)],
            &[],
            &[(4, 9)],
            &[(4, 10)],
            &[],
            &[(4, 11)],
            &[(4, 58)],
            &[(5, 60)],
            &[(4, 59)],
            &[],
            &[(3, 12)],
            &[(3, 18)],
            &[(6, 62)],
            &[(3, 14)],
            &[(3, 15)],
            &[(3, 16)],
            &[(3, 17)],
            &[],
            &[(3, 31)],
            &[(3, 32)],
            &[(3, 30)],
            &[(3, 19)],
            &[],
            &[(3, 20)],
            &[(6, 63)],
            &[],
            &[(2, 20)],
            &[(4, 57)],
            &[(5, 61)],
            &[],
            &[(2, 12)],
            &[(2, 18)],
            &[(7, 7)],
            &[(2, 14)],
            &[(2, 15)],
            &[(2, 16)],
            &[(2, 17)],
            &[],
            &[(2, 31)],
            &[(2, 32)],
            &[(2, 30)],
            &[(2, 19)],
            &[],
            &[(8, 0)],
            &[(1, 55)],
            &[(9, 3)],
            &[(7, 52)],
            &[(7, 6)],
            &[(1, 54)],
            &[(7, 53)],
            &[(9, 23)],
            &[(9, 22)],
            &[(9, 5)],
            &[(9, 4)],
            &[(10, 33)],
            &[(10, 34)],
            &[],
            &[],
            &[(11, 64)],
            &[(11, 65)],
            &[(11, 66)],
            &[(11, 67)],
            &[(11, 68)],
            &[(11, 69)],
            &[(11, 70)],
            &[(11, 71)],
            &[(11, 72)],
            &[(11, 73)],
            &[(11, 74)],
            &[(11, 75)],
            &[(11, 76)],
            &[(11, 77)],
            &[(11, 78)],
            &[(11, 79)],
            &[(11, 80)],
            &[(11, 81)],
            &[],
            &[(8, 24)],
            &[(11, 82)],
            &[(12, 25)],
            &[(11, 83)],
            &[],
            &[],
            &[(8, 26)],
            &[],
            &[],
            &[(8, 27)],
            &[],
            &[],
            &[(8, 28)],
            &[],
            &[],
            &[(8, 29)],
            &[],
            &[],
            &[(8, 36)],
            &[],
            &[],
            &[(8, 37)],
            &[],
            &[(8, 39)],
            &[],
            &[(8, 38)],
            &[(8, 40)],
            &[(8, 41)],
            &[(8, 42)],
            &[(8, 43)],
            &[(8, 44)],
            &[(8, 45)],
            &[],
            &[(12, 31)],
            &[(12, 32)],
            &[(4, 57)],
            &[(5, 61)],
            &[],
            &[(12, 12)],
            &[(12, 30)],
            &[],
            &[(8, 35)],
            &[(8, 46)],
            &[(8, 47)],
            &[(8, 48)],
            &[(8, 50)],
            &[(8, 49)],
            &[(13, 84)],
            &[(13, 85)],
            &[],
            &[],
            &[(13, 51)],
        ];
        const RUSTYLR_RULESET_MAP: &[&[(u8, u8)]] = &[
            &[],
            &[(0, 1)],
            &[(1, 1)],
            &[(0, 2)],
            &[(0, 3)],
            &[(7, 1), (13, 1)],
            &[(7, 2)],
            &[(13, 1)],
            &[(21, 1)],
            &[(20, 1)],
            &[(13, 1)],
            &[(21, 1)],
            &[(20, 1)],
            &[(12, 1)],
            &[(56, 1)],
            &[(12, 2)],
            &[(8, 1), (9, 1)],
            &[(9, 2)],
            &[(9, 3)],
            &[(10, 1), (11, 1)],
            &[(11, 2)],
            &[(11, 3)],
            &[(58, 1)],
            &[(59, 1), (60, 1)],
            &[(59, 2)],
            &[(12, 3)],
            &[(12, 4)],
            &[(18, 1)],
            &[(14, 1), (15, 1), (16, 1), (17, 1), (19, 1), (62, 1)],
            &[(14, 2)],
            &[(15, 2)],
            &[(16, 2)],
            &[(17, 2)],
            &[(19, 2)],
            &[(31, 1)],
            &[(32, 1)],
            &[(30, 1)],
            &[(19, 3)],
            &[(20, 2), (63, 1)],
            &[(20, 3)],
            &[(14, 1), (15, 1), (16, 1), (17, 1), (19, 1), (63, 2)],
            &[(20, 2), (63, 1)],
            &[(20, 3)],
            &[(12, 1)],
            &[(12, 2)],
            &[(12, 3)],
            &[(12, 4)],
            &[(18, 1)],
            &[(7, 3), (14, 1), (15, 1), (16, 1), (17, 1), (19, 1)],
            &[(14, 2)],
            &[(15, 2)],
            &[(16, 2)],
            &[(17, 2)],
            &[(19, 2)],
            &[(31, 1)],
            &[(32, 1)],
            &[(30, 1)],
            &[(19, 3)],
            &[(0, 4), (3, 1)],
            &[(0, 5)],
            &[(3, 2)],
            &[(3, 3)],
            &[(52, 1)],
            &[(6, 1), (14, 1), (15, 1), (16, 1), (17, 1), (19, 1)],
            &[(53, 1), (54, 1)],
            &[(53, 2)],
            &[(5, 1)],
            &[(22, 1)],
            &[(5, 2)],
            &[(4, 1)],
            &[(33, 1)],
            &[(34, 1)],
            &[(24, 1)],
            &[(24, 2)],
            &[(64, 1)],
            &[(65, 1)],
            &[(66, 1)],
            &[(67, 1)],
            &[(68, 1)],
            &[(69, 1)],
            &[(70, 1)],
            &[(71, 1)],
            &[(72, 1)],
            &[(73, 1)],
            &[(74, 1)],
            &[(75, 1)],
            &[(76, 1)],
            &[(77, 1)],
            &[(78, 1)],
            &[(79, 1)],
            &[(80, 1)],
            &[(81, 1)],
            &[(24, 3)],
            &[(24, 4)],
            &[(82, 1)],
            &[(25, 1), (83, 1)],
            &[(83, 2)],
            &[(26, 1)],
            &[(26, 2)],
            &[(26, 3)],
            &[(27, 1)],
            &[(27, 2)],
            &[(27, 3)],
            &[(28, 1)],
            &[(28, 2)],
            &[(28, 3)],
            &[(29, 1)],
            &[(29, 2)],
            &[(29, 3)],
            &[(36, 1)],
            &[(36, 2)],
            &[(36, 3)],
            &[(37, 1)],
            &[(37, 2)],
            &[(37, 3)],
            &[(39, 1)],
            &[(39, 2)],
            &[(38, 1)],
            &[(38, 2)],
            &[(40, 1)],
            &[(41, 1)],
            &[(42, 1)],
            &[(43, 1)],
            &[(44, 1)],
            &[(45, 1)],
            &[(35, 1)],
            &[(31, 1)],
            &[(32, 1)],
            &[(12, 1)],
            &[(12, 2)],
            &[(12, 3)],
            &[(12, 4)],
            &[(30, 1)],
            &[(35, 2)],
            &[(35, 3)],
            &[(46, 1)],
            &[(47, 1)],
            &[(48, 1)],
            &[(50, 1)],
            &[(49, 1)],
            &[(84, 1), (85, 1)],
            &[(85, 2)],
            &[(86, 1)],
            &[(86, 2)],
            &[(51, 1)],
        ];
        const RUSTYLR_RULESET_SHIFTED0_MAP: &[u8] = &[
            0, 1, 2, 2, 3, 2, 4, 2, 2, 5, 2, 2, 5, 6, 2, 7, 2, 2, 2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 9, 2, 2, 2, 2, 4, 2, 2, 4, 2, 6, 7, 2, 2, 2, 2, 2, 2, 2, 2, 9, 2, 2, 2, 2,
            2, 2, 10, 2, 2, 2, 11, 2, 12, 2, 2, 2, 2, 2, 2, 13, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 14, 2, 2, 2, 2, 13, 2, 2, 13, 2, 2, 13, 2, 2, 13, 2, 2, 13,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 2, 2, 6, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15, 2,
            2, 2, 2,
        ];
        let states: Vec<GrammarState> = RUSTYLR_SHIFT_TERM_MAP
            .iter()
            .zip(
                RUSTYLR_SHIFT_NONTERM_MAP.iter().zip(
                    RUSTYLR_REDUCE_MAP.iter().zip(
                        RUSTYLR_RULESET_MAP
                            .iter()
                            .zip(RUSTYLR_RULESET_SHIFTED0_MAP.iter()),
                    ),
                ),
            )
            .map(
                |(
                    shift_goto_map_term,
                    (shift_goto_map_nonterm, (reduce_map_, (ruleset, ruleset0_id))),
                )| {
                    let mut reduce_map = ::rusty_lr_core::HashMap::default();
                    for (terminal_set_id, ruleid) in reduce_map_.iter() {
                        reduce_map.extend(
                            RUSTYLR_REDUCE_TERMINALS_CACHE[*terminal_set_id as usize]
                                .iter()
                                .map(|term_idx| {
                                    (
                                        __rustylr_terminals[*term_idx as usize].clone(),
                                        *ruleid as usize,
                                    )
                                }),
                        );
                    }
                    let mut ruleset: Vec<::rusty_lr_core::ShiftedRuleRef> = ruleset
                        .iter()
                        .map(|(ruleid, shifted)| ::rusty_lr_core::ShiftedRuleRef {
                            rule: *ruleid as usize,
                            shifted: *shifted as usize,
                        })
                        .collect();
                    ruleset.extend(
                        RUSTYLR_RULESET_SHIFTED0_CACHE[*ruleset0_id as usize]
                            .iter()
                            .map(|ruleid| ::rusty_lr_core::ShiftedRuleRef {
                                rule: *ruleid as usize,
                                shifted: 0,
                            }),
                    );
                    GrammarState {
                        shift_goto_map_term: shift_goto_map_term
                            .iter()
                            .map(|(term_idx, goto)| {
                                (
                                    __rustylr_terminals[*term_idx as usize].clone(),
                                    *goto as usize,
                                )
                            })
                            .collect(),
                        shift_goto_map_nonterm: shift_goto_map_nonterm
                            .iter()
                            .map(|(nonterm, goto)| (*nonterm, *goto as usize))
                            .collect(),
                        reduce_map,
                        ruleset,
                    }
                },
            )
            .collect();
        Self { rules, states }
    }
}
// ==============================Generated Codes End===============================
