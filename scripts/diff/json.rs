
// This file was generated by rustylr 1.25.0
// This generated code is targeting rusty_lr version 3.32.0.
// There might be a build error if the version is not matched.
//
// ================================User Codes Begin================================

// =================================User Codes End=================================
/*
====================================Grammar=====================================

# of terminal classes: 31
# of states: 120

0: Json -> Element
1: Value -> Object
2: Value -> Array
3: Value -> String
4: Value -> Number
5: Value -> "true"
6: Value -> "false"
7: Value -> "null"
8: Object -> '{' WS '}'
9: Object -> '{' Members '}'
10: Object -> '{' error '}'
11: Members -> Member
12: Members -> Member ',' Members
13: Member -> WS String WS ':' Element
14: Array -> '[' $sep(Element, ',', *) ']'
15: Element -> WS Value WS
16: String -> '"' Character* '"'
17: Character -> '\\' Escape
18: Character -> ['\u{0020}'-'\u{10FFFF}']-'"'-'\\'
19: Escape -> '"'
20: Escape -> '\\'
21: Escape -> '/'
22: Escape -> 'b'
23: Escape -> 'f'
24: Escape -> 'n'
25: Escape -> 'r'
26: Escape -> 't'
27: Escape -> 'u' Hex Hex Hex Hex
28: Hex -> ['0'-'9']
29: Hex -> ['A'-'F']
30: Hex -> ['a'-'f']
31: Number -> Integer ('.', Digits)? Exponent
32: Integer -> ['0'-'9']
33: Integer -> ['1'-'9'] (9 terms) Digit+
34: Integer -> '-' ['0'-'9']
35: Integer -> '-' ['1'-'9'] (9 terms) Digit+
36: Exponent -> ""
37: Exponent -> 'E' Sign Digit+
38: Exponent -> 'e' Sign Digit+
39: Sign -> ""
40: Sign -> '+'
41: Sign -> '-'
42: WS -> ""
43: WS -> ' ' WS
44: WS -> ['\t', '\n', '\r'] (3 terms) WS
45: "true" -> 't' 'r' 'u' 'e'
46: "false" -> 'f' 'a' 'l' 's' 'e'
47: "null" -> 'n' 'u' 'l' 'l'
48: $sep(Element, ',', +) -> Element
49: $sep(Element, ',', +) -> Element ',' $sep(Element, ',', +)
50: $sep(Element, ',', *) -> $sep(Element, ',', +)
51: $sep(Element, ',', *) -> 
52: Character+ -> Character
53: Character+ -> Character Character+
54: Character* -> Character+
55: Character* -> 
56: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ' '
57: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ['!', '#'-'*', ..., '~'-'\u{10ffff}'] (1114039 terms)
58: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '+'
59: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ','
60: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '-'
61: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '.'
62: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '/'
63: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '0'
64: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ['1'-'9'] (9 terms)
65: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ':'
66: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ['A'-'D', 'F'] (5 terms)
67: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'E'
68: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '['
69: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ']'
70: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'a'
71: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'b'
72: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ['c'-'d'] (2 terms)
73: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'e'
74: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'f'
75: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'l'
76: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'n'
77: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'r'
78: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 's'
79: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 't'
80: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'u'
81: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '{'
82: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '}'
83: ['A'-'F'] -> ['A'-'D', 'F'] (5 terms)
84: ['A'-'F'] -> 'E'
85: ['a'-'f'] -> 'a'
86: ['a'-'f'] -> 'b'
87: ['a'-'f'] -> ['c'-'d'] (2 terms)
88: ['a'-'f'] -> 'e'
89: ['a'-'f'] -> 'f'
90: Digit+ -> ['0'-'9']
91: Digit+ -> ['0'-'9'] Digit+
92: ['0'-'9'] -> '0'
93: ['0'-'9'] -> ['1'-'9'] (9 terms)
94: ('.', Digits) -> '.' Digit+
95: ('.', Digits)? -> ('.', Digits)
96: ('.', Digits)? -> 
97: "" -> 
98: Augmented -> Json eof

*/
// =============================Generated Codes Begin==============================
/// type alias for `Context`
#[allow(non_camel_case_types, dead_code)]
pub type JsonContext = ::rusty_lr::parser::deterministic::Context<JsonDataStack, u8>;
/// type alias for CFG production rule
#[allow(non_camel_case_types, dead_code)]
pub type JsonRule = ::rusty_lr::rule::ProductionRule<&'static str, JsonNonTerminals>;
/// type alias for DFA state
#[allow(non_camel_case_types, dead_code)]
pub type JsonState = ::rusty_lr::parser::state::DenseState<
    u8,
    JsonNonTerminals,
    usize,
    u8,
>;
/// type alias for `ParseError`
#[allow(non_camel_case_types, dead_code)]
pub type JsonParseError = ::rusty_lr::parser::deterministic::ParseError<JsonDataStack>;
/// An enum that represents non-terminal symbols
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std::hash::Hash,
    std::cmp::PartialEq,
    std::cmp::Eq,
    std::cmp::PartialOrd,
    std::cmp::Ord
)]
pub enum JsonNonTerminals {
    Json,
    Value,
    Object,
    Members,
    Member,
    Array,
    Element,
    String,
    Character,
    Escape,
    Hex,
    Number,
    Integer,
    Exponent,
    Sign,
    WS,
    _LiteralString22,
    _LiteralString23,
    _LiteralString24,
    _ElementSepPlus25,
    _ElementSepStar26,
    _CharacterPlus27,
    _CharacterStar28,
    _TermSet29,
    _TermSet30,
    _TermSet31,
    _DigitPlus32,
    _TermSet33,
    _Group34,
    __Group34Question35,
    _LiteralString36,
    Augmented,
}
impl std::fmt::Display for JsonNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl std::fmt::Debug for JsonNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl ::rusty_lr::nonterminal::NonTerminal for JsonNonTerminals {
    fn as_str(&self) -> &'static str {
        match self {
            JsonNonTerminals::Json => "Json",
            JsonNonTerminals::Value => "Value",
            JsonNonTerminals::Object => "Object",
            JsonNonTerminals::Members => "Members",
            JsonNonTerminals::Member => "Member",
            JsonNonTerminals::Array => "Array",
            JsonNonTerminals::Element => "Element",
            JsonNonTerminals::String => "String",
            JsonNonTerminals::Character => "Character",
            JsonNonTerminals::Escape => "Escape",
            JsonNonTerminals::Hex => "Hex",
            JsonNonTerminals::Number => "Number",
            JsonNonTerminals::Integer => "Integer",
            JsonNonTerminals::Exponent => "Exponent",
            JsonNonTerminals::Sign => "Sign",
            JsonNonTerminals::WS => "WS",
            JsonNonTerminals::_LiteralString22 => "\"true\"",
            JsonNonTerminals::_LiteralString23 => "\"false\"",
            JsonNonTerminals::_LiteralString24 => "\"null\"",
            JsonNonTerminals::_ElementSepPlus25 => "$sep(Element, ',', +)",
            JsonNonTerminals::_ElementSepStar26 => "$sep(Element, ',', *)",
            JsonNonTerminals::_CharacterPlus27 => "Character+",
            JsonNonTerminals::_CharacterStar28 => "Character*",
            JsonNonTerminals::_TermSet29 => "['\\u{0020}'-'\\u{10FFFF}']-'\"'-'\\\\'",
            JsonNonTerminals::_TermSet30 => "['A'-'F']",
            JsonNonTerminals::_TermSet31 => "['a'-'f']",
            JsonNonTerminals::_DigitPlus32 => "Digit+",
            JsonNonTerminals::_TermSet33 => "['0'-'9']",
            JsonNonTerminals::_Group34 => "('.', Digits)",
            JsonNonTerminals::__Group34Question35 => "('.', Digits)?",
            JsonNonTerminals::_LiteralString36 => "\"\"",
            JsonNonTerminals::Augmented => "Augmented",
        }
    }
    fn is_trace(&self) -> bool {
        match self {
            JsonNonTerminals::Json => false,
            JsonNonTerminals::Value => false,
            JsonNonTerminals::Object => false,
            JsonNonTerminals::Members => false,
            JsonNonTerminals::Member => false,
            JsonNonTerminals::Array => false,
            JsonNonTerminals::Element => false,
            JsonNonTerminals::String => false,
            JsonNonTerminals::Character => false,
            JsonNonTerminals::Escape => false,
            JsonNonTerminals::Hex => false,
            JsonNonTerminals::Number => false,
            JsonNonTerminals::Integer => false,
            JsonNonTerminals::Exponent => false,
            JsonNonTerminals::Sign => false,
            JsonNonTerminals::WS => false,
            JsonNonTerminals::_LiteralString22 => false,
            JsonNonTerminals::_LiteralString23 => false,
            JsonNonTerminals::_LiteralString24 => false,
            JsonNonTerminals::_ElementSepPlus25 => false,
            JsonNonTerminals::_ElementSepStar26 => false,
            JsonNonTerminals::_CharacterPlus27 => false,
            JsonNonTerminals::_CharacterStar28 => false,
            JsonNonTerminals::_TermSet29 => false,
            JsonNonTerminals::_TermSet30 => false,
            JsonNonTerminals::_TermSet31 => false,
            JsonNonTerminals::_DigitPlus32 => false,
            JsonNonTerminals::_TermSet33 => false,
            JsonNonTerminals::_Group34 => false,
            JsonNonTerminals::__Group34Question35 => false,
            JsonNonTerminals::_LiteralString36 => false,
            JsonNonTerminals::Augmented => false,
        }
    }
    fn nonterm_type(&self) -> Option<::rusty_lr::nonterminal::NonTerminalType> {
        match self {
            JsonNonTerminals::Json => None,
            JsonNonTerminals::Value => None,
            JsonNonTerminals::Object => None,
            JsonNonTerminals::Members => None,
            JsonNonTerminals::Member => None,
            JsonNonTerminals::Array => None,
            JsonNonTerminals::Element => None,
            JsonNonTerminals::String => None,
            JsonNonTerminals::Character => None,
            JsonNonTerminals::Escape => None,
            JsonNonTerminals::Hex => None,
            JsonNonTerminals::Number => None,
            JsonNonTerminals::Integer => None,
            JsonNonTerminals::Exponent => None,
            JsonNonTerminals::Sign => None,
            JsonNonTerminals::WS => None,
            JsonNonTerminals::_LiteralString22 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::LiteralString)
            }
            JsonNonTerminals::_LiteralString23 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::LiteralString)
            }
            JsonNonTerminals::_LiteralString24 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::LiteralString)
            }
            JsonNonTerminals::_ElementSepPlus25 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusRight)
            }
            JsonNonTerminals::_ElementSepStar26 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Star)
            }
            JsonNonTerminals::_CharacterPlus27 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusRight)
            }
            JsonNonTerminals::_CharacterStar28 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Star)
            }
            JsonNonTerminals::_TermSet29 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::TerminalSet)
            }
            JsonNonTerminals::_TermSet30 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::TerminalSet)
            }
            JsonNonTerminals::_TermSet31 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::TerminalSet)
            }
            JsonNonTerminals::_DigitPlus32 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusRight)
            }
            JsonNonTerminals::_TermSet33 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::TerminalSet)
            }
            JsonNonTerminals::_Group34 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Group)
            }
            JsonNonTerminals::__Group34Question35 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            JsonNonTerminals::_LiteralString36 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::LiteralString)
            }
            JsonNonTerminals::Augmented => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Augmented)
            }
        }
    }
    fn to_usize(&self) -> usize {
        *self as usize
    }
}
/// tag for token that represents which stack a token is using
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
#[derive(Clone, Copy, PartialEq, Eq)]
pub enum JsonTags {
    __terminals,
    __stack2,
    Empty,
}
/// enum for each non-terminal and terminal symbol, that actually hold data
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
pub struct JsonDataStack {
    pub __tags: Vec<JsonTags>,
    __terminals: Vec<char>,
    __stack2: Vec<Option<char>>,
}
impl Default for JsonDataStack {
    fn default() -> Self {
        Self {
            __tags: Vec::new(),
            __terminals: Vec::new(),
            __stack2: Vec::new(),
        }
    }
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl JsonDataStack {
    ///Object -> '{' WS '}'
    #[inline]
    fn reduce_Object_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///Object -> '{' Members '}'
    #[inline]
    fn reduce_Object_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///Object -> '{' error '}'
    #[inline]
    fn reduce_Object_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            let start = __rustylr_location_error.start;
            let end = __rustylr_location_error.end;
            println!("Error recovered with '}}' at {start}..{end}");
        }
        Ok(false)
    }
    ///Members -> Member
    #[inline]
    fn reduce_Members_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
        }
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(false)
    }
    ///Members -> Member ',' Members
    #[inline]
    fn reduce_Members_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::Empty)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///Member -> WS String WS ':' Element
    #[inline]
    fn reduce_Member_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                JsonTags::Empty)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        Ok(false)
    }
    ///Array -> '[' $sep(Element, ',', *) ']'
    #[inline]
    fn reduce_Array_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///Element -> WS Value WS
    #[inline]
    fn reduce_Element_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::Empty)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///String -> '"' Character* '"'
    #[inline]
    fn reduce_String_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///Character -> '\\' Escape
    #[inline]
    fn reduce_Character_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(false)
    }
    ///Escape -> 'u' Hex Hex Hex Hex
    #[inline]
    fn reduce_Escape_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        Ok(false)
    }
    ///Number -> Integer ('.', Digits)? Exponent
    #[inline]
    fn reduce_Number_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::Empty)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__stack2.truncate(__data_stack.__stack2.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///Integer -> ['1'-'9'] (9 terms) Digit+
    #[inline]
    fn reduce_Integer_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(false)
    }
    ///Integer -> '-' ['0'-'9']
    #[inline]
    fn reduce_Integer_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(false)
    }
    ///Integer -> '-' ['1'-'9'] (9 terms) Digit+
    #[inline]
    fn reduce_Integer_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///Exponent -> 'E' Sign Digit+
    #[inline]
    fn reduce_Exponent_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///Exponent -> 'e' Sign Digit+
    #[inline]
    fn reduce_Exponent_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///WS -> ' ' WS
    #[inline]
    fn reduce_WS_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(false)
    }
    ///WS -> ['\t', '\n', '\r'] (3 terms) WS
    #[inline]
    fn reduce_WS_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(false)
    }
    ///"true" -> 't' 'r' 'u' 'e'
    #[inline]
    fn reduce__LiteralString22_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 4usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        Ok(false)
    }
    ///"false" -> 'f' 'a' 'l' 's' 'e'
    #[inline]
    fn reduce__LiteralString23_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 5usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        Ok(false)
    }
    ///"null" -> 'n' 'u' 'l' 'l'
    #[inline]
    fn reduce__LiteralString24_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 4usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        Ok(false)
    }
    ///$sep(Element, ',', +) -> Element
    #[inline]
    fn reduce__ElementSepPlus25_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
        }
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(false)
    }
    ///$sep(Element, ',', +) -> Element ',' $sep(Element, ',', +)
    #[inline]
    fn reduce__ElementSepPlus25_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                JsonTags::Empty)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(false)
    }
    ///$sep(Element, ',', *) ->
    #[inline]
    fn reduce__ElementSepStar26_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(JsonTags::Empty);
        Ok(false)
    }
    ///Character+ -> Character
    #[inline]
    fn reduce__CharacterPlus27_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
        }
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(false)
    }
    ///Character+ -> Character Character+
    #[inline]
    fn reduce__CharacterPlus27_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::Empty)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(false)
    }
    ///Character* ->
    #[inline]
    fn reduce__CharacterStar28_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(JsonTags::Empty);
        Ok(false)
    }
    ///Digit+ -> ['0'-'9']
    #[inline]
    fn reduce__DigitPlus32_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(false)
    }
    ///Digit+ -> ['0'-'9'] Digit+
    #[inline]
    fn reduce__DigitPlus32_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(JsonTags::Empty);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(false)
    }
    ///['0'-'9'] -> ['1'-'9'] (9 terms)
    #[inline]
    fn reduce__TermSet33_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
        }
        let mut __token0 = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = __token0;
        __data_stack.__terminals.push(__res);
        Ok(true)
    }
    ///('.', Digits) -> '.' Digit+
    #[inline]
    fn reduce__Group34_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::Empty)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut __token0 = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = __token0;
        __data_stack.__terminals.push(__res);
        Ok(true)
    }
    ///('.', Digits)? -> ('.', Digits)
    #[inline]
    fn reduce___Group34Question35_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                JsonTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(JsonTags::__stack2);
        let mut A = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = Some(A);
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///('.', Digits)? ->
    #[inline]
    fn reduce___Group34Question35_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(JsonTags::__stack2);
        let __res = { None };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///"" ->
    #[inline]
    fn reduce__LiteralString36_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(JsonTags::Empty);
        Ok(false)
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl ::rusty_lr::parser::data_stack::DataStack for JsonDataStack {
    type Term = char;
    type NonTerm = JsonNonTerminals;
    type ReduceActionError = ::rusty_lr::DefaultReduceActionError;
    type UserData = ();
    type StartType = ();
    type Location = std::ops::Range<usize>;
    fn pop_start(&mut self) -> Option<Self::StartType> {
        let tag = self.__tags.pop();
        debug_assert!(tag == Some(JsonTags::Empty));
        Some(())
    }
    fn pop(&mut self) {
        match self.__tags.pop().unwrap() {
            JsonTags::__terminals => {
                self.__terminals.pop();
            }
            JsonTags::__stack2 => {
                self.__stack2.pop();
            }
            _ => {}
        }
    }
    fn push_terminal(&mut self, term: Self::Term) {
        self.__tags.push(JsonTags::__terminals);
        self.__terminals.push(term);
    }
    fn push_empty(&mut self) {
        self.__tags.push(JsonTags::Empty);
    }
    fn clear(&mut self) {
        self.__tags.clear();
        self.__terminals.clear();
        self.__stack2.clear();
    }
    fn reserve(&mut self, additional: usize) {
        self.__tags.reserve(additional);
    }
    fn split_off(&mut self, at: usize) -> Self {
        let __other_tag_stack = self.__tags.split_off(at);
        let mut __counts: [u8; 2usize + 1] = [0; 2usize + 1];
        for &tag in &__other_tag_stack {
            __counts[tag as usize] += 1;
        }
        let __other___terminals = self
            .__terminals
            .split_off(self.__terminals.len() - (__counts[0usize] as usize));
        let __other___stack2 = self
            .__stack2
            .split_off(self.__stack2.len() - (__counts[1usize] as usize));
        Self {
            __tags: __other_tag_stack,
            __terminals: __other___terminals,
            __stack2: __other___stack2,
        }
    }
    fn append(&mut self, other: &mut Self) {
        self.__tags.append(&mut other.__tags);
        self.__terminals.append(&mut other.__terminals);
        self.__stack2.append(&mut other.__stack2);
    }
    fn reduce_action(
        data_stack: &mut Self,
        location_stack: &mut Vec<std::ops::Range<usize>>,
        rule_index: usize,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Self::Term>,
        user_data: &mut Self::UserData,
        location0: &mut Self::Location,
    ) -> Result<bool, Self::ReduceActionError> {
        match rule_index {
            8usize => {
                Self::reduce_Object_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            9usize => {
                Self::reduce_Object_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            10usize => {
                Self::reduce_Object_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            11usize => {
                Self::reduce_Members_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            12usize => {
                Self::reduce_Members_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            13usize => {
                Self::reduce_Member_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            14usize => {
                Self::reduce_Array_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            15usize => {
                Self::reduce_Element_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            16usize => {
                Self::reduce_String_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            17usize => {
                Self::reduce_Character_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            27usize => {
                Self::reduce_Escape_8(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            31usize => {
                Self::reduce_Number_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            33usize => {
                Self::reduce_Integer_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            34usize => {
                Self::reduce_Integer_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            35usize => {
                Self::reduce_Integer_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            37usize => {
                Self::reduce_Exponent_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            38usize => {
                Self::reduce_Exponent_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            43usize => {
                Self::reduce_WS_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            44usize => {
                Self::reduce_WS_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            45usize => {
                Self::reduce__LiteralString22_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            46usize => {
                Self::reduce__LiteralString23_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            47usize => {
                Self::reduce__LiteralString24_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            48usize => {
                Self::reduce__ElementSepPlus25_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            49usize => {
                Self::reduce__ElementSepPlus25_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            51usize => {
                Self::reduce__ElementSepStar26_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            52usize => {
                Self::reduce__CharacterPlus27_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            53usize => {
                Self::reduce__CharacterPlus27_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            55usize => {
                Self::reduce__CharacterStar28_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            90usize => {
                Self::reduce__DigitPlus32_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            91usize => {
                Self::reduce__DigitPlus32_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            93usize => {
                Self::reduce__TermSet33_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            94usize => {
                Self::reduce__Group34_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            95usize => {
                Self::reduce___Group34Question35_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            96usize => {
                Self::reduce___Group34Question35_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            97usize => {
                Self::reduce__LiteralString36_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            _ => {
                unreachable!("Invalid Rule: {}", rule_index);
            }
        }
    }
}
/// A struct that holds the entire parser table and production rules.
#[allow(unused_braces, unused_parens, unused_variables, non_snake_case, unused_mut)]
pub struct JsonParser {
    /// production rules
    pub rules: Vec<JsonRule>,
    /// states
    pub states: Vec<JsonState>,
    /// terminal classes
    pub classes: Vec<Vec<::std::ops::RangeInclusive<char>>>,
}
impl ::rusty_lr::parser::Parser for JsonParser {
    type Term = char;
    type NonTerm = JsonNonTerminals;
    type State = JsonState;
    type TerminalClassElement = ::std::ops::RangeInclusive<char>;
    const ERROR_USED: bool = true;
    fn class_precedence(
        &self,
        class: ::rusty_lr::TerminalSymbol<usize>,
    ) -> ::rusty_lr::parser::Precedence {
        match class {
            ::rusty_lr::TerminalSymbol::Term(class) => {
                #[allow(unreachable_patterns)]
                match class {
                    _ => ::rusty_lr::parser::Precedence::none(),
                }
            }
            ::rusty_lr::TerminalSymbol::Error => ::rusty_lr::parser::Precedence::none(),
            ::rusty_lr::TerminalSymbol::Eof => {
                unreachable!("eof token cannot be used in precedence levels")
            }
        }
    }
    fn precedence_types(&self, level: u8) -> Option<::rusty_lr::rule::ReduceType> {
        #[allow(unreachable_patterns)]
        match level {
            _ => None,
        }
    }
    fn get_rules(&self) -> &[JsonRule] {
        &self.rules
    }
    fn get_states(&self) -> &[JsonState] {
        &self.states
    }
    fn get_terminals(
        &self,
        i: usize,
    ) -> Option<impl IntoIterator<Item = Self::TerminalClassElement> + '_> {
        self.classes.get(i).map(|class| class.iter().cloned())
    }
    fn to_terminal_class(&self, terminal: &Self::Term) -> usize {
        #[allow(unreachable_patterns)]
        match *terminal {
            '\t'..='\n' | '\r' => 0,
            ' ' => 1,
            '!'
            | '#'..='*'
            | ';'..='@'
            | 'G'..='Z'
            | '^'..='`'
            | 'g'..='k'
            | 'm'
            | 'o'..='q'
            | 'v'..='z'
            | '|'
            | '~'..='\u{10ffff}' => 3,
            '/' => 4,
            'b' => 5,
            'f' => 6,
            'n' => 7,
            'r' => 8,
            't' => 9,
            '+' => 10,
            '-' => 11,
            ',' => 12,
            '.' => 13,
            '0' => 14,
            '1'..='9' => 15,
            ':' => 16,
            'A'..='D' | 'F' => 17,
            'E' => 18,
            'e' => 19,
            '[' => 20,
            ']' => 21,
            'a' => 22,
            'c'..='d' => 23,
            'l' => 24,
            's' => 25,
            'u' => 26,
            '{' => 27,
            '}' => 28,
            '"' => 29,
            '\\' => 30,
            _ => 2,
        }
    }
}
/// A struct that holds the whole parser table.
#[allow(unused_braces, unused_parens, unused_variables, non_snake_case, unused_mut)]
impl JsonParser {
    /// Calculates the states and parser tables from the grammar.
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let rules: Vec<
            ::rusty_lr::rule::ProductionRule<::rusty_lr::TerminalSymbol<u8>, _>,
        > = vec![
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Json, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Element),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Value,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Object),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Value, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Array),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Value,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::String),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Value, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Number),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Value,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString22),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Value, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString23),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Value, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString24),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Object, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(27)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(28)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Object,
            rule : vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(27)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Members),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(28)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Object,
            rule : vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(27)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Error),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(28)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Members,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Member),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Members, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Member),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Members),], precedence : None,
            }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Member, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::String),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Element),], precedence : None,
            }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Array, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(20)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_ElementSepStar26),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(21)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Element,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Value),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::String, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(29)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_CharacterStar28),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(29)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Character, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Escape),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Character, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet29),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Escape,
            rule : vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(29)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(4)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(5)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(6)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(7)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(8)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(9)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(26)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Hex),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Hex),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Hex),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Hex),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Hex, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Hex,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet30),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Hex, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet31),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Number,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Integer),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::__Group34Question35),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Exponent),], precedence : None,
            }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Integer, rule
            : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Integer, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Integer,
            rule : vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Integer,
            rule : vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Exponent, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString36),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Exponent, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(18)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Sign),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Exponent, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Sign),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Sign,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString36),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Sign, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(10)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Sign, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::WS, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString36),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::WS, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::WS, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::_LiteralString22,
            rule : vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(9)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(8)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(26)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_LiteralString23, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(6)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(22)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(25)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_LiteralString24, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(7)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(26)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_ElementSepPlus25, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Element),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_ElementSepPlus25, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Element),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_ElementSepPlus25),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_ElementSepStar26, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_ElementSepPlus25),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_ElementSepStar26, rule : vec![], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::_CharacterPlus27,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Character),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_CharacterPlus27, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Character),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_CharacterPlus27),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_CharacterStar28, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_CharacterPlus27),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_CharacterStar28, rule : vec![], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::_TermSet29, rule
            : vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(3)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(10)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(4)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(14)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(17)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(18)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(20)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(21)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(22)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(5)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(23)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(6)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(7)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(8)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(25)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(9)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(26)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(27)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(28)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet30, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(17)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet30, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(18)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(22)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(5)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(23)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(6)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_DigitPlus32, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_DigitPlus32, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet33, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(14)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet33, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_Group34, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::__Group34Question35, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_Group34),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::__Group34Question35, rule : vec![], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::_LiteralString36,
            rule : vec![], precedence : None, }, ::rusty_lr::rule::ProductionRule { name
            : JsonNonTerminals::Augmented, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Json),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Eof),], precedence :
            None, },
        ];
        let terminal_class_names = vec![
            "['\\t', '\\n', '\\r'] (3 terms)", "' '", "<Others>",
            "['!', '#'-'*', ..., '~'-'\\u{10ffff}'] (1114039 terms)", "'/'", "'b'",
            "'f'", "'n'", "'r'", "'t'", "'+'", "'-'", "','", "'.'", "'0'",
            "['1'-'9'] (9 terms)", "':'", "['A'-'D', 'F'] (5 terms)", "'E'", "'e'",
            "'['", "']'", "'a'", "['c'-'d'] (2 terms)", "'l'", "'s'", "'u'", "'{'",
            "'}'", "'\"'", "'\\\\'",
        ];
        let rules = rules
            .into_iter()
            .map(move |rule| {
                rule.map(
                    |term| match term {
                        ::rusty_lr::TerminalSymbol::Term(term) => {
                            terminal_class_names[term as usize]
                        }
                        ::rusty_lr::TerminalSymbol::Error => "error",
                        ::rusty_lr::TerminalSymbol::Eof => "eof",
                    },
                    |nonterm| nonterm,
                )
            })
            .collect();
        let __rustylr_tset24: Vec<u8> = vec![0, 1];
        let __rustylr_tset6: Vec<u8> = vec![0, 1, 12, 13, 18, 19, 21];
        let __rustylr_tset4: Vec<u8> = vec![0, 1, 12, 13, 18, 19, 21, 28];
        let __rustylr_tset14: Vec<u8> = vec![0, 1, 12, 13, 18, 19, 28];
        let __rustylr_tset11: Vec<u8> = vec![0, 1, 12, 16, 21, 28];
        let __rustylr_tset21: Vec<u8> = vec![0, 1, 12, 18, 19, 21];
        let __rustylr_tset17: Vec<u8> = vec![0, 1, 12, 18, 19, 21, 28];
        let __rustylr_tset16: Vec<u8> = vec![0, 1, 12, 18, 19, 28];
        let __rustylr_tset22: Vec<u8> = vec![0, 1, 12, 21];
        let __rustylr_tset2: Vec<u8> = vec![0, 1, 12, 21, 28];
        let __rustylr_tset18: Vec<u8> = vec![0, 1, 12, 28];
        let __rustylr_tset3: Vec<u8> = vec![0, 1, 13, 18, 19];
        let __rustylr_tset23: Vec<u8> = vec![0, 1, 18, 19];
        let __rustylr_tset10: Vec<u8> = vec![
            1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
            23, 24, 25, 26, 27, 28, 29, 30
        ];
        let __rustylr_tset1: Vec<u8> = vec![
            6, 7, 9, 11, 12, 14, 15, 16, 20, 21, 27, 28, 29
        ];
        let __rustylr_tset0: Vec<u8> = vec![6, 7, 9, 11, 14, 15, 20, 27, 29];
        let __rustylr_tset20: Vec<u8> = vec![12, 21];
        let __rustylr_tset15: Vec<u8> = vec![12, 21, 28];
        let __rustylr_tset13: Vec<u8> = vec![12, 28];
        let __rustylr_tset19: Vec<u8> = vec![14, 15];
        let __rustylr_tset12: Vec<u8> = vec![16];
        let __rustylr_tset5: Vec<u8> = vec![21];
        let __rustylr_tset8: Vec<u8> = vec![28];
        let __rustylr_tset7: Vec<u8> = vec![28, 29];
        let __rustylr_tset9: Vec<u8> = vec![29];
        let states: Vec<::rusty_lr::parser::state::IntermediateState<u8, _, u8, u8>> = vec![
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Json,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),
            (JsonNonTerminals::Element, ::rusty_lr::parser::state::ShiftTarget::new(5,
            false)), (JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(7, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset0.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [0, 15,
            42, 43, 44, 97, 98,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::WS, ::rusty_lr::parser::state::ShiftTarget::new(4,
            true)), (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset0.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 1, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::WS, ::rusty_lr::parser::state::ShiftTarget::new(3,
            true)), (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset0.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            43, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 1, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![43]; __reduce_map
            .extend(__rustylr_tset1.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![43]), ruleset : { let rules : & 'static [u8] = & [43,]; let shifted
            : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![44]; __reduce_map.extend(__rustylr_tset1.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : Some(vec![44]), ruleset : { let rules :
            & 'static [u8] = & [44,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : Some(6),
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [98,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [98,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(6, ::rusty_lr::parser::state::ShiftTarget::new(8,
            true)), (7, ::rusty_lr::parser::state::ShiftTarget::new(13, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(111, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (20,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Value,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (JsonNonTerminals::Object, ::rusty_lr::parser::state::ShiftTarget::new(108,
            false)), (JsonNonTerminals::Array,
            ::rusty_lr::parser::state::ShiftTarget::new(108, false)),
            (JsonNonTerminals::String, ::rusty_lr::parser::state::ShiftTarget::new(108,
            false)), (JsonNonTerminals::Number,
            ::rusty_lr::parser::state::ShiftTarget::new(108, false)),
            (JsonNonTerminals::Integer, ::rusty_lr::parser::state::ShiftTarget::new(111,
            true)), (JsonNonTerminals::_LiteralString22,
            ::rusty_lr::parser::state::ShiftTarget::new(108, false)),
            (JsonNonTerminals::_LiteralString23,
            ::rusty_lr::parser::state::ShiftTarget::new(108, false)),
            (JsonNonTerminals::_LiteralString24,
            ::rusty_lr::parser::state::ShiftTarget::new(108, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(111, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16,
            31, 32, 33, 34, 35, 45, 46, 47, 92, 93,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(22,
            ::rusty_lr::parser::state::ShiftTarget::new(9, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [46,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(24,
            ::rusty_lr::parser::state::ShiftTarget::new(10, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [46,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(25,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [46,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(12, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [46,]; let shifted : & 'static [u8] = & [4,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![46]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![46]), ruleset : { let rules : & 'static [u8] = & [46,]; let shifted
            : & 'static [u8] = & [5,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(26, ::rusty_lr::parser::state::ShiftTarget::new(14, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [47,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(24,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [47,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(24,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [47,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![47]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![47]), ruleset : { let rules : & 'static [u8] = & [47,]; let shifted
            : & 'static [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(8,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [45,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(26,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [45,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [45,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![45]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![45]), ruleset : { let rules : & 'static [u8] = & [45,]; let shifted
            : & 'static [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [34, 35, 92, 93,]; let shifted : & 'static
            [u8] = & [1, 1, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![93]; __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : Some(vec![93]), ruleset : { let rules : & 'static [u8] = &
            [35, 90, 91, 92, 93, 93,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0,
            1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![35]; __reduce_map
            .extend(__rustylr_tset4.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![35]), ruleset : { let rules : & 'static [u8] = & [35,]; let shifted
            : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : Some(vec![90]), ruleset : { let rules : & 'static [u8] = &
            [90, 90, 91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0,
            0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![91]; __reduce_map
            .extend(__rustylr_tset4.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![91]), ruleset : { let rules : & 'static [u8] = & [91,]; let shifted
            : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![34]; __reduce_map.extend(__rustylr_tset4.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : Some(vec![34]), ruleset : { let rules :
            & 'static [u8] = & [34,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![93]; __reduce_map.extend(__rustylr_tset3.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : Some(vec![93]), ruleset : { let rules : & 'static [u8] = &
            [33, 90, 91, 92, 93, 93,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0,
            1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![33]; __reduce_map
            .extend(__rustylr_tset4.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![33]), ruleset : { let rules : & 'static [u8] = & [33,]; let shifted
            : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Element,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),
            (JsonNonTerminals::WS, ::rusty_lr::parser::state::ShiftTarget::new(32,
            true)), (JsonNonTerminals::_ElementSepPlus25,
            ::rusty_lr::parser::state::ShiftTarget::new(37, false)),
            (JsonNonTerminals::_ElementSepStar26,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(32, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![51]; __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term,
            reduce_rules.clone()))); let reduce_rules = vec![97]; __reduce_map
            .extend(__rustylr_tset0.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [14, 15, 42, 43, 44, 48, 49, 50,
            51, 97,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0, 0, 0, 0, 0, 0,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(12,
            ::rusty_lr::parser::state::ShiftTarget::new(31, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![48]; __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [48,
            49,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Element,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),
            (JsonNonTerminals::WS, ::rusty_lr::parser::state::ShiftTarget::new(32,
            true)), (JsonNonTerminals::_ElementSepPlus25,
            ::rusty_lr::parser::state::ShiftTarget::new(107, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(32, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset0.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [15, 42,
            43, 44, 48, 49, 49, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            2, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(6, ::rusty_lr::parser::state::ShiftTarget::new(8,
            true)), (7, ::rusty_lr::parser::state::ShiftTarget::new(13, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(33, true)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(98, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (20,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Value,
            ::rusty_lr::parser::state::ShiftTarget::new(95, true)),
            (JsonNonTerminals::Object, ::rusty_lr::parser::state::ShiftTarget::new(95,
            false)), (JsonNonTerminals::Array,
            ::rusty_lr::parser::state::ShiftTarget::new(95, false)),
            (JsonNonTerminals::String, ::rusty_lr::parser::state::ShiftTarget::new(95,
            false)), (JsonNonTerminals::Number,
            ::rusty_lr::parser::state::ShiftTarget::new(95, false)),
            (JsonNonTerminals::Integer, ::rusty_lr::parser::state::ShiftTarget::new(98,
            true)), (JsonNonTerminals::_LiteralString22,
            ::rusty_lr::parser::state::ShiftTarget::new(95, false)),
            (JsonNonTerminals::_LiteralString23,
            ::rusty_lr::parser::state::ShiftTarget::new(95, false)),
            (JsonNonTerminals::_LiteralString24,
            ::rusty_lr::parser::state::ShiftTarget::new(95, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(98, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16,
            31, 32, 33, 34, 35, 45, 46, 47, 92, 93,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(34, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [34, 35, 92, 93,]; let shifted : & 'static
            [u8] = & [1, 1, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(35, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![93]; __reduce_map.extend(__rustylr_tset6.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 90,
            91, 92, 93, 93,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0, 1,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset6.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [90, 90,
            91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![93]; __reduce_map.extend(__rustylr_tset6.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [33, 90,
            91, 92, 93, 93,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0, 1,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(21,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [14,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![14]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![14]), ruleset : { let rules : & 'static [u8] = & [14,]; let shifted
            : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)),], error_shift :
            Some(42), eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Members,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)),
            (JsonNonTerminals::Member, ::rusty_lr::parser::state::ShiftTarget::new(46,
            true)), (JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(75, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(75, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset7.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [8, 9,
            10, 11, 12, 13, 42, 43, 44, 97,]; let shifted : & 'static [u8] = & [1, 1, 1,
            0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset7.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 1, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset7.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            43, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 1, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [10,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![10]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![10]), ruleset : { let rules : & 'static [u8] = & [10,]; let shifted
            : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(45, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [9,]; let shifted : & 'static [u8]
            = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![9]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![9]), ruleset : { let rules : & 'static [u8] = & [9,]; let shifted :
            & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(12, ::rusty_lr::parser::state::ShiftTarget::new(47, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![11]; __reduce_map.extend(__rustylr_tset8.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [11, 12,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Members,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)),
            (JsonNonTerminals::Member, ::rusty_lr::parser::state::ShiftTarget::new(46,
            true)), (JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(51, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset9.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [11, 12,
            12, 13, 42, 43, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 2, 0, 0, 0,
            0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset9.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 1, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset9.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            43, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 1, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![12]; __reduce_map
            .extend(__rustylr_tset8.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [12,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::String,
            ::rusty_lr::parser::state::ShiftTarget::new(64, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [13, 16,]; let shifted : & 'static [u8] = &
            [1, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (12,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (17,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (18,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (20,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (21,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Character,
            ::rusty_lr::parser::state::ShiftTarget::new(60, true)),
            (JsonNonTerminals::_CharacterPlus27,
            ::rusty_lr::parser::state::ShiftTarget::new(62, false)),
            (JsonNonTerminals::_CharacterStar28,
            ::rusty_lr::parser::state::ShiftTarget::new(62, true)),
            (JsonNonTerminals::_TermSet29,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![55]; __reduce_map.extend(__rustylr_tset9.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [16, 17,
            18, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
            70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,]; let shifted : & 'static
            [u8] = & [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(4,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Escape,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [17, 19, 20, 21, 22, 23, 24, 25, 26, 27,]; let
            shifted : & 'static [u8] = & [1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(5,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)), (17,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)), (18,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Hex,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)),
            (JsonNonTerminals::_TermSet30,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonNonTerminals::_TermSet31,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89,
            92, 93,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(5,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)), (17,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)), (18,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Hex,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)),
            (JsonNonTerminals::_TermSet30,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonNonTerminals::_TermSet31,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89,
            92, 93,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(5,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)), (17,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)), (18,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Hex,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)),
            (JsonNonTerminals::_TermSet30,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonNonTerminals::_TermSet31,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89,
            92, 93,]; let shifted : & 'static [u8] = & [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(5,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)), (17,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)), (18,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Hex,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),
            (JsonNonTerminals::_TermSet30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonNonTerminals::_TermSet31,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89,
            92, 93,]; let shifted : & 'static [u8] = & [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![27]; __reduce_map
            .extend(__rustylr_tset10.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [27,]; let
            shifted : & 'static [u8] = & [5,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![17]; __reduce_map.extend(__rustylr_tset10.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [17,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (12,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (17,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (18,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (20,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (21,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Character,
            ::rusty_lr::parser::state::ShiftTarget::new(60, true)),
            (JsonNonTerminals::_CharacterPlus27,
            ::rusty_lr::parser::state::ShiftTarget::new(61, true)),
            (JsonNonTerminals::_TermSet29,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![52]; __reduce_map.extend(__rustylr_tset9.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [17, 18,
            52, 52, 53, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![53]; __reduce_map.extend(__rustylr_tset9.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [53,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(29,
            ::rusty_lr::parser::state::ShiftTarget::new(63, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [16,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![16]; __reduce_map
            .extend(__rustylr_tset11.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : Some(vec![16]), ruleset : { let rules : & 'static [u8] = &
            [16,]; let shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(66, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(67, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [13, 42,
            43, 44, 97,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(66, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 1, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(66, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            43, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 1, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(16,
            ::rusty_lr::parser::state::ShiftTarget::new(68, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [13,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Element,
            ::rusty_lr::parser::state::ShiftTarget::new(69, true)),
            (JsonNonTerminals::WS, ::rusty_lr::parser::state::ShiftTarget::new(70,
            true)), (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(70, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset0.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [13, 15,
            42, 43, 44, 97,]; let shifted : & 'static [u8] = & [4, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![13]; __reduce_map
            .extend(__rustylr_tset13.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [13,]; let
            shifted : & 'static [u8] = & [5,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(6,
            ::rusty_lr::parser::state::ShiftTarget::new(8, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(13, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(71, true)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(81, false)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)), (20,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Value,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (JsonNonTerminals::Object, ::rusty_lr::parser::state::ShiftTarget::new(77,
            false)), (JsonNonTerminals::Array,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::String, ::rusty_lr::parser::state::ShiftTarget::new(77,
            false)), (JsonNonTerminals::Number,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::Integer, ::rusty_lr::parser::state::ShiftTarget::new(81,
            true)), (JsonNonTerminals::_LiteralString22,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::_LiteralString23,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::_LiteralString24,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(81, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16,
            31, 32, 33, 34, 35, 45, 46, 47, 92, 93,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(72, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [34, 35, 92, 93,]; let shifted : & 'static
            [u8] = & [1, 1, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(73, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![93]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 90,
            91, 92, 93, 93,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0, 1,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [90, 90,
            91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![93]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [33, 90,
            91, 92, 93, 93,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0, 1,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::String,
            ::rusty_lr::parser::state::ShiftTarget::new(64, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [8, 13, 16,]; let shifted : & 'static [u8] = &
            [2, 1, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![8]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![8]), ruleset : { let rules : & 'static [u8] = & [8,]; let shifted :
            & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(78, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(80, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [15, 42,
            43, 44, 97,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(78, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 1, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(78, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            43, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 1, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![15]; __reduce_map
            .extend(__rustylr_tset15.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : Some(vec![15]), ruleset : { let rules : & 'static [u8] = &
            [15,]; let shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(13, ::rusty_lr::parser::state::ShiftTarget::new(82, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_Group34,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)),
            (JsonNonTerminals::__Group34Question35,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![96]; __reduce_map.extend(__rustylr_tset16.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [31, 94,
            95, 96,]; let shifted : & 'static [u8] = & [1, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [90, 91, 92, 93, 94,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![94]; __reduce_map.extend(__rustylr_tset17.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : Some(vec![94]), ruleset : { let rules :
            & 'static [u8] = & [94,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset16.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [90, 90,
            91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![95]; __reduce_map
            .extend(__rustylr_tset17.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : Some(vec![95]), ruleset : { let rules : & 'static [u8] = &
            [95,]; let shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(18, ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(91, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::Exponent,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(94, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset18.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [31, 36,
            37, 38, 97,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(10,
            ::rusty_lr::parser::state::ShiftTarget::new(88, false)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(88, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Sign, ::rusty_lr::parser::state::ShiftTarget::new(88,
            true)), (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(88, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [37, 39,
            40, 41, 97,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [37, 90, 91, 92, 93,]; let shifted : & 'static
            [u8] = & [2, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![37]; __reduce_map.extend(__rustylr_tset2.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : Some(vec![37]), ruleset : { let rules :
            & 'static [u8] = & [37,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset18.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [90, 90,
            91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(10,
            ::rusty_lr::parser::state::ShiftTarget::new(92, false)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(92, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Sign, ::rusty_lr::parser::state::ShiftTarget::new(92,
            true)), (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(92, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [38, 39,
            40, 41, 97,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(93, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [38, 90, 91, 92, 93,]; let shifted : & 'static
            [u8] = & [2, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![38]; __reduce_map.extend(__rustylr_tset2.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : Some(vec![38]), ruleset : { let rules :
            & 'static [u8] = & [38,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![31]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![31]), ruleset : { let rules : & 'static [u8] = & [31,]; let shifted
            : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(96, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(97, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(80, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset20.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [15, 42,
            43, 44, 97,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(96, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(97, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset20.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 1, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(96, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(97, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset20.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            43, 44, 97,]; let shifted : & 'static [u8] = & [0, 0, 1, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(13,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::_Group34,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)),
            (JsonNonTerminals::__Group34Question35,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![96]; __reduce_map.extend(__rustylr_tset21.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [31, 94,
            95, 96,]; let shifted : & 'static [u8] = & [1, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [90, 91, 92, 93, 94,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(100, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset21.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [90, 90,
            91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(18,
            ::rusty_lr::parser::state::ShiftTarget::new(102, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(105, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Exponent,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(94, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset22.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [31, 36,
            37, 38, 97,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(10,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(103, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [37, 39,
            40, 41, 97,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [37, 90, 91, 92, 93,]; let shifted : & 'static
            [u8] = & [2, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(104, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset22.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [90, 90,
            91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(10,
            ::rusty_lr::parser::state::ShiftTarget::new(106, false)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(106, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(106, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(106, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [38, 39,
            40, 41, 97,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(93, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [38, 90, 91, 92, 93,]; let shifted : & 'static
            [u8] = & [2, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![49]; __reduce_map.extend(__rustylr_tset5.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [49,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(109, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(110, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(80, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : Some(vec![97]),
            ruleset : { let rules : & 'static [u8] = & [15, 42, 43, 44, 97,]; let shifted
            : & 'static [u8] = & [2, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(109, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(110, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : Some(vec![97]),
            ruleset : { let rules : & 'static [u8] = & [42, 43, 44, 44, 97,]; let shifted
            : & 'static [u8] = & [0, 0, 0, 1, 0,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(109, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(110, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : Some(vec![97]),
            ruleset : { let rules : & 'static [u8] = & [42, 43, 43, 44, 97,]; let shifted
            : & 'static [u8] = & [0, 0, 1, 0, 0,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(13, ::rusty_lr::parser::state::ShiftTarget::new(112, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_Group34,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)),
            (JsonNonTerminals::__Group34Question35,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![96]; __reduce_map.extend(__rustylr_tset23.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : Some(vec![96]), ruleset : { let rules : & 'static [u8] = &
            [31, 94, 95, 96,]; let shifted : & 'static [u8] = & [1, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(113, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(113, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(113, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [90, 91, 92, 93, 94,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(113, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(113, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(113, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset23.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : Some(vec![90]), ruleset : { let rules : & 'static [u8] = &
            [90, 90, 91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0,
            0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(18,
            ::rusty_lr::parser::state::ShiftTarget::new(115, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(118, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Exponent,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(94, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset24.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : Some(vec![97]), ruleset : { let rules : & 'static [u8] = &
            [31, 36, 37, 38, 97,]; let shifted : & 'static [u8] = & [2, 0, 0, 0, 0,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(10,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(116, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [37, 39,
            40, 41, 97,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [37, 90, 91, 92, 93,]; let shifted : & 'static
            [u8] = & [2, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(117, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![90]; __reduce_map.extend(__rustylr_tset24.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : Some(vec![90]), ruleset : { let rules : & 'static [u8] = &
            [90, 90, 91, 91, 92, 93,]; let shifted : & 'static [u8] = & [0, 1, 0, 1, 0,
            0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(10,
            ::rusty_lr::parser::state::ShiftTarget::new(119, false)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(119, false)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(119, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(119, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![97]; __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [38, 39,
            40, 41, 97,]; let shifted : & 'static [u8] = & [1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(93, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [38, 90, 91, 92, 93,]; let shifted : & 'static
            [u8] = & [2, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
        ];
        let states: Vec<JsonState> = states
            .into_iter()
            .map(|state| state.into())
            .collect();
        Self {
            rules,
            states,
            classes: vec![
                vec!['\t'..= '\n', '\r'..= '\r',], vec![' '..= ' ',], vec![], vec![],
                vec!['!'..= '!', '#'..= '*', ';'..= '@', 'G'..= 'Z', '^'..= '`', 'g'..=
                'k', 'm'..= 'm', 'o'..= 'q', 'v'..= 'z', '|'..= '|', '~'..=
                '\u{10ffff}',], vec!['/'..= '/',], vec!['b'..= 'b',], vec!['f'..= 'f',],
                vec!['n'..= 'n',], vec!['r'..= 'r',], vec!['t'..= 't',], vec!['+'..=
                '+',], vec!['-'..= '-',], vec![','..= ',',], vec!['.'..= '.',], vec!['0'
                ..= '0',], vec!['1'..= '9',], vec![':'..= ':',], vec!['A'..= 'D', 'F'..=
                'F',], vec!['E'..= 'E',], vec!['e'..= 'e',], vec!['['..= '[',], vec![']'
                ..= ']',], vec!['a'..= 'a',], vec!['c'..= 'd',], vec!['l'..= 'l',],
                vec!['s'..= 's',], vec!['u'..= 'u',], vec!['{'..= '{',], vec!['}'..=
                '}',], vec!['"'..= '"',], vec!['\\'..= '\\',],
            ],
        }
    }
}

// ==============================Generated Codes End===============================
        