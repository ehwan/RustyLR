
// This file was generated by rustylr 1.27.0
// This generated code is targeting rusty_lr version 3.34.0.
// There might be a build error if the version is not matched.
//
// ================================User Codes Begin================================

// =================================User Codes End=================================
/*
====================================Grammar=====================================

# of terminal classes: 31
# of states: 119

0: Json -> Element
1: Value -> Object
2: Value -> Array
3: Value -> String
4: Value -> Number
5: Value -> "true"
6: Value -> "false"
7: Value -> "null"
8: Object -> '{' WS '}'
9: Object -> '{' Members '}'
10: Object -> '{' error '}'
11: Members -> Member
12: Members -> Member ',' Members
13: Member -> WS String WS ':' Element
14: Array -> '[' $sep(Element, ',', *) ']'
15: Element -> WS Value WS
16: String -> '"' Character* '"'
17: Character -> '\\' Escape
18: Character -> ['\u{0020}'-'\u{10FFFF}']-'"'-'\\'
19: Escape -> '"'
20: Escape -> '\\'
21: Escape -> '/'
22: Escape -> 'b'
23: Escape -> 'f'
24: Escape -> 'n'
25: Escape -> 'r'
26: Escape -> 't'
27: Escape -> 'u' Hex Hex Hex Hex
28: Hex -> ['0'-'9']
29: Hex -> ['A'-'F']
30: Hex -> ['a'-'f']
31: Number -> Integer ('.', Digits)? Exponent
32: Integer -> ['0'-'9']
33: Integer -> ['1'-'9'] Digit+
34: Integer -> '-' ['0'-'9']
35: Integer -> '-' ['1'-'9'] Digit+
36: Exponent -> ""
37: Exponent -> 'E' Sign Digit+
38: Exponent -> 'e' Sign Digit+
39: Sign -> ""
40: Sign -> '+'
41: Sign -> '-'
42: WS -> ""
43: WS -> ' ' WS
44: WS -> ['\t', '\n', '\r'] WS
45: "true" -> 't' 'r' 'u' 'e'
46: "false" -> 'f' 'a' 'l' 's' 'e'
47: "null" -> 'n' 'u' 'l' 'l'
48: $sep(Element, ',', +) -> Element
49: $sep(Element, ',', +) -> Element ',' $sep(Element, ',', +)
50: $sep(Element, ',', *) -> $sep(Element, ',', +)
51: $sep(Element, ',', *) -> 
52: Character+ -> Character
53: Character+ -> Character Character+
54: Character* -> Character+
55: Character* -> 
56: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ' '
57: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ['!', '#'-'*', ..., '~'-'\u{10ffff}']
58: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '+'
59: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ','
60: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '-'
61: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '.'
62: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '/'
63: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '0'
64: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ['1'-'9']
65: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ':'
66: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ['A'-'D', 'F']
67: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'E'
68: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '['
69: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ']'
70: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'a'
71: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'b'
72: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> ['c'-'d']
73: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'e'
74: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'f'
75: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'l'
76: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'n'
77: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'r'
78: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 's'
79: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 't'
80: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> 'u'
81: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '{'
82: ['\u{0020}'-'\u{10FFFF}']-'"'-'\\' -> '}'
83: ['A'-'F'] -> ['A'-'D', 'F']
84: ['A'-'F'] -> 'E'
85: ['a'-'f'] -> 'a'
86: ['a'-'f'] -> 'b'
87: ['a'-'f'] -> ['c'-'d']
88: ['a'-'f'] -> 'e'
89: ['a'-'f'] -> 'f'
90: Digit+ -> ['0'-'9']
91: Digit+ -> ['0'-'9'] Digit+
92: ['0'-'9'] -> '0'
93: ['0'-'9'] -> ['1'-'9']
94: ('.', Digits) -> '.' Digit+
95: ('.', Digits)? -> ('.', Digits)
96: ('.', Digits)? -> 
97: "" -> 
98: Augmented -> Json eof

*/
// =============================Generated Codes Begin==============================
/// type alias for `Context`
#[allow(non_camel_case_types, dead_code)]
pub type JsonContext = ::rusty_lr::parser::deterministic::Context<JsonDataStack, u8>;
/// type alias for CFG production rule
#[allow(non_camel_case_types, dead_code)]
pub type JsonRule = ::rusty_lr::rule::ProductionRule<
    JsonTerminalClasses,
    JsonNonTerminals,
>;
/// type alias for DFA state
#[allow(non_camel_case_types, dead_code)]
pub type JsonState = ::rusty_lr::parser::state::DenseState<
    JsonTerminalClasses,
    JsonNonTerminals,
    u8,
    u8,
>;
/// type alias for `ParseError`
#[allow(non_camel_case_types, dead_code)]
pub type JsonParseError = ::rusty_lr::parser::deterministic::ParseError<
    char,
    std::ops::Range<usize>,
    ::rusty_lr::DefaultReduceActionError,
>;
/// A enum that represents terminal classes
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std::hash::Hash,
    std::cmp::PartialEq,
    std::cmp::Eq,
    std::cmp::PartialOrd,
    std::cmp::Ord
)]
pub enum JsonTerminalClasses {
    TermClass0,
    TermClass1,
    TermClass2,
    TermClass3,
    TermClass4,
    TermClass5,
    TermClass6,
    TermClass7,
    TermClass8,
    TermClass9,
    TermClass10,
    TermClass11,
    TermClass12,
    TermClass13,
    TermClass14,
    TermClass15,
    TermClass16,
    TermClass17,
    TermClass18,
    TermClass19,
    TermClass20,
    TermClass21,
    TermClass22,
    TermClass23,
    TermClass24,
    TermClass25,
    TermClass26,
    TermClass27,
    TermClass28,
    TermClass29,
    TermClass30,
    error,
    eof,
}
impl ::rusty_lr::parser::terminalclass::TerminalClass for JsonTerminalClasses {
    type Term = char;
    const ERROR: Self = Self::error;
    const EOF: Self = Self::eof;
    fn as_str(&self) -> &'static str {
        match self {
            JsonTerminalClasses::TermClass0 => "['\\t', '\\n', '\\r']",
            JsonTerminalClasses::TermClass1 => "' '",
            JsonTerminalClasses::TermClass2 => "<Others>",
            JsonTerminalClasses::TermClass3 => "['!', '#'-'*', ..., '~'-'\\u{10ffff}']",
            JsonTerminalClasses::TermClass4 => "'/'",
            JsonTerminalClasses::TermClass5 => "'b'",
            JsonTerminalClasses::TermClass6 => "'f'",
            JsonTerminalClasses::TermClass7 => "'n'",
            JsonTerminalClasses::TermClass8 => "'r'",
            JsonTerminalClasses::TermClass9 => "'t'",
            JsonTerminalClasses::TermClass10 => "'+'",
            JsonTerminalClasses::TermClass11 => "'-'",
            JsonTerminalClasses::TermClass12 => "','",
            JsonTerminalClasses::TermClass13 => "'.'",
            JsonTerminalClasses::TermClass14 => "'0'",
            JsonTerminalClasses::TermClass15 => "['1'-'9']",
            JsonTerminalClasses::TermClass16 => "':'",
            JsonTerminalClasses::TermClass17 => "['A'-'D', 'F']",
            JsonTerminalClasses::TermClass18 => "'E'",
            JsonTerminalClasses::TermClass19 => "'e'",
            JsonTerminalClasses::TermClass20 => "'['",
            JsonTerminalClasses::TermClass21 => "']'",
            JsonTerminalClasses::TermClass22 => "'a'",
            JsonTerminalClasses::TermClass23 => "['c'-'d']",
            JsonTerminalClasses::TermClass24 => "'l'",
            JsonTerminalClasses::TermClass25 => "'s'",
            JsonTerminalClasses::TermClass26 => "'u'",
            JsonTerminalClasses::TermClass27 => "'{'",
            JsonTerminalClasses::TermClass28 => "'}'",
            JsonTerminalClasses::TermClass29 => "'\"'",
            JsonTerminalClasses::TermClass30 => "'\\\\'",
            JsonTerminalClasses::error => "error",
            JsonTerminalClasses::eof => "eof",
        }
    }
    fn to_usize(&self) -> usize {
        *self as usize
    }
    fn precedence(&self) -> ::rusty_lr::parser::Precedence {
        match self {
            JsonTerminalClasses::eof => {
                unreachable!("eof token cannot be used in precedence levels")
            }
            _ => ::rusty_lr::parser::Precedence::none(),
        }
    }
    fn from_term(terminal: &Self::Term) -> Self {
        #[allow(unreachable_patterns)]
        match terminal {
            '\t'..='\n' | '\r' => JsonTerminalClasses::TermClass0,
            ' ' => JsonTerminalClasses::TermClass1,
            '!'
            | '#'..='*'
            | ';'..='@'
            | 'G'..='Z'
            | '^'..='`'
            | 'g'..='k'
            | 'm'
            | 'o'..='q'
            | 'v'..='z'
            | '|'
            | '~'..='\u{10ffff}' => JsonTerminalClasses::TermClass3,
            '/' => JsonTerminalClasses::TermClass4,
            'b' => JsonTerminalClasses::TermClass5,
            'f' => JsonTerminalClasses::TermClass6,
            'n' => JsonTerminalClasses::TermClass7,
            'r' => JsonTerminalClasses::TermClass8,
            't' => JsonTerminalClasses::TermClass9,
            '+' => JsonTerminalClasses::TermClass10,
            '-' => JsonTerminalClasses::TermClass11,
            ',' => JsonTerminalClasses::TermClass12,
            '.' => JsonTerminalClasses::TermClass13,
            '0' => JsonTerminalClasses::TermClass14,
            '1'..='9' => JsonTerminalClasses::TermClass15,
            ':' => JsonTerminalClasses::TermClass16,
            'A'..='D' | 'F' => JsonTerminalClasses::TermClass17,
            'E' => JsonTerminalClasses::TermClass18,
            'e' => JsonTerminalClasses::TermClass19,
            '[' => JsonTerminalClasses::TermClass20,
            ']' => JsonTerminalClasses::TermClass21,
            'a' => JsonTerminalClasses::TermClass22,
            'c'..='d' => JsonTerminalClasses::TermClass23,
            'l' => JsonTerminalClasses::TermClass24,
            's' => JsonTerminalClasses::TermClass25,
            'u' => JsonTerminalClasses::TermClass26,
            '{' => JsonTerminalClasses::TermClass27,
            '}' => JsonTerminalClasses::TermClass28,
            '"' => JsonTerminalClasses::TermClass29,
            '\\' => JsonTerminalClasses::TermClass30,
            _ => JsonTerminalClasses::TermClass2,
        }
    }
}
impl std::fmt::Display for JsonTerminalClasses {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr::parser::terminalclass::TerminalClass;
        write!(f, "{}", self.as_str())
    }
}
impl std::fmt::Debug for JsonTerminalClasses {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr::parser::terminalclass::TerminalClass;
        write!(f, "{}", self.as_str())
    }
}
/// An enum that represents non-terminal symbols
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std::hash::Hash,
    std::cmp::PartialEq,
    std::cmp::Eq,
    std::cmp::PartialOrd,
    std::cmp::Ord
)]
pub enum JsonNonTerminals {
    Json,
    Value,
    Object,
    Members,
    Member,
    Array,
    Element,
    String,
    Character,
    Escape,
    Hex,
    Number,
    Integer,
    Exponent,
    Sign,
    WS,
    _LiteralString22,
    _LiteralString23,
    _LiteralString24,
    _ElementSepPlus25,
    _ElementSepStar26,
    _CharacterPlus27,
    _CharacterStar28,
    _TermSet29,
    _TermSet30,
    _TermSet31,
    _DigitPlus32,
    _TermSet33,
    _Group34,
    __Group34Question35,
    _LiteralString36,
    Augmented,
}
impl std::fmt::Display for JsonNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr::parser::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl std::fmt::Debug for JsonNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr::parser::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl ::rusty_lr::parser::nonterminal::NonTerminal for JsonNonTerminals {
    fn as_str(&self) -> &'static str {
        match self {
            JsonNonTerminals::Json => "Json",
            JsonNonTerminals::Value => "Value",
            JsonNonTerminals::Object => "Object",
            JsonNonTerminals::Members => "Members",
            JsonNonTerminals::Member => "Member",
            JsonNonTerminals::Array => "Array",
            JsonNonTerminals::Element => "Element",
            JsonNonTerminals::String => "String",
            JsonNonTerminals::Character => "Character",
            JsonNonTerminals::Escape => "Escape",
            JsonNonTerminals::Hex => "Hex",
            JsonNonTerminals::Number => "Number",
            JsonNonTerminals::Integer => "Integer",
            JsonNonTerminals::Exponent => "Exponent",
            JsonNonTerminals::Sign => "Sign",
            JsonNonTerminals::WS => "WS",
            JsonNonTerminals::_LiteralString22 => "\"true\"",
            JsonNonTerminals::_LiteralString23 => "\"false\"",
            JsonNonTerminals::_LiteralString24 => "\"null\"",
            JsonNonTerminals::_ElementSepPlus25 => "$sep(Element, ',', +)",
            JsonNonTerminals::_ElementSepStar26 => "$sep(Element, ',', *)",
            JsonNonTerminals::_CharacterPlus27 => "Character+",
            JsonNonTerminals::_CharacterStar28 => "Character*",
            JsonNonTerminals::_TermSet29 => "['\\u{0020}'-'\\u{10FFFF}']-'\"'-'\\\\'",
            JsonNonTerminals::_TermSet30 => "['A'-'F']",
            JsonNonTerminals::_TermSet31 => "['a'-'f']",
            JsonNonTerminals::_DigitPlus32 => "Digit+",
            JsonNonTerminals::_TermSet33 => "['0'-'9']",
            JsonNonTerminals::_Group34 => "('.', Digits)",
            JsonNonTerminals::__Group34Question35 => "('.', Digits)?",
            JsonNonTerminals::_LiteralString36 => "\"\"",
            JsonNonTerminals::Augmented => "Augmented",
        }
    }
    fn is_trace(&self) -> bool {
        match self {
            JsonNonTerminals::Json => false,
            JsonNonTerminals::Value => false,
            JsonNonTerminals::Object => false,
            JsonNonTerminals::Members => false,
            JsonNonTerminals::Member => false,
            JsonNonTerminals::Array => false,
            JsonNonTerminals::Element => false,
            JsonNonTerminals::String => false,
            JsonNonTerminals::Character => false,
            JsonNonTerminals::Escape => false,
            JsonNonTerminals::Hex => false,
            JsonNonTerminals::Number => false,
            JsonNonTerminals::Integer => false,
            JsonNonTerminals::Exponent => false,
            JsonNonTerminals::Sign => false,
            JsonNonTerminals::WS => false,
            JsonNonTerminals::_LiteralString22 => false,
            JsonNonTerminals::_LiteralString23 => false,
            JsonNonTerminals::_LiteralString24 => false,
            JsonNonTerminals::_ElementSepPlus25 => false,
            JsonNonTerminals::_ElementSepStar26 => false,
            JsonNonTerminals::_CharacterPlus27 => false,
            JsonNonTerminals::_CharacterStar28 => false,
            JsonNonTerminals::_TermSet29 => false,
            JsonNonTerminals::_TermSet30 => false,
            JsonNonTerminals::_TermSet31 => false,
            JsonNonTerminals::_DigitPlus32 => false,
            JsonNonTerminals::_TermSet33 => false,
            JsonNonTerminals::_Group34 => false,
            JsonNonTerminals::__Group34Question35 => false,
            JsonNonTerminals::_LiteralString36 => false,
            JsonNonTerminals::Augmented => false,
        }
    }
    fn nonterm_type(&self) -> Option<::rusty_lr::parser::nonterminal::NonTerminalType> {
        match self {
            JsonNonTerminals::Json => None,
            JsonNonTerminals::Value => None,
            JsonNonTerminals::Object => None,
            JsonNonTerminals::Members => None,
            JsonNonTerminals::Member => None,
            JsonNonTerminals::Array => None,
            JsonNonTerminals::Element => None,
            JsonNonTerminals::String => None,
            JsonNonTerminals::Character => None,
            JsonNonTerminals::Escape => None,
            JsonNonTerminals::Hex => None,
            JsonNonTerminals::Number => None,
            JsonNonTerminals::Integer => None,
            JsonNonTerminals::Exponent => None,
            JsonNonTerminals::Sign => None,
            JsonNonTerminals::WS => None,
            JsonNonTerminals::_LiteralString22 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::LiteralString)
            }
            JsonNonTerminals::_LiteralString23 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::LiteralString)
            }
            JsonNonTerminals::_LiteralString24 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::LiteralString)
            }
            JsonNonTerminals::_ElementSepPlus25 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::PlusRight)
            }
            JsonNonTerminals::_ElementSepStar26 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::Star)
            }
            JsonNonTerminals::_CharacterPlus27 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::PlusRight)
            }
            JsonNonTerminals::_CharacterStar28 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::Star)
            }
            JsonNonTerminals::_TermSet29 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::TerminalSet)
            }
            JsonNonTerminals::_TermSet30 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::TerminalSet)
            }
            JsonNonTerminals::_TermSet31 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::TerminalSet)
            }
            JsonNonTerminals::_DigitPlus32 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::PlusRight)
            }
            JsonNonTerminals::_TermSet33 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::TerminalSet)
            }
            JsonNonTerminals::_Group34 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::Group)
            }
            JsonNonTerminals::__Group34Question35 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::Optional)
            }
            JsonNonTerminals::_LiteralString36 => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::LiteralString)
            }
            JsonNonTerminals::Augmented => {
                Some(::rusty_lr::parser::nonterminal::NonTerminalType::Augmented)
            }
        }
    }
    fn to_usize(&self) -> usize {
        *self as usize
    }
}
/// enum for each non-terminal and terminal symbol, that actually hold data
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
pub struct JsonDataStack {}
impl Default for JsonDataStack {
    fn default() -> Self {
        Self {}
    }
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl JsonDataStack {
    ///Object -> '{' WS '}'
    #[inline]
    fn reduce_Object_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///Object -> '{' Members '}'
    #[inline]
    fn reduce_Object_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///Object -> '{' error '}'
    #[inline]
    fn reduce_Object_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 1usize);
        let mut __rustylr_location_error = __location_stack.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        {
            let start = __rustylr_location_error.start;
            let end = __rustylr_location_error.end;
            println!("Error recovered with '}}' at {start}..{end}");
        };
        Ok(())
    }
    ///Members -> Member
    #[inline]
    fn reduce_Members_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(())
    }
    ///Members -> Member ',' Members
    #[inline]
    fn reduce_Members_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///Member -> WS String WS ':' Element
    #[inline]
    fn reduce_Member_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 5usize);
        Ok(())
    }
    ///Array -> '[' $sep(Element, ',', *) ']'
    #[inline]
    fn reduce_Array_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///Element -> WS Value WS
    #[inline]
    fn reduce_Element_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///String -> '"' Character* '"'
    #[inline]
    fn reduce_String_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///Character -> '\\' Escape
    #[inline]
    fn reduce_Character_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(())
    }
    ///Escape -> 'u' Hex Hex Hex Hex
    #[inline]
    fn reduce_Escape_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 5usize);
        Ok(())
    }
    ///Number -> Integer ('.', Digits)? Exponent
    #[inline]
    fn reduce_Number_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///Integer -> ['1'-'9'] Digit+
    #[inline]
    fn reduce_Integer_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(())
    }
    ///Integer -> '-' ['0'-'9']
    #[inline]
    fn reduce_Integer_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(())
    }
    ///Integer -> '-' ['1'-'9'] Digit+
    #[inline]
    fn reduce_Integer_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///Exponent -> 'E' Sign Digit+
    #[inline]
    fn reduce_Exponent_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///Exponent -> 'e' Sign Digit+
    #[inline]
    fn reduce_Exponent_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///WS -> ' ' WS
    #[inline]
    fn reduce_WS_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(())
    }
    ///WS -> ['\t', '\n', '\r'] WS
    #[inline]
    fn reduce_WS_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(())
    }
    ///"true" -> 't' 'r' 'u' 'e'
    #[inline]
    fn reduce__LiteralString22_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 4usize);
        Ok(())
    }
    ///"false" -> 'f' 'a' 'l' 's' 'e'
    #[inline]
    fn reduce__LiteralString23_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 5usize);
        Ok(())
    }
    ///"null" -> 'n' 'u' 'l' 'l'
    #[inline]
    fn reduce__LiteralString24_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 4usize);
        Ok(())
    }
    ///$sep(Element, ',', +) -> Element
    #[inline]
    fn reduce__ElementSepPlus25_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(())
    }
    ///$sep(Element, ',', +) -> Element ',' $sep(Element, ',', +)
    #[inline]
    fn reduce__ElementSepPlus25_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 3usize);
        Ok(())
    }
    ///$sep(Element, ',', *) ->
    #[inline]
    fn reduce__ElementSepStar26_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        Ok(())
    }
    ///Character+ -> Character
    #[inline]
    fn reduce__CharacterPlus27_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(())
    }
    ///Character+ -> Character Character+
    #[inline]
    fn reduce__CharacterPlus27_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(())
    }
    ///Character* ->
    #[inline]
    fn reduce__CharacterStar28_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        Ok(())
    }
    ///Digit+ -> ['0'-'9']
    #[inline]
    fn reduce__DigitPlus32_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(())
    }
    ///Digit+ -> ['0'-'9'] Digit+
    #[inline]
    fn reduce__DigitPlus32_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(())
    }
    ///['0'-'9'] -> ['1'-'9']
    #[inline]
    fn reduce__TermSet33_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 1usize);
        Ok(())
    }
    ///('.', Digits) -> '.' Digit+
    #[inline]
    fn reduce__Group34_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __location_stack.truncate(__location_stack.len() - 2usize);
        Ok(())
    }
    ///('.', Digits)? ->
    #[inline]
    fn reduce___Group34Question35_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        Ok(())
    }
    ///"" ->
    #[inline]
    fn reduce__LiteralString36_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<std::ops::Range<usize>>,
        __push_data: bool,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<char>,
        data: &mut (),
        __rustylr_location0: &mut std::ops::Range<usize>,
    ) -> Result<(), ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        Ok(())
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl ::rusty_lr::parser::data_stack::DataStack for JsonDataStack {
    type Term = char;
    type NonTerm = JsonNonTerminals;
    type ReduceActionError = ::rusty_lr::DefaultReduceActionError;
    type UserData = ();
    type StartType = ();
    type Location = std::ops::Range<usize>;
    fn pop_start(&mut self) -> Option<Self::StartType> {
        Some(())
    }
    fn pop(&mut self) {}
    fn push_terminal(&mut self, term: Self::Term) {
        unreachable!();
    }
    fn push_empty(&mut self) {}
    fn clear(&mut self) {}
    fn reserve(&mut self, additional: usize) {}
    fn split_off(&mut self, at: usize) -> Self {
        Self {}
    }
    fn append(&mut self, other: &mut Self) {}
    fn reduce_action(
        data_stack: &mut Self,
        location_stack: &mut Vec<std::ops::Range<usize>>,
        push_data: bool,
        rule_index: usize,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Self::Term>,
        user_data: &mut Self::UserData,
        location0: &mut Self::Location,
    ) -> Result<(), Self::ReduceActionError> {
        match rule_index {
            8usize => {
                Self::reduce_Object_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            9usize => {
                Self::reduce_Object_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            10usize => {
                Self::reduce_Object_2(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            11usize => {
                Self::reduce_Members_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            12usize => {
                Self::reduce_Members_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            13usize => {
                Self::reduce_Member_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            14usize => {
                Self::reduce_Array_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            15usize => {
                Self::reduce_Element_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            16usize => {
                Self::reduce_String_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            17usize => {
                Self::reduce_Character_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            27usize => {
                Self::reduce_Escape_8(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            31usize => {
                Self::reduce_Number_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            33usize => {
                Self::reduce_Integer_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            34usize => {
                Self::reduce_Integer_2(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            35usize => {
                Self::reduce_Integer_3(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            37usize => {
                Self::reduce_Exponent_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            38usize => {
                Self::reduce_Exponent_2(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            43usize => {
                Self::reduce_WS_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            44usize => {
                Self::reduce_WS_2(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            45usize => {
                Self::reduce__LiteralString22_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            46usize => {
                Self::reduce__LiteralString23_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            47usize => {
                Self::reduce__LiteralString24_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            48usize => {
                Self::reduce__ElementSepPlus25_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            49usize => {
                Self::reduce__ElementSepPlus25_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            51usize => {
                Self::reduce__ElementSepStar26_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            52usize => {
                Self::reduce__CharacterPlus27_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            53usize => {
                Self::reduce__CharacterPlus27_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            55usize => {
                Self::reduce__CharacterStar28_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            90usize => {
                Self::reduce__DigitPlus32_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            91usize => {
                Self::reduce__DigitPlus32_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            93usize => {
                Self::reduce__TermSet33_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            94usize => {
                Self::reduce__Group34_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            96usize => {
                Self::reduce___Group34Question35_1(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            97usize => {
                Self::reduce__LiteralString36_0(
                    data_stack,
                    location_stack,
                    push_data,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            _ => {
                unreachable!("Invalid Rule: {}", rule_index);
            }
        }
    }
}
/// A struct that holds the entire parser table and production rules.
#[allow(unused_braces, unused_parens, unused_variables, non_snake_case, unused_mut)]
pub struct JsonParser {
    /// production rules
    pub rules: Vec<JsonRule>,
    /// states
    pub states: Vec<JsonState>,
}
impl ::rusty_lr::parser::Parser for JsonParser {
    type Term = char;
    type TermClass = JsonTerminalClasses;
    type NonTerm = JsonNonTerminals;
    type State = JsonState;
    const ERROR_USED: bool = true;
    fn precedence_types(&self, level: u8) -> Option<::rusty_lr::rule::ReduceType> {
        #[allow(unreachable_patterns)]
        match level {
            _ => None,
        }
    }
    fn get_rules(&self) -> &[JsonRule] {
        &self.rules
    }
    fn get_states(&self) -> &[JsonState] {
        &self.states
    }
}
/// A struct that holds the whole parser table.
#[allow(unused_braces, unused_parens, unused_variables, non_snake_case, unused_mut)]
impl JsonParser {
    /// Calculates the states and parser tables from the grammar.
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let rules: Vec<
            ::rusty_lr::rule::ProductionRule<JsonTerminalClasses, JsonNonTerminals>,
        > = vec![
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Json, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Element),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Value,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Object),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Value, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Array),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Value,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::String),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Value, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Number),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Value,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString22),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Value, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString23),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Value, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString24),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Object, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass27),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass28),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Object,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass27),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Members),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass28),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Object,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass27),
            ::rusty_lr::Token::Term(JsonTerminalClasses::error),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass28),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Members,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Member),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Members, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Member),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass12),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Members),], precedence : None,
            }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Member, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::String),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass16),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Element),], precedence : None,
            }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Array, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass20),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_ElementSepStar26),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass21),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Element,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Value),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::String, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass29),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_CharacterStar28),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass29),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Character, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass30),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Escape),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Character, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet29),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Escape,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass29),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass30),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass4),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Escape,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass5),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass6),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Escape,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass7),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass8),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Escape,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass9),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Escape, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass26),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Hex),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Hex),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Hex),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Hex),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Hex, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Hex,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet30),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Hex, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet31),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Number,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Integer),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::__Group34Question35),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Exponent),], precedence : None,
            }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Integer, rule
            : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Integer, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass15),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Integer,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass11),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Integer,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass11),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass15),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Exponent, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString36),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Exponent, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass18),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Sign),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Exponent, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass19),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::Sign),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Sign,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString36),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::Sign, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass10),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::Sign,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass11),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::WS, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_LiteralString36),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::WS, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass1),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::WS, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass0),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::WS),], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::_LiteralString22,
            rule : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass9),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass8),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass26),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass19),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_LiteralString23, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass6),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass22),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass24),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass25),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass19),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_LiteralString24, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass7),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass26),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass24),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass24),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_ElementSepPlus25, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Element),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_ElementSepPlus25, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Element),
            ::rusty_lr::Token::Term(JsonTerminalClasses::TermClass12),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_ElementSepPlus25),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_ElementSepStar26, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_ElementSepPlus25),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_ElementSepStar26, rule : vec![], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::_CharacterPlus27,
            rule : vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Character),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_CharacterPlus27, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Character),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_CharacterPlus27),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_CharacterStar28, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_CharacterPlus27),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_CharacterStar28, rule : vec![], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::_TermSet29, rule
            : vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass1),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass3),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass10),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass12),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass11),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass13),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass4),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass14),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass15),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass16),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass17),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass18),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass20),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass21),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass22),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass5),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass23),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass19),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass6),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass24),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass7),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass8),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass25),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass9),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass26),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass27),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet29, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass28),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet30, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass17),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet30, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass18),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass22),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass5),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass23),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass19),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet31, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass6),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_DigitPlus32, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_DigitPlus32, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_TermSet33),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet33, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass14),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_TermSet33, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass15),], precedence
            : None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::_Group34, rule :
            vec![::rusty_lr::Token::Term(JsonTerminalClasses::TermClass13),
            ::rusty_lr::Token::NonTerm(JsonNonTerminals::_DigitPlus32),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::__Group34Question35, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::_Group34),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            JsonNonTerminals::__Group34Question35, rule : vec![], precedence : None, },
            ::rusty_lr::rule::ProductionRule { name : JsonNonTerminals::_LiteralString36,
            rule : vec![], precedence : None, }, ::rusty_lr::rule::ProductionRule { name
            : JsonNonTerminals::Augmented, rule :
            vec![::rusty_lr::Token::NonTerm(JsonNonTerminals::Json),
            ::rusty_lr::Token::Term(JsonTerminalClasses::eof),], precedence : None, },
        ];
        static __RUSTYLR_TSET6: [JsonTerminalClasses; 7usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass13,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::TermClass21,
        ];
        static __RUSTYLR_TSET4: [JsonTerminalClasses; 9usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass13,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::TermClass21,
            JsonTerminalClasses::TermClass28,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET14: [JsonTerminalClasses; 7usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass13,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::TermClass28,
        ];
        static __RUSTYLR_TSET11: [JsonTerminalClasses; 7usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass16,
            JsonTerminalClasses::TermClass21,
            JsonTerminalClasses::TermClass28,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET21: [JsonTerminalClasses; 6usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::TermClass21,
        ];
        static __RUSTYLR_TSET17: [JsonTerminalClasses; 8usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::TermClass21,
            JsonTerminalClasses::TermClass28,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET16: [JsonTerminalClasses; 6usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::TermClass28,
        ];
        static __RUSTYLR_TSET22: [JsonTerminalClasses; 4usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass21,
        ];
        static __RUSTYLR_TSET2: [JsonTerminalClasses; 6usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass21,
            JsonTerminalClasses::TermClass28,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET18: [JsonTerminalClasses; 4usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass28,
        ];
        static __RUSTYLR_TSET3: [JsonTerminalClasses; 6usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass13,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET24: [JsonTerminalClasses; 5usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET25: [JsonTerminalClasses; 3usize] = [
            JsonTerminalClasses::TermClass0,
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET10: [JsonTerminalClasses; 29usize] = [
            JsonTerminalClasses::TermClass1,
            JsonTerminalClasses::TermClass3,
            JsonTerminalClasses::TermClass4,
            JsonTerminalClasses::TermClass5,
            JsonTerminalClasses::TermClass6,
            JsonTerminalClasses::TermClass7,
            JsonTerminalClasses::TermClass8,
            JsonTerminalClasses::TermClass9,
            JsonTerminalClasses::TermClass10,
            JsonTerminalClasses::TermClass11,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass13,
            JsonTerminalClasses::TermClass14,
            JsonTerminalClasses::TermClass15,
            JsonTerminalClasses::TermClass16,
            JsonTerminalClasses::TermClass17,
            JsonTerminalClasses::TermClass18,
            JsonTerminalClasses::TermClass19,
            JsonTerminalClasses::TermClass20,
            JsonTerminalClasses::TermClass21,
            JsonTerminalClasses::TermClass22,
            JsonTerminalClasses::TermClass23,
            JsonTerminalClasses::TermClass24,
            JsonTerminalClasses::TermClass25,
            JsonTerminalClasses::TermClass26,
            JsonTerminalClasses::TermClass27,
            JsonTerminalClasses::TermClass28,
            JsonTerminalClasses::TermClass29,
            JsonTerminalClasses::TermClass30,
        ];
        static __RUSTYLR_TSET1: [JsonTerminalClasses; 14usize] = [
            JsonTerminalClasses::TermClass6,
            JsonTerminalClasses::TermClass7,
            JsonTerminalClasses::TermClass9,
            JsonTerminalClasses::TermClass11,
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass14,
            JsonTerminalClasses::TermClass15,
            JsonTerminalClasses::TermClass16,
            JsonTerminalClasses::TermClass20,
            JsonTerminalClasses::TermClass21,
            JsonTerminalClasses::TermClass27,
            JsonTerminalClasses::TermClass28,
            JsonTerminalClasses::TermClass29,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET0: [JsonTerminalClasses; 9usize] = [
            JsonTerminalClasses::TermClass6,
            JsonTerminalClasses::TermClass7,
            JsonTerminalClasses::TermClass9,
            JsonTerminalClasses::TermClass11,
            JsonTerminalClasses::TermClass14,
            JsonTerminalClasses::TermClass15,
            JsonTerminalClasses::TermClass20,
            JsonTerminalClasses::TermClass27,
            JsonTerminalClasses::TermClass29,
        ];
        static __RUSTYLR_TSET20: [JsonTerminalClasses; 2usize] = [
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass21,
        ];
        static __RUSTYLR_TSET15: [JsonTerminalClasses; 4usize] = [
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass21,
            JsonTerminalClasses::TermClass28,
            JsonTerminalClasses::eof,
        ];
        static __RUSTYLR_TSET13: [JsonTerminalClasses; 2usize] = [
            JsonTerminalClasses::TermClass12,
            JsonTerminalClasses::TermClass28,
        ];
        static __RUSTYLR_TSET19: [JsonTerminalClasses; 2usize] = [
            JsonTerminalClasses::TermClass14,
            JsonTerminalClasses::TermClass15,
        ];
        static __RUSTYLR_TSET12: [JsonTerminalClasses; 1usize] = [
            JsonTerminalClasses::TermClass16,
        ];
        static __RUSTYLR_TSET5: [JsonTerminalClasses; 1usize] = [
            JsonTerminalClasses::TermClass21,
        ];
        static __RUSTYLR_TSET8: [JsonTerminalClasses; 1usize] = [
            JsonTerminalClasses::TermClass28,
        ];
        static __RUSTYLR_TSET7: [JsonTerminalClasses; 2usize] = [
            JsonTerminalClasses::TermClass28,
            JsonTerminalClasses::TermClass29,
        ];
        static __RUSTYLR_TSET9: [JsonTerminalClasses; 1usize] = [
            JsonTerminalClasses::TermClass29,
        ];
        static __RUSTYLR_TSET23: [JsonTerminalClasses; 1usize] = [
            JsonTerminalClasses::eof,
        ];
        let states: Vec<
            ::rusty_lr::parser::state::IntermediateState<
                JsonTerminalClasses,
                JsonNonTerminals,
                u8,
                u8,
            >,
        > = vec![
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Json,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),
            (JsonNonTerminals::Element, ::rusty_lr::parser::state::ShiftTarget::new(5,
            false)), (JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(7, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET0.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 7usize] = [0, 15, 42, 43, 44, 97, 98,];
            static __SHIFTED : [u8; 7usize] = [0, 0, 0, 0, 0, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET0.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 44, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 0, 1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET0.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 1, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], shift_goto_map_nonterm : vec![], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [43]; __reduce_map.extend(__RUSTYLR_TSET1
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 1usize] = [43,];
            static __SHIFTED : [u8; 1usize] = [2,]; __RULES.iter().zip(__SHIFTED.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() }, can_accept_error :
            false, }, ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term
            : vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES :
            [u8; 1usize] = [44]; __reduce_map.extend(__RUSTYLR_TSET1.iter().map(| term |
            (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() },
            ruleset : { static __RULES : [u8; 1usize] = [44,]; static __SHIFTED : [u8;
            1usize] = [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::eof,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [98,]; static __SHIFTED : [u8; 1usize] =
            [1,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [98,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(8, false)),
            (JsonTerminalClasses::TermClass7,
            ::rusty_lr::parser::state::ShiftTarget::new(13, false)),
            (JsonTerminalClasses::TermClass9,
            ::rusty_lr::parser::state::ShiftTarget::new(17, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(21, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(110, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(27, false)),
            (JsonTerminalClasses::TermClass20,
            ::rusty_lr::parser::state::ShiftTarget::new(29, false)),
            (JsonTerminalClasses::TermClass27,
            ::rusty_lr::parser::state::ShiftTarget::new(39, false)),
            (JsonTerminalClasses::TermClass29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Value,
            ::rusty_lr::parser::state::ShiftTarget::new(107, true)),
            (JsonNonTerminals::Object, ::rusty_lr::parser::state::ShiftTarget::new(107,
            false)), (JsonNonTerminals::Array,
            ::rusty_lr::parser::state::ShiftTarget::new(107, false)),
            (JsonNonTerminals::String, ::rusty_lr::parser::state::ShiftTarget::new(107,
            false)), (JsonNonTerminals::Number,
            ::rusty_lr::parser::state::ShiftTarget::new(107, false)),
            (JsonNonTerminals::Integer, ::rusty_lr::parser::state::ShiftTarget::new(110,
            true)), (JsonNonTerminals::_LiteralString22,
            ::rusty_lr::parser::state::ShiftTarget::new(107, false)),
            (JsonNonTerminals::_LiteralString23,
            ::rusty_lr::parser::state::ShiftTarget::new(107, false)),
            (JsonNonTerminals::_LiteralString24,
            ::rusty_lr::parser::state::ShiftTarget::new(107, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(110, false)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 23usize] = [1, 2, 3, 4,
            5, 6, 7, 8, 9, 10, 14, 15, 16, 31, 32, 33, 34, 35, 45, 46, 47, 92, 93,];
            static __SHIFTED : [u8; 23usize] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass22,
            ::rusty_lr::parser::state::ShiftTarget::new(9, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [46,]; static __SHIFTED : [u8; 1usize] =
            [1,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass24,
            ::rusty_lr::parser::state::ShiftTarget::new(10, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [46,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass25,
            ::rusty_lr::parser::state::ShiftTarget::new(11, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [46,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(12, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [46,]; static __SHIFTED : [u8; 1usize] =
            [4,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [46]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [46,]; static __SHIFTED : [u8; 1usize] =
            [5,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass26,
            ::rusty_lr::parser::state::ShiftTarget::new(14, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [47,]; static __SHIFTED : [u8; 1usize] =
            [1,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass24,
            ::rusty_lr::parser::state::ShiftTarget::new(15, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [47,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass24,
            ::rusty_lr::parser::state::ShiftTarget::new(16, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [47,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [47]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [47,]; static __SHIFTED : [u8; 1usize] =
            [4,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass8,
            ::rusty_lr::parser::state::ShiftTarget::new(18, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [45,]; static __SHIFTED : [u8; 1usize] =
            [1,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass26,
            ::rusty_lr::parser::state::ShiftTarget::new(19, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [45,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(20, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [45,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [45]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [45,]; static __SHIFTED : [u8; 1usize] =
            [4,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(26, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(22, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 4usize] = [34, 35, 92,
            93,]; static __SHIFTED : [u8; 4usize] = [1, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(24, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(24, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [93]; __reduce_map.extend(__RUSTYLR_TSET3.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [35, 90, 91, 92, 93, 93,];
            static __SHIFTED : [u8; 6usize] = [2, 0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [35]; __reduce_map.extend(__RUSTYLR_TSET4.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [35,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(24, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(24, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET3.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [91]; __reduce_map.extend(__RUSTYLR_TSET4.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [91,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [34]; __reduce_map.extend(__RUSTYLR_TSET4.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [34,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(24, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(24, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [93]; __reduce_map.extend(__RUSTYLR_TSET3.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [33, 90, 91, 92, 93, 93,];
            static __SHIFTED : [u8; 6usize] = [1, 0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [33]; __reduce_map.extend(__RUSTYLR_TSET4.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [33,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Element,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),
            (JsonNonTerminals::WS, ::rusty_lr::parser::state::ShiftTarget::new(32,
            true)), (JsonNonTerminals::_ElementSepPlus25,
            ::rusty_lr::parser::state::ShiftTarget::new(37, false)),
            (JsonNonTerminals::_ElementSepStar26,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(32, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [51]; __reduce_map.extend(__RUSTYLR_TSET5.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } { static __REDUCE_RULES : [u8;
            1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET0.iter().map(| term | (*
            term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() },
            ruleset : { static __RULES : [u8; 10usize] = [14, 15, 42, 43, 44, 48, 49, 50,
            51, 97,]; static __SHIFTED : [u8; 10usize] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0,];
            __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass12,
            ::rusty_lr::parser::state::ShiftTarget::new(31, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [48]; __reduce_map.extend(__RUSTYLR_TSET5.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 2usize] = [48, 49,]; static __SHIFTED : [u8; 2usize]
            = [1, 1,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Element,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),
            (JsonNonTerminals::WS, ::rusty_lr::parser::state::ShiftTarget::new(32,
            true)), (JsonNonTerminals::_ElementSepPlus25,
            ::rusty_lr::parser::state::ShiftTarget::new(106, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(32, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET0.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 8usize] = [15, 42, 43, 44, 48, 49, 49,
            97,]; static __SHIFTED : [u8; 8usize] = [0, 0, 0, 0, 0, 0, 2, 0,]; __RULES
            .iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(8, false)),
            (JsonTerminalClasses::TermClass7,
            ::rusty_lr::parser::state::ShiftTarget::new(13, false)),
            (JsonTerminalClasses::TermClass9,
            ::rusty_lr::parser::state::ShiftTarget::new(17, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(33, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(97, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(36, false)),
            (JsonTerminalClasses::TermClass20,
            ::rusty_lr::parser::state::ShiftTarget::new(29, false)),
            (JsonTerminalClasses::TermClass27,
            ::rusty_lr::parser::state::ShiftTarget::new(39, false)),
            (JsonTerminalClasses::TermClass29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Value,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),
            (JsonNonTerminals::Object, ::rusty_lr::parser::state::ShiftTarget::new(94,
            false)), (JsonNonTerminals::Array,
            ::rusty_lr::parser::state::ShiftTarget::new(94, false)),
            (JsonNonTerminals::String, ::rusty_lr::parser::state::ShiftTarget::new(94,
            false)), (JsonNonTerminals::Number,
            ::rusty_lr::parser::state::ShiftTarget::new(94, false)),
            (JsonNonTerminals::Integer, ::rusty_lr::parser::state::ShiftTarget::new(97,
            true)), (JsonNonTerminals::_LiteralString22,
            ::rusty_lr::parser::state::ShiftTarget::new(94, false)),
            (JsonNonTerminals::_LiteralString23,
            ::rusty_lr::parser::state::ShiftTarget::new(94, false)),
            (JsonNonTerminals::_LiteralString24,
            ::rusty_lr::parser::state::ShiftTarget::new(94, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(97, false)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 23usize] = [1, 2, 3, 4,
            5, 6, 7, 8, 9, 10, 14, 15, 16, 31, 32, 33, 34, 35, 45, 46, 47, 92, 93,];
            static __SHIFTED : [u8; 23usize] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(26, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(34, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 4usize] = [34, 35, 92,
            93,]; static __SHIFTED : [u8; 4usize] = [1, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(35, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(35, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [93]; __reduce_map.extend(__RUSTYLR_TSET6.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [35, 90, 91, 92, 93, 93,];
            static __SHIFTED : [u8; 6usize] = [2, 0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(35, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(35, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET6.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(35, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(35, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(35, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [93]; __reduce_map.extend(__RUSTYLR_TSET6.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [33, 90, 91, 92, 93, 93,];
            static __SHIFTED : [u8; 6usize] = [1, 0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass21,
            ::rusty_lr::parser::state::ShiftTarget::new(38, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [14,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [14]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [14,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(40, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(41, false)),
            (JsonTerminalClasses::error, ::rusty_lr::parser::state::ShiftTarget::new(42,
            true)),], shift_goto_map_nonterm : vec![(JsonNonTerminals::Members,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)),
            (JsonNonTerminals::Member, ::rusty_lr::parser::state::ShiftTarget::new(46,
            true)), (JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(75, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(75, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET7.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 10usize] = [8, 9, 10, 11, 12, 13, 42,
            43, 44, 97,]; static __SHIFTED : [u8; 10usize] = [1, 1, 1, 0, 0, 0, 0, 0, 0,
            0,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : true, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(40, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(41, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET7.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 44, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 0, 1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(40, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(41, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET7.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 1, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass28,
            ::rusty_lr::parser::state::ShiftTarget::new(43, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [10,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [10]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [10,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass28,
            ::rusty_lr::parser::state::ShiftTarget::new(45, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [9,]; static __SHIFTED : [u8; 1usize] = [2,];
            __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [9]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [9,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass12,
            ::rusty_lr::parser::state::ShiftTarget::new(47, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [11]; __reduce_map.extend(__RUSTYLR_TSET8.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 2usize] = [11, 12,]; static __SHIFTED : [u8; 2usize]
            = [1, 1,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(48, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(49, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Members,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)),
            (JsonNonTerminals::Member, ::rusty_lr::parser::state::ShiftTarget::new(46,
            true)), (JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(51, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET9.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 8usize] = [11, 12, 12, 13, 42, 43, 44,
            97,]; static __SHIFTED : [u8; 8usize] = [0, 0, 2, 0, 0, 0, 0, 0,]; __RULES
            .iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(48, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(49, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET9.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 44, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 0, 1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(48, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(49, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET9.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 1, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], shift_goto_map_nonterm : vec![], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [12]; __reduce_map.extend(__RUSTYLR_TSET8
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 1usize] = [12,];
            static __SHIFTED : [u8; 1usize] = [3,]; __RULES.iter().zip(__SHIFTED.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() }, can_accept_error :
            false, }, ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term
            : vec![(JsonTerminalClasses::TermClass29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::String,
            ::rusty_lr::parser::state::ShiftTarget::new(64, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 2usize] = [13, 16,];
            static __SHIFTED : [u8; 2usize] = [1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass3,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass4,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass5,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass7,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass8,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass9,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass10,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass12,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass13,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass16,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass17,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass20,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass21,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass22,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass23,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass24,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass25,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass26,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass27,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass28,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass30,
            ::rusty_lr::parser::state::ShiftTarget::new(53, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Character,
            ::rusty_lr::parser::state::ShiftTarget::new(60, true)),
            (JsonNonTerminals::_CharacterPlus27,
            ::rusty_lr::parser::state::ShiftTarget::new(62, false)),
            (JsonNonTerminals::_CharacterStar28,
            ::rusty_lr::parser::state::ShiftTarget::new(62, true)),
            (JsonNonTerminals::_TermSet29,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [55]; __reduce_map.extend(__RUSTYLR_TSET9.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 34usize] = [16, 17, 18, 52, 53, 54, 55,
            56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
            75, 76, 77, 78, 79, 80, 81, 82,]; static __SHIFTED : [u8; 34usize] = [1, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass4,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),
            (JsonTerminalClasses::TermClass5,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),
            (JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),
            (JsonTerminalClasses::TermClass7,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),
            (JsonTerminalClasses::TermClass8,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),
            (JsonTerminalClasses::TermClass9,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),
            (JsonTerminalClasses::TermClass26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, false)),
            (JsonTerminalClasses::TermClass29,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),
            (JsonTerminalClasses::TermClass30,
            ::rusty_lr::parser::state::ShiftTarget::new(59, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Escape,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 10usize] = [17, 19, 20,
            21, 22, 23, 24, 25, 26, 27,]; static __SHIFTED : [u8; 10usize] = [1, 0, 0, 0,
            0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass5,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonTerminalClasses::TermClass17,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonTerminalClasses::TermClass22,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonTerminalClasses::TermClass23,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Hex,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)),
            (JsonNonTerminals::_TermSet30,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonNonTerminals::_TermSet31,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(55, false)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 13usize] = [27, 28, 29,
            30, 83, 84, 85, 86, 87, 88, 89, 92, 93,]; static __SHIFTED : [u8; 13usize] =
            [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass5,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonTerminalClasses::TermClass17,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonTerminalClasses::TermClass22,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonTerminalClasses::TermClass23,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Hex,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)),
            (JsonNonTerminals::_TermSet30,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonNonTerminals::_TermSet31,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(56, false)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 13usize] = [27, 28, 29,
            30, 83, 84, 85, 86, 87, 88, 89, 92, 93,]; static __SHIFTED : [u8; 13usize] =
            [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass5,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonTerminalClasses::TermClass17,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonTerminalClasses::TermClass22,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonTerminalClasses::TermClass23,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Hex,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)),
            (JsonNonTerminals::_TermSet30,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonNonTerminals::_TermSet31,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(57, false)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 13usize] = [27, 28, 29,
            30, 83, 84, 85, 86, 87, 88, 89, 92, 93,]; static __SHIFTED : [u8; 13usize] =
            [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass5,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonTerminalClasses::TermClass17,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonTerminalClasses::TermClass22,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonTerminalClasses::TermClass23,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Hex,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),
            (JsonNonTerminals::_TermSet30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonNonTerminals::_TermSet31,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(58, false)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 13usize] = [27, 28, 29,
            30, 83, 84, 85, 86, 87, 88, 89, 92, 93,]; static __SHIFTED : [u8; 13usize] =
            [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], shift_goto_map_nonterm : vec![], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [27]; __reduce_map.extend(__RUSTYLR_TSET10
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 1usize] = [27,];
            static __SHIFTED : [u8; 1usize] = [5,]; __RULES.iter().zip(__SHIFTED.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() }, can_accept_error :
            false, }, ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term
            : vec![], shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES :
            [u8; 1usize] = [17]; __reduce_map.extend(__RUSTYLR_TSET10.iter().map(| term |
            (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() },
            ruleset : { static __RULES : [u8; 1usize] = [17,]; static __SHIFTED : [u8;
            1usize] = [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass3,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass4,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass5,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass7,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass8,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass9,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass10,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass12,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass13,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass16,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass17,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass20,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass21,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass22,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass23,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass24,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass25,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass26,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass27,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass28,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),
            (JsonTerminalClasses::TermClass30,
            ::rusty_lr::parser::state::ShiftTarget::new(53, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Character,
            ::rusty_lr::parser::state::ShiftTarget::new(60, true)),
            (JsonNonTerminals::_CharacterPlus27,
            ::rusty_lr::parser::state::ShiftTarget::new(61, true)),
            (JsonNonTerminals::_TermSet29,
            ::rusty_lr::parser::state::ShiftTarget::new(60, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [52]; __reduce_map.extend(__RUSTYLR_TSET9.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 33usize] = [17, 18, 52, 52, 53, 53, 56,
            57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
            76, 77, 78, 79, 80, 81, 82,]; static __SHIFTED : [u8; 33usize] = [0, 0, 0, 1,
            0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [53]; __reduce_map.extend(__RUSTYLR_TSET9.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [53,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass29,
            ::rusty_lr::parser::state::ShiftTarget::new(63, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [16,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [16]; __reduce_map.extend(__RUSTYLR_TSET11.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [16,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(65, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(66, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(67, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET12.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [13, 42, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(65, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(66, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET12.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 44, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 0, 1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(65, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(66, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET12.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 1, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass16,
            ::rusty_lr::parser::state::ShiftTarget::new(68, false)),],
            shift_goto_map_nonterm : vec![], reduce_map : Default::default(), ruleset : {
            static __RULES : [u8; 1usize] = [13,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Element,
            ::rusty_lr::parser::state::ShiftTarget::new(69, true)),
            (JsonNonTerminals::WS, ::rusty_lr::parser::state::ShiftTarget::new(70,
            true)), (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(70, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET0.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [13, 15, 42, 43, 44, 97,];
            static __SHIFTED : [u8; 6usize] = [4, 0, 0, 0, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [13]; __reduce_map.extend(__RUSTYLR_TSET13.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [13,]; static __SHIFTED : [u8; 1usize] =
            [5,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass6,
            ::rusty_lr::parser::state::ShiftTarget::new(8, false)),
            (JsonTerminalClasses::TermClass7,
            ::rusty_lr::parser::state::ShiftTarget::new(13, false)),
            (JsonTerminalClasses::TermClass9,
            ::rusty_lr::parser::state::ShiftTarget::new(17, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(71, false)),
            (JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(81, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(74, false)),
            (JsonTerminalClasses::TermClass20,
            ::rusty_lr::parser::state::ShiftTarget::new(29, false)),
            (JsonTerminalClasses::TermClass27,
            ::rusty_lr::parser::state::ShiftTarget::new(39, false)),
            (JsonTerminalClasses::TermClass29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Value,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (JsonNonTerminals::Object, ::rusty_lr::parser::state::ShiftTarget::new(77,
            false)), (JsonNonTerminals::Array,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::String, ::rusty_lr::parser::state::ShiftTarget::new(77,
            false)), (JsonNonTerminals::Number,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::Integer, ::rusty_lr::parser::state::ShiftTarget::new(81,
            true)), (JsonNonTerminals::_LiteralString22,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::_LiteralString23,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::_LiteralString24,
            ::rusty_lr::parser::state::ShiftTarget::new(77, false)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(81, false)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 23usize] = [1, 2, 3, 4,
            5, 6, 7, 8, 9, 10, 14, 15, 16, 31, 32, 33, 34, 35, 45, 46, 47, 92, 93,];
            static __SHIFTED : [u8; 23usize] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(26, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(72, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 4usize] = [34, 35, 92,
            93,]; static __SHIFTED : [u8; 4usize] = [1, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(73, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(73, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [93]; __reduce_map.extend(__RUSTYLR_TSET14.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [35, 90, 91, 92, 93, 93,];
            static __SHIFTED : [u8; 6usize] = [2, 0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(73, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(73, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET14.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(73, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(73, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [93]; __reduce_map.extend(__RUSTYLR_TSET14.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [33, 90, 91, 92, 93, 93,];
            static __SHIFTED : [u8; 6usize] = [1, 0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass28,
            ::rusty_lr::parser::state::ShiftTarget::new(76, false)),
            (JsonTerminalClasses::TermClass29,
            ::rusty_lr::parser::state::ShiftTarget::new(52, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::String,
            ::rusty_lr::parser::state::ShiftTarget::new(64, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 3usize] = [8, 13, 16,];
            static __SHIFTED : [u8; 3usize] = [2, 1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], shift_goto_map_nonterm : vec![], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [8]; __reduce_map.extend(__RUSTYLR_TSET2
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 1usize] = [8,];
            static __SHIFTED : [u8; 1usize] = [3,]; __RULES.iter().zip(__SHIFTED.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() }, can_accept_error :
            false, }, ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term
            : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(78, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(79, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(80, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET13.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [15, 42, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(78, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(79, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET13.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 44, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 0, 1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(78, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(79, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET13.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 1, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], shift_goto_map_nonterm : vec![], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [15]; __reduce_map.extend(__RUSTYLR_TSET15
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 1usize] = [15,];
            static __SHIFTED : [u8; 1usize] = [3,]; __RULES.iter().zip(__SHIFTED.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() }, can_accept_error :
            false, }, ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term
            : vec![(JsonTerminalClasses::TermClass13,
            ::rusty_lr::parser::state::ShiftTarget::new(82, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_Group34,
            ::rusty_lr::parser::state::ShiftTarget::new(85, false)),
            (JsonNonTerminals::__Group34Question35,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [96]; __reduce_map.extend(__RUSTYLR_TSET16.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 4usize] = [31, 94, 95, 96,]; static
            __SHIFTED : [u8; 4usize] = [1, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(84, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(84, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [90, 91, 92,
            93, 94,]; static __SHIFTED : [u8; 5usize] = [0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [94]; __reduce_map.extend(__RUSTYLR_TSET17.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [94,]; static __SHIFTED : [u8; 1usize] =
            [2,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(84, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(84, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET16.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(86, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(90, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Exponent,
            ::rusty_lr::parser::state::ShiftTarget::new(93, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(93, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET18.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [31, 36, 37, 38, 97,]; static
            __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass10,
            ::rusty_lr::parser::state::ShiftTarget::new(87, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(87, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(87, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET19.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [37, 39, 40, 41, 97,]; static
            __SHIFTED : [u8; 5usize] = [1, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(89, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(89, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [37, 90, 91,
            92, 93,]; static __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [37]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [37,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(89, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(89, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET18.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass10,
            ::rusty_lr::parser::state::ShiftTarget::new(91, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(91, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(91, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(91, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET19.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [38, 39, 40, 41, 97,]; static
            __SHIFTED : [u8; 5usize] = [1, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(89, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(89, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(92, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [38, 90, 91,
            92, 93,]; static __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [38]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [38,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [31]; __reduce_map.extend(__RUSTYLR_TSET2.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [31,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(95, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(96, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(80, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET20.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [15, 42, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(95, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(96, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET20.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 44, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 0, 1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(95, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(96, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET20.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 1, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass13,
            ::rusty_lr::parser::state::ShiftTarget::new(98, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_Group34,
            ::rusty_lr::parser::state::ShiftTarget::new(100, false)),
            (JsonNonTerminals::__Group34Question35,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [96]; __reduce_map.extend(__RUSTYLR_TSET21.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 4usize] = [31, 94, 95, 96,]; static
            __SHIFTED : [u8; 4usize] = [1, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(99, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(99, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [90, 91, 92,
            93, 94,]; static __SHIFTED : [u8; 5usize] = [0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(99, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(99, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET21.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(101, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(104, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Exponent,
            ::rusty_lr::parser::state::ShiftTarget::new(93, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(93, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET22.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [31, 36, 37, 38, 97,]; static
            __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass10,
            ::rusty_lr::parser::state::ShiftTarget::new(102, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(102, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(102, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(102, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET19
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 5usize] = [37,
            39, 40, 41, 97,]; static __SHIFTED : [u8; 5usize] = [1, 0, 0, 0, 0,]; __RULES
            .iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(103, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [37, 90, 91,
            92, 93,]; static __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(103, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET22.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass10,
            ::rusty_lr::parser::state::ShiftTarget::new(105, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(105, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(105, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(105, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET19
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 5usize] = [38,
            39, 40, 41, 97,]; static __SHIFTED : [u8; 5usize] = [1, 0, 0, 0, 0,]; __RULES
            .iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(103, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(92, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(103, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [38, 90, 91,
            92, 93,]; static __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); { static __REDUCE_RULES : [u8; 1usize] =
            [49]; __reduce_map.extend(__RUSTYLR_TSET5.iter().map(| term | (* term,
            __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect() }, ruleset :
            { static __RULES : [u8; 1usize] = [49,]; static __SHIFTED : [u8; 1usize] =
            [3,]; __RULES.iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(108, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(109, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(80, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET23.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [15, 42, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(108, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(109, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(4, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET23.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 44, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 0, 1, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass0,
            ::rusty_lr::parser::state::ShiftTarget::new(108, false)),
            (JsonTerminalClasses::TermClass1,
            ::rusty_lr::parser::state::ShiftTarget::new(109, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::WS,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(3, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET23.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [42, 43, 43, 44, 97,]; static
            __SHIFTED : [u8; 5usize] = [0, 0, 1, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass13,
            ::rusty_lr::parser::state::ShiftTarget::new(111, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_Group34,
            ::rusty_lr::parser::state::ShiftTarget::new(113, false)),
            (JsonNonTerminals::__Group34Question35,
            ::rusty_lr::parser::state::ShiftTarget::new(113, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [96]; __reduce_map.extend(__RUSTYLR_TSET24.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 4usize] = [31, 94, 95, 96,]; static
            __SHIFTED : [u8; 4usize] = [1, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(112, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(112, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(112, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [90, 91, 92,
            93, 94,]; static __SHIFTED : [u8; 5usize] = [0, 0, 0, 0, 1,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(112, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(112, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(112, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET24.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass18,
            ::rusty_lr::parser::state::ShiftTarget::new(114, false)),
            (JsonTerminalClasses::TermClass19,
            ::rusty_lr::parser::state::ShiftTarget::new(117, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Exponent,
            ::rusty_lr::parser::state::ShiftTarget::new(93, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(93, false)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET25.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 5usize] = [31, 36, 37, 38, 97,]; static
            __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter().zip(__SHIFTED
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() },
            can_accept_error : false, }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(JsonTerminalClasses::TermClass10,
            ::rusty_lr::parser::state::ShiftTarget::new(115, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(115, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(115, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(115, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET19
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 5usize] = [37,
            39, 40, 41, 97,]; static __SHIFTED : [u8; 5usize] = [1, 0, 0, 0, 0,]; __RULES
            .iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(116, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [37, 90, 91,
            92, 93,]; static __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(116, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); { static __REDUCE_RULES
            : [u8; 1usize] = [90]; __reduce_map.extend(__RUSTYLR_TSET25.iter().map(| term
            | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map.into_iter().collect()
            }, ruleset : { static __RULES : [u8; 6usize] = [90, 90, 91, 91, 92, 93,];
            static __SHIFTED : [u8; 6usize] = [0, 1, 0, 1, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass10,
            ::rusty_lr::parser::state::ShiftTarget::new(118, false)),
            (JsonTerminalClasses::TermClass11,
            ::rusty_lr::parser::state::ShiftTarget::new(118, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::Sign,
            ::rusty_lr::parser::state::ShiftTarget::new(118, true)),
            (JsonNonTerminals::_LiteralString36,
            ::rusty_lr::parser::state::ShiftTarget::new(118, false)),], reduce_map : {
            let mut __reduce_map = std::collections::BTreeMap::new(); { static
            __REDUCE_RULES : [u8; 1usize] = [97]; __reduce_map.extend(__RUSTYLR_TSET19
            .iter().map(| term | (* term, __REDUCE_RULES.to_vec()))); } __reduce_map
            .into_iter().collect() }, ruleset : { static __RULES : [u8; 5usize] = [38,
            39, 40, 41, 97,]; static __SHIFTED : [u8; 5usize] = [1, 0, 0, 0, 0,]; __RULES
            .iter().zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(JsonTerminalClasses::TermClass14,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)),
            (JsonTerminalClasses::TermClass15,
            ::rusty_lr::parser::state::ShiftTarget::new(116, false)),],
            shift_goto_map_nonterm : vec![(JsonNonTerminals::_DigitPlus32,
            ::rusty_lr::parser::state::ShiftTarget::new(92, true)),
            (JsonNonTerminals::_TermSet33,
            ::rusty_lr::parser::state::ShiftTarget::new(116, true)),], reduce_map :
            Default::default(), ruleset : { static __RULES : [u8; 5usize] = [38, 90, 91,
            92, 93,]; static __SHIFTED : [u8; 5usize] = [2, 0, 0, 0, 0,]; __RULES.iter()
            .zip(__SHIFTED.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() }, can_accept_error : false, },
        ];
        let states: Vec<JsonState> = states
            .into_iter()
            .map(|state| state.into())
            .collect();
        Self { rules, states }
    }
}

// ==============================Generated Codes End===============================
        