/// A struct to hold information about non-terminal symbols
pub trait NonTerminal {
    /// Whether this non-terminal is auto-generated by rustylr.
    /// Some non-terminals could be auto-generated to handle regex patterns, character sets, etc.
    fn is_auto_generated(&self) -> bool {
        self.nonterm_type().is_some()
    }
    /// Augmented rule will be generated for entry point of the grammar.
    fn is_augmented(&self) -> bool {
        self.nonterm_type() == Some(NonTerminalType::Augmented)
    }
    /// whether this non-terminal is set as %trace
    fn is_trace(&self) -> bool;

    /// for internal use only;
    /// If this non-terminal is auto-generated, gets the pattern where this non-terminal was generated from.
    fn nonterm_type(&self) -> Option<NonTerminalType>;

    /// Gets the pretty name of this non-terminal.
    fn as_str(&self) -> &'static str;
}

/// If the non-terminal is auto-generated,
/// the pattern where this non-terminal was generated from.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum NonTerminalType {
    /// zero or more repetitions
    Star,
    /// one or more repetitions with left recursion
    PlusLeft,
    /// one or more repetitions with right recursion
    PlusRight,
    /// zero or one repetition
    Optional,
    /// Augmented rule
    Augmented,
    /// error recovery non-terminal
    Error,

    /// terminal set enclosed in brackets ( [a-zA-Z0-9] )
    TerminalSet,
    /// rule with explicit lookaheads
    Lookahead,

    /// sequence of tokens enclosed in parentheses ( a B c ... )
    Group,

    /// "abc" or b"abc"
    LiteralString,
}

/// A trait for token that holds data.
/// This will be used for data stack in the parser.
pub trait TokenData: Sized {
    type Term;
    type NonTerm;
    type UserData;
    type ReduceActionError;
    type StartType;

    /// performs a reduce action with the given rule index
    fn reduce_action(
        rule_index: usize,
        reduce_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Self::Term,
        userdata: &mut Self::UserData,
    ) -> Result<Self, Self::ReduceActionError>;

    /// create new non-terminal for error recovery
    fn new_error_nonterm() -> Self;
}
